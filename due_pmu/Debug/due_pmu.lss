
due_pmu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004460  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084460  00084460  0000c460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00084468  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000e0  20070994  00084dfc  00010994  2**2
                  ALLOC
  4 .stack        00002004  20070a74  00084edc  00010994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009a92  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a23  00000000  00000000  0001a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003a22  00000000  00000000  0001becd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000928  00000000  00000000  0001f8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000848  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000160db  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ab84  00000000  00000000  00036b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00060838  00000000  00000000  000416be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001df0  00000000  00000000  000a1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a78 	.word	0x20072a78
   80004:	00080725 	.word	0x00080725
   80008:	00080721 	.word	0x00080721
   8000c:	00080721 	.word	0x00080721
   80010:	00080721 	.word	0x00080721
   80014:	00080721 	.word	0x00080721
   80018:	00080721 	.word	0x00080721
	...
   8002c:	00080721 	.word	0x00080721
   80030:	00080721 	.word	0x00080721
   80034:	00000000 	.word	0x00000000
   80038:	00080721 	.word	0x00080721
   8003c:	00080721 	.word	0x00080721
   80040:	00080721 	.word	0x00080721
   80044:	00080721 	.word	0x00080721
   80048:	00080721 	.word	0x00080721
   8004c:	00080721 	.word	0x00080721
   80050:	00080721 	.word	0x00080721
   80054:	00080721 	.word	0x00080721
   80058:	00080721 	.word	0x00080721
   8005c:	00080721 	.word	0x00080721
   80060:	00080721 	.word	0x00080721
   80064:	00080721 	.word	0x00080721
   80068:	00000000 	.word	0x00000000
   8006c:	00080451 	.word	0x00080451
   80070:	00080465 	.word	0x00080465
   80074:	00080479 	.word	0x00080479
   80078:	0008048d 	.word	0x0008048d
	...
   80084:	00080721 	.word	0x00080721
   80088:	00080721 	.word	0x00080721
   8008c:	00080721 	.word	0x00080721
   80090:	00080721 	.word	0x00080721
   80094:	00080721 	.word	0x00080721
   80098:	00080721 	.word	0x00080721
   8009c:	00080721 	.word	0x00080721
   800a0:	00080721 	.word	0x00080721
   800a4:	00000000 	.word	0x00000000
   800a8:	00080721 	.word	0x00080721
   800ac:	00080721 	.word	0x00080721
   800b0:	00080721 	.word	0x00080721
   800b4:	00080721 	.word	0x00080721
   800b8:	00080721 	.word	0x00080721
   800bc:	00080721 	.word	0x00080721
   800c0:	00080721 	.word	0x00080721
   800c4:	00080e59 	.word	0x00080e59
   800c8:	00080721 	.word	0x00080721
   800cc:	00080a91 	.word	0x00080a91
   800d0:	00080721 	.word	0x00080721
   800d4:	00080ac9 	.word	0x00080ac9
   800d8:	00080721 	.word	0x00080721
   800dc:	00080721 	.word	0x00080721
   800e0:	00080721 	.word	0x00080721
   800e4:	00080721 	.word	0x00080721
   800e8:	00080721 	.word	0x00080721
   800ec:	00080721 	.word	0x00080721
   800f0:	00080721 	.word	0x00080721

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070994 	.word	0x20070994
   80110:	00000000 	.word	0x00000000
   80114:	00084468 	.word	0x00084468

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084468 	.word	0x00084468
   8013c:	20070998 	.word	0x20070998
   80140:	00084468 	.word	0x00084468
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700a5 	.word	0x200700a5
   8018c:	00080505 	.word	0x00080505
   80190:	00080559 	.word	0x00080559
   80194:	00080569 	.word	0x00080569
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	00080579 	.word	0x00080579
   801a4:	000804a1 	.word	0x000804a1
   801a8:	000807d5 	.word	0x000807d5

000801ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801b0:	460c      	mov	r4, r1
   801b2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801b4:	b960      	cbnz	r0, 801d0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   801b6:	2a00      	cmp	r2, #0
   801b8:	dd0e      	ble.n	801d8 <_read+0x2c>
   801ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801bc:	4e09      	ldr	r6, [pc, #36]	; (801e4 <_read+0x38>)
   801be:	4d0a      	ldr	r5, [pc, #40]	; (801e8 <_read+0x3c>)
   801c0:	6830      	ldr	r0, [r6, #0]
   801c2:	4621      	mov	r1, r4
   801c4:	682b      	ldr	r3, [r5, #0]
   801c6:	4798      	blx	r3
		ptr++;
   801c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801ca:	42bc      	cmp	r4, r7
   801cc:	d1f8      	bne.n	801c0 <_read+0x14>
   801ce:	e006      	b.n	801de <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801d0:	f04f 30ff 	mov.w	r0, #4294967295
   801d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   801d8:	2000      	movs	r0, #0
   801da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801de:	4640      	mov	r0, r8
	}
	return nChars;
}
   801e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e4:	20070a6c 	.word	0x20070a6c
   801e8:	20070a64 	.word	0x20070a64

000801ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801f0:	460e      	mov	r6, r1
   801f2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f4:	3801      	subs	r0, #1
   801f6:	2802      	cmp	r0, #2
   801f8:	d80f      	bhi.n	8021a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   801fa:	b192      	cbz	r2, 80222 <_write+0x36>
   801fc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801fe:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8023c <_write+0x50>
   80202:	4f0d      	ldr	r7, [pc, #52]	; (80238 <_write+0x4c>)
   80204:	f8d8 0000 	ldr.w	r0, [r8]
   80208:	5d31      	ldrb	r1, [r6, r4]
   8020a:	683b      	ldr	r3, [r7, #0]
   8020c:	4798      	blx	r3
   8020e:	2800      	cmp	r0, #0
   80210:	db0a      	blt.n	80228 <_write+0x3c>
			return -1;
		}
		++nChars;
   80212:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80214:	42a5      	cmp	r5, r4
   80216:	d1f5      	bne.n	80204 <_write+0x18>
   80218:	e00a      	b.n	80230 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8021a:	f04f 30ff 	mov.w	r0, #4294967295
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80222:	2000      	movs	r0, #0
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
   8022c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80230:	4620      	mov	r0, r4
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a68 	.word	0x20070a68
   8023c:	20070a6c 	.word	0x20070a6c

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b0f      	ldr	r3, [pc, #60]	; (80284 <board_init+0x44>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c0e      	ldr	r4, [pc, #56]	; (80288 <board_init+0x48>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c0a      	ldr	r4, [pc, #40]	; (8028c <board_init+0x4c>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	4905      	ldr	r1, [pc, #20]	; (80290 <board_init+0x50>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	4905      	ldr	r1, [pc, #20]	; (80294 <board_init+0x54>)
   80280:	47a0      	blx	r4
   80282:	bd10      	pop	{r4, pc}
   80284:	400e1a50 	.word	0x400e1a50
   80288:	00080589 	.word	0x00080589
   8028c:	00080325 	.word	0x00080325
   80290:	28000079 	.word	0x28000079
   80294:	28000001 	.word	0x28000001

00080298 <pio_set_peripheral>:
const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80298:	6442      	str	r2, [r0, #68]	; 0x44

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8029a:	6042      	str	r2, [r0, #4]
		case PIO_OUTPUT_1:
		case PIO_NOT_A_PIN:
		return;
	}
	#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8029c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802a0:	d003      	beq.n	802aa <pio_set_peripheral+0x12>
   802a2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802a6:	d007      	beq.n	802b8 <pio_set_peripheral+0x20>
   802a8:	4770      	bx	lr
		case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802ac:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802ae:	400b      	ands	r3, r1
   802b0:	ea23 0202 	bic.w	r2, r3, r2
   802b4:	6702      	str	r2, [r0, #112]	; 0x70
		break;
   802b6:	4770      	bx	lr

		case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802ba:	431a      	orrs	r2, r3
   802bc:	6702      	str	r2, [r0, #112]	; 0x70
   802be:	4770      	bx	lr

000802c0 <pio_set_input>:
* \param p_pio Pointer to a PIO instance.
* \param ul_mask Interrupt sources bit map.
*/
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802c0:	6441      	str	r1, [r0, #68]	; 0x44
*/
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802c2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   802c6:	bf14      	ite	ne
   802c8:	6641      	strne	r1, [r0, #100]	; 0x64
		} else {
		p_pio->PIO_PUDR = ul_mask;
   802ca:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   802cc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   802d0:	bf14      	ite	ne
   802d2:	6201      	strne	r1, [r0, #32]
		} else {
		p_pio->PIO_IFDR = ul_mask;
   802d4:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
	#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   802d6:	f012 0f02 	tst.w	r2, #2
   802da:	d002      	beq.n	802e2 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   802dc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   802e0:	e004      	b.n	802ec <pio_set_input+0x2c>
		} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   802e2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   802e6:	bf18      	it	ne
   802e8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	#else
	#error "Unsupported device"
	#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   802ec:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   802ee:	6001      	str	r1, [r0, #0]
   802f0:	4770      	bx	lr
   802f2:	bf00      	nop

000802f4 <pio_set_output>:
*/
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
const uint32_t ul_default_level,
const uint32_t ul_multidrive_enable,
const uint32_t ul_pull_up_enable)
{
   802f4:	b410      	push	{r4}
* \param p_pio Pointer to a PIO instance.
* \param ul_mask Interrupt sources bit map.
*/
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802f6:	6441      	str	r1, [r0, #68]	; 0x44
*/
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802f8:	9c01      	ldr	r4, [sp, #4]
   802fa:	b10c      	cbz	r4, 80300 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   802fc:	6641      	str	r1, [r0, #100]	; 0x64
   802fe:	e000      	b.n	80302 <pio_set_output+0xe>
		} else {
		p_pio->PIO_PUDR = ul_mask;
   80300:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80302:	b10b      	cbz	r3, 80308 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80304:	6501      	str	r1, [r0, #80]	; 0x50
   80306:	e000      	b.n	8030a <pio_set_output+0x16>
		} else {
		p_pio->PIO_MDDR = ul_mask;
   80308:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8030a:	b10a      	cbz	r2, 80310 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8030c:	6301      	str	r1, [r0, #48]	; 0x30
   8030e:	e000      	b.n	80312 <pio_set_output+0x1e>
		} else {
		p_pio->PIO_CODR = ul_mask;
   80310:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80312:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80314:	6001      	str	r1, [r0, #0]
}
   80316:	f85d 4b04 	ldr.w	r4, [sp], #4
   8031a:	4770      	bx	lr

0008031c <pio_get_interrupt_status>:
*
* \return The interrupt status mask value.
*/
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8031c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8031e:	4770      	bx	lr

00080320 <pio_get_interrupt_mask>:
*
* \return The interrupt mask value.
*/
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80320:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80322:	4770      	bx	lr

00080324 <pio_configure_pin>:
* \param ul_flags Pins attributes.
*
* \return Whether the pin(s) have been configured properly.
*/
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80324:	b570      	push	{r4, r5, r6, lr}
   80326:	b082      	sub	sp, #8
   80328:	460d      	mov	r5, r1
			p_pio = PIOC;
			} else {
			p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
		}
		#else
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8032a:	0944      	lsrs	r4, r0, #5
   8032c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80330:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80334:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80336:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8033a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8033e:	d030      	beq.n	803a2 <pio_configure_pin+0x7e>
   80340:	d806      	bhi.n	80350 <pio_configure_pin+0x2c>
   80342:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80346:	d00a      	beq.n	8035e <pio_configure_pin+0x3a>
   80348:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8034c:	d018      	beq.n	80380 <pio_configure_pin+0x5c>
   8034e:	e049      	b.n	803e4 <pio_configure_pin+0xc0>
   80350:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80354:	d030      	beq.n	803b8 <pio_configure_pin+0x94>
   80356:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8035a:	d02d      	beq.n	803b8 <pio_configure_pin+0x94>
   8035c:	e042      	b.n	803e4 <pio_configure_pin+0xc0>
		case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8035e:	f000 001f 	and.w	r0, r0, #31
   80362:	2401      	movs	r4, #1
   80364:	4084      	lsls	r4, r0
   80366:	4630      	mov	r0, r6
   80368:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8036c:	4622      	mov	r2, r4
   8036e:	4b1f      	ldr	r3, [pc, #124]	; (803ec <pio_configure_pin+0xc8>)
   80370:	4798      	blx	r3
*/
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80372:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80376:	bf14      	ite	ne
   80378:	6674      	strne	r4, [r6, #100]	; 0x64
		} else {
		p_pio->PIO_PUDR = ul_mask;
   8037a:	6634      	streq	r4, [r6, #96]	; 0x60

		default:
		return 0;
	}

	return 1;
   8037c:	2001      	movs	r0, #1
   8037e:	e032      	b.n	803e6 <pio_configure_pin+0xc2>
		case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)), (ul_flags & PIO_PULLUP));
		break;
		case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80380:	f000 001f 	and.w	r0, r0, #31
   80384:	2401      	movs	r4, #1
   80386:	4084      	lsls	r4, r0
   80388:	4630      	mov	r0, r6
   8038a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8038e:	4622      	mov	r2, r4
   80390:	4b16      	ldr	r3, [pc, #88]	; (803ec <pio_configure_pin+0xc8>)
   80392:	4798      	blx	r3
*/
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80394:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80398:	bf14      	ite	ne
   8039a:	6674      	strne	r4, [r6, #100]	; 0x64
		} else {
		p_pio->PIO_PUDR = ul_mask;
   8039c:	6634      	streq	r4, [r6, #96]	; 0x60

		default:
		return 0;
	}

	return 1;
   8039e:	2001      	movs	r0, #1
   803a0:	e021      	b.n	803e6 <pio_configure_pin+0xc2>
		(ul_flags & PIO_PULLUP));
		break;
		#endif

		case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803a2:	f000 011f 	and.w	r1, r0, #31
   803a6:	2401      	movs	r4, #1
   803a8:	4630      	mov	r0, r6
   803aa:	fa04 f101 	lsl.w	r1, r4, r1
   803ae:	462a      	mov	r2, r5
   803b0:	4b0f      	ldr	r3, [pc, #60]	; (803f0 <pio_configure_pin+0xcc>)
   803b2:	4798      	blx	r3

		default:
		return 0;
	}

	return 1;
   803b4:	4620      	mov	r0, r4
		break;
		#endif

		case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803b6:	e016      	b.n	803e6 <pio_configure_pin+0xc2>

		case PIO_TYPE_PIO_OUTPUT_0:
		case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)), ((ul_flags & PIO_TYPE_PIO_OUTPUT_1) == PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
   803b8:	f000 011f 	and.w	r1, r0, #31
   803bc:	2401      	movs	r4, #1
   803be:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   803c2:	ea05 0304 	and.w	r3, r5, r4
   803c6:	9300      	str	r3, [sp, #0]
   803c8:	4630      	mov	r0, r6
   803ca:	fa04 f101 	lsl.w	r1, r4, r1
   803ce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   803d2:	bf14      	ite	ne
   803d4:	2200      	movne	r2, #0
   803d6:	2201      	moveq	r2, #1
   803d8:	f3c5 0380 	ubfx	r3, r5, #2, #1
   803dc:	4d05      	ldr	r5, [pc, #20]	; (803f4 <pio_configure_pin+0xd0>)
   803de:	47a8      	blx	r5

		default:
		return 0;
	}

	return 1;
   803e0:	4620      	mov	r0, r4
		case PIO_TYPE_PIO_OUTPUT_0:
		case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)), ((ul_flags & PIO_TYPE_PIO_OUTPUT_1) == PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
		(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
		(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   803e2:	e000      	b.n	803e6 <pio_configure_pin+0xc2>

		default:
		return 0;
   803e4:	2000      	movs	r0, #0
	}

	return 1;
}
   803e6:	b002      	add	sp, #8
   803e8:	bd70      	pop	{r4, r5, r6, pc}
   803ea:	bf00      	nop
   803ec:	00080299 	.word	0x00080299
   803f0:	000802c1 	.word	0x000802c1
   803f4:	000802f5 	.word	0x000802f5

000803f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   803f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803fc:	4604      	mov	r4, r0
   803fe:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80400:	4b10      	ldr	r3, [pc, #64]	; (80444 <pio_handler_process+0x4c>)
   80402:	4798      	blx	r3
   80404:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80406:	4620      	mov	r0, r4
   80408:	4b0f      	ldr	r3, [pc, #60]	; (80448 <pio_handler_process+0x50>)
   8040a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8040c:	4005      	ands	r5, r0
   8040e:	d017      	beq.n	80440 <pio_handler_process+0x48>
   80410:	4f0e      	ldr	r7, [pc, #56]	; (8044c <pio_handler_process+0x54>)
   80412:	f107 040c 	add.w	r4, r7, #12
   80416:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80418:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8041c:	42b3      	cmp	r3, r6
   8041e:	d10a      	bne.n	80436 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80420:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80424:	4229      	tst	r1, r5
   80426:	d006      	beq.n	80436 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80428:	6823      	ldr	r3, [r4, #0]
   8042a:	4630      	mov	r0, r6
   8042c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8042e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80432:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80436:	42bc      	cmp	r4, r7
   80438:	d002      	beq.n	80440 <pio_handler_process+0x48>
   8043a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8043c:	2d00      	cmp	r5, #0
   8043e:	d1eb      	bne.n	80418 <pio_handler_process+0x20>
   80440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80444:	0008031d 	.word	0x0008031d
   80448:	00080321 	.word	0x00080321
   8044c:	200709b0 	.word	0x200709b0

00080450 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80450:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80452:	4802      	ldr	r0, [pc, #8]	; (8045c <PIOA_Handler+0xc>)
   80454:	210b      	movs	r1, #11
   80456:	4b02      	ldr	r3, [pc, #8]	; (80460 <PIOA_Handler+0x10>)
   80458:	4798      	blx	r3
   8045a:	bd08      	pop	{r3, pc}
   8045c:	400e0e00 	.word	0x400e0e00
   80460:	000803f9 	.word	0x000803f9

00080464 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80464:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80466:	4802      	ldr	r0, [pc, #8]	; (80470 <PIOB_Handler+0xc>)
   80468:	210c      	movs	r1, #12
   8046a:	4b02      	ldr	r3, [pc, #8]	; (80474 <PIOB_Handler+0x10>)
   8046c:	4798      	blx	r3
   8046e:	bd08      	pop	{r3, pc}
   80470:	400e1000 	.word	0x400e1000
   80474:	000803f9 	.word	0x000803f9

00080478 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80478:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8047a:	4802      	ldr	r0, [pc, #8]	; (80484 <PIOC_Handler+0xc>)
   8047c:	210d      	movs	r1, #13
   8047e:	4b02      	ldr	r3, [pc, #8]	; (80488 <PIOC_Handler+0x10>)
   80480:	4798      	blx	r3
   80482:	bd08      	pop	{r3, pc}
   80484:	400e1200 	.word	0x400e1200
   80488:	000803f9 	.word	0x000803f9

0008048c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8048c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8048e:	4802      	ldr	r0, [pc, #8]	; (80498 <PIOD_Handler+0xc>)
   80490:	210e      	movs	r1, #14
   80492:	4b02      	ldr	r3, [pc, #8]	; (8049c <PIOD_Handler+0x10>)
   80494:	4798      	blx	r3
   80496:	bd08      	pop	{r3, pc}
   80498:	400e1400 	.word	0x400e1400
   8049c:	000803f9 	.word	0x000803f9

000804a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   804a0:	4b17      	ldr	r3, [pc, #92]	; (80500 <pmc_switch_mck_to_pllack+0x60>)
   804a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   804a8:	4310      	orrs	r0, r2
   804aa:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ae:	f013 0f08 	tst.w	r3, #8
   804b2:	d109      	bne.n	804c8 <pmc_switch_mck_to_pllack+0x28>
   804b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804b8:	4911      	ldr	r1, [pc, #68]	; (80500 <pmc_switch_mck_to_pllack+0x60>)
   804ba:	e001      	b.n	804c0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   804bc:	3b01      	subs	r3, #1
   804be:	d019      	beq.n	804f4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804c0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   804c2:	f012 0f08 	tst.w	r2, #8
   804c6:	d0f9      	beq.n	804bc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   804c8:	4b0d      	ldr	r3, [pc, #52]	; (80500 <pmc_switch_mck_to_pllack+0x60>)
   804ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804cc:	f022 0203 	bic.w	r2, r2, #3
   804d0:	f042 0202 	orr.w	r2, r2, #2
   804d4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   804d8:	f010 0008 	ands.w	r0, r0, #8
   804dc:	d10c      	bne.n	804f8 <pmc_switch_mck_to_pllack+0x58>
   804de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   804e2:	4907      	ldr	r1, [pc, #28]	; (80500 <pmc_switch_mck_to_pllack+0x60>)
   804e4:	e001      	b.n	804ea <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   804e6:	3b01      	subs	r3, #1
   804e8:	d008      	beq.n	804fc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   804ec:	f012 0f08 	tst.w	r2, #8
   804f0:	d0f9      	beq.n	804e6 <pmc_switch_mck_to_pllack+0x46>
   804f2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   804f4:	2001      	movs	r0, #1
   804f6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   804f8:	2000      	movs	r0, #0
   804fa:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   804fc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   804fe:	4770      	bx	lr
   80500:	400e0600 	.word	0x400e0600

00080504 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80504:	b138      	cbz	r0, 80516 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80506:	4911      	ldr	r1, [pc, #68]	; (8054c <pmc_switch_mainck_to_xtal+0x48>)
   80508:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8050a:	4a11      	ldr	r2, [pc, #68]	; (80550 <pmc_switch_mainck_to_xtal+0x4c>)
   8050c:	401a      	ands	r2, r3
   8050e:	4b11      	ldr	r3, [pc, #68]	; (80554 <pmc_switch_mainck_to_xtal+0x50>)
   80510:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80512:	620b      	str	r3, [r1, #32]
   80514:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80516:	4a0d      	ldr	r2, [pc, #52]	; (8054c <pmc_switch_mainck_to_xtal+0x48>)
   80518:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8051a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8051e:	f023 0303 	bic.w	r3, r3, #3
   80522:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80526:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8052a:	0209      	lsls	r1, r1, #8
   8052c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8052e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80530:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80532:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80534:	f013 0f01 	tst.w	r3, #1
   80538:	d0fb      	beq.n	80532 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8053a:	4a04      	ldr	r2, [pc, #16]	; (8054c <pmc_switch_mainck_to_xtal+0x48>)
   8053c:	6a13      	ldr	r3, [r2, #32]
   8053e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80546:	6213      	str	r3, [r2, #32]
   80548:	4770      	bx	lr
   8054a:	bf00      	nop
   8054c:	400e0600 	.word	0x400e0600
   80550:	fec8fffc 	.word	0xfec8fffc
   80554:	01370002 	.word	0x01370002

00080558 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80558:	4b02      	ldr	r3, [pc, #8]	; (80564 <pmc_osc_is_ready_mainck+0xc>)
   8055a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8055c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80560:	4770      	bx	lr
   80562:	bf00      	nop
   80564:	400e0600 	.word	0x400e0600

00080568 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80568:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8056c:	4b01      	ldr	r3, [pc, #4]	; (80574 <pmc_disable_pllack+0xc>)
   8056e:	629a      	str	r2, [r3, #40]	; 0x28
   80570:	4770      	bx	lr
   80572:	bf00      	nop
   80574:	400e0600 	.word	0x400e0600

00080578 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80578:	4b02      	ldr	r3, [pc, #8]	; (80584 <pmc_is_locked_pllack+0xc>)
   8057a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8057c:	f000 0002 	and.w	r0, r0, #2
   80580:	4770      	bx	lr
   80582:	bf00      	nop
   80584:	400e0600 	.word	0x400e0600

00080588 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80588:	282c      	cmp	r0, #44	; 0x2c
   8058a:	d820      	bhi.n	805ce <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8058c:	281f      	cmp	r0, #31
   8058e:	d80d      	bhi.n	805ac <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80590:	4b12      	ldr	r3, [pc, #72]	; (805dc <pmc_enable_periph_clk+0x54>)
   80592:	699a      	ldr	r2, [r3, #24]
   80594:	2301      	movs	r3, #1
   80596:	4083      	lsls	r3, r0
   80598:	401a      	ands	r2, r3
   8059a:	4293      	cmp	r3, r2
   8059c:	d019      	beq.n	805d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8059e:	2301      	movs	r3, #1
   805a0:	fa03 f000 	lsl.w	r0, r3, r0
   805a4:	4b0d      	ldr	r3, [pc, #52]	; (805dc <pmc_enable_periph_clk+0x54>)
   805a6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   805a8:	2000      	movs	r0, #0
   805aa:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805ac:	4b0b      	ldr	r3, [pc, #44]	; (805dc <pmc_enable_periph_clk+0x54>)
   805ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   805b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805b4:	2301      	movs	r3, #1
   805b6:	4083      	lsls	r3, r0
   805b8:	401a      	ands	r2, r3
   805ba:	4293      	cmp	r3, r2
   805bc:	d00b      	beq.n	805d6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   805be:	2301      	movs	r3, #1
   805c0:	fa03 f000 	lsl.w	r0, r3, r0
   805c4:	4b05      	ldr	r3, [pc, #20]	; (805dc <pmc_enable_periph_clk+0x54>)
   805c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   805ca:	2000      	movs	r0, #0
   805cc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   805ce:	2001      	movs	r0, #1
   805d0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   805d2:	2000      	movs	r0, #0
   805d4:	4770      	bx	lr
   805d6:	2000      	movs	r0, #0
}
   805d8:	4770      	bx	lr
   805da:	bf00      	nop
   805dc:	400e0600 	.word	0x400e0600

000805e0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   805e0:	6943      	ldr	r3, [r0, #20]
   805e2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   805e6:	bf1a      	itte	ne
   805e8:	61c1      	strne	r1, [r0, #28]
	return 0;
   805ea:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   805ec:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   805ee:	4770      	bx	lr

000805f0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   805f0:	6943      	ldr	r3, [r0, #20]
   805f2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   805f6:	bf1d      	ittte	ne
   805f8:	6983      	ldrne	r3, [r0, #24]
   805fa:	700b      	strbne	r3, [r1, #0]
	return 0;
   805fc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   805fe:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80600:	4770      	bx	lr
   80602:	bf00      	nop

00080604 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80604:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80606:	010b      	lsls	r3, r1, #4
   80608:	4293      	cmp	r3, r2
   8060a:	d90d      	bls.n	80628 <usart_set_async_baudrate+0x24>
   8060c:	e01a      	b.n	80644 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   8060e:	6841      	ldr	r1, [r0, #4]
   80610:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80614:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80616:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8061a:	6203      	str	r3, [r0, #32]

	return 0;
   8061c:	2000      	movs	r0, #0
   8061e:	e020      	b.n	80662 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   80620:	2001      	movs	r0, #1
   80622:	e01e      	b.n	80662 <usart_set_async_baudrate+0x5e>
   80624:	2001      	movs	r0, #1
   80626:	e01c      	b.n	80662 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80628:	00d2      	lsls	r2, r2, #3
   8062a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   8062e:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   80632:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   80634:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80638:	1e54      	subs	r4, r2, #1
   8063a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8063e:	428c      	cmp	r4, r1
   80640:	d9e9      	bls.n	80616 <usart_set_async_baudrate+0x12>
   80642:	e7ed      	b.n	80620 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80644:	00c9      	lsls	r1, r1, #3
   80646:	00d3      	lsls	r3, r2, #3
   80648:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   8064c:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   80650:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   80652:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80656:	1e54      	subs	r4, r2, #1
   80658:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8065c:	428c      	cmp	r4, r1
   8065e:	d9d6      	bls.n	8060e <usart_set_async_baudrate+0xa>
   80660:	e7e0      	b.n	80624 <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   80662:	f85d 4b04 	ldr.w	r4, [sp], #4
   80666:	4770      	bx	lr

00080668 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80668:	4b08      	ldr	r3, [pc, #32]	; (8068c <usart_reset+0x24>)
   8066a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8066e:	2300      	movs	r3, #0
   80670:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80672:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80674:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80676:	2388      	movs	r3, #136	; 0x88
   80678:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8067a:	2324      	movs	r3, #36	; 0x24
   8067c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   8067e:	f44f 7380 	mov.w	r3, #256	; 0x100
   80682:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   80684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80688:	6003      	str	r3, [r0, #0]
   8068a:	4770      	bx	lr
   8068c:	55534100 	.word	0x55534100

00080690 <usart_init_rs232>:
 * \retval 1 on failure.
 */

uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80690:	b570      	push	{r4, r5, r6, lr}
   80692:	4605      	mov	r5, r0
   80694:	460c      	mov	r4, r1
   80696:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   80698:	4b0f      	ldr	r3, [pc, #60]	; (806d8 <usart_init_rs232+0x48>)
   8069a:	4798      	blx	r3

	ul_reg_val = 0;
   8069c:	2100      	movs	r1, #0
   8069e:	4b0f      	ldr	r3, [pc, #60]	; (806dc <usart_init_rs232+0x4c>)
   806a0:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   806a2:	b19c      	cbz	r4, 806cc <usart_init_rs232+0x3c>
   806a4:	4628      	mov	r0, r5
   806a6:	6821      	ldr	r1, [r4, #0]
   806a8:	4632      	mov	r2, r6
   806aa:	4b0d      	ldr	r3, [pc, #52]	; (806e0 <usart_init_rs232+0x50>)
   806ac:	4798      	blx	r3
   806ae:	4603      	mov	r3, r0
   806b0:	b970      	cbnz	r0, 806d0 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   806b2:	68a1      	ldr	r1, [r4, #8]
   806b4:	6862      	ldr	r2, [r4, #4]
   806b6:	430a      	orrs	r2, r1
   806b8:	6921      	ldr	r1, [r4, #16]
   806ba:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   806bc:	68e0      	ldr	r0, [r4, #12]
   806be:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   806c0:	4906      	ldr	r1, [pc, #24]	; (806dc <usart_init_rs232+0x4c>)
   806c2:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   806c4:	6869      	ldr	r1, [r5, #4]
   806c6:	430a      	orrs	r2, r1
   806c8:	606a      	str	r2, [r5, #4]

	return 0;
   806ca:	e002      	b.n	806d2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   806cc:	2301      	movs	r3, #1
   806ce:	e000      	b.n	806d2 <usart_init_rs232+0x42>
   806d0:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   806d2:	4618      	mov	r0, r3
   806d4:	bd70      	pop	{r4, r5, r6, pc}
   806d6:	bf00      	nop
   806d8:	00080669 	.word	0x00080669
   806dc:	20070a20 	.word	0x20070a20
   806e0:	00080605 	.word	0x00080605

000806e4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   806e4:	2340      	movs	r3, #64	; 0x40
   806e6:	6003      	str	r3, [r0, #0]
   806e8:	4770      	bx	lr
   806ea:	bf00      	nop

000806ec <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   806ec:	2310      	movs	r3, #16
   806ee:	6003      	str	r3, [r0, #0]
   806f0:	4770      	bx	lr
   806f2:	bf00      	nop

000806f4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   806f4:	6943      	ldr	r3, [r0, #20]
   806f6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   806fa:	bf1d      	ittte	ne
   806fc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80700:	61c1      	strne	r1, [r0, #28]
	return 0;
   80702:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80704:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80706:	4770      	bx	lr

00080708 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80708:	6943      	ldr	r3, [r0, #20]
   8070a:	f013 0f01 	tst.w	r3, #1
   8070e:	d005      	beq.n	8071c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80710:	6983      	ldr	r3, [r0, #24]
   80712:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80716:	600b      	str	r3, [r1, #0]

	return 0;
   80718:	2000      	movs	r0, #0
   8071a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8071c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8071e:	4770      	bx	lr

00080720 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80720:	e7fe      	b.n	80720 <Dummy_Handler>
   80722:	bf00      	nop

00080724 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80724:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80726:	4b1e      	ldr	r3, [pc, #120]	; (807a0 <Reset_Handler+0x7c>)
   80728:	4a1e      	ldr	r2, [pc, #120]	; (807a4 <Reset_Handler+0x80>)
   8072a:	429a      	cmp	r2, r3
   8072c:	d003      	beq.n	80736 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8072e:	4b1e      	ldr	r3, [pc, #120]	; (807a8 <Reset_Handler+0x84>)
   80730:	4a1b      	ldr	r2, [pc, #108]	; (807a0 <Reset_Handler+0x7c>)
   80732:	429a      	cmp	r2, r3
   80734:	d304      	bcc.n	80740 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80736:	4b1d      	ldr	r3, [pc, #116]	; (807ac <Reset_Handler+0x88>)
   80738:	4a1d      	ldr	r2, [pc, #116]	; (807b0 <Reset_Handler+0x8c>)
   8073a:	429a      	cmp	r2, r3
   8073c:	d30f      	bcc.n	8075e <Reset_Handler+0x3a>
   8073e:	e01a      	b.n	80776 <Reset_Handler+0x52>
   80740:	4b1c      	ldr	r3, [pc, #112]	; (807b4 <Reset_Handler+0x90>)
   80742:	4c1d      	ldr	r4, [pc, #116]	; (807b8 <Reset_Handler+0x94>)
   80744:	1ae4      	subs	r4, r4, r3
   80746:	f024 0403 	bic.w	r4, r4, #3
   8074a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8074c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8074e:	4814      	ldr	r0, [pc, #80]	; (807a0 <Reset_Handler+0x7c>)
   80750:	4914      	ldr	r1, [pc, #80]	; (807a4 <Reset_Handler+0x80>)
   80752:	585a      	ldr	r2, [r3, r1]
   80754:	501a      	str	r2, [r3, r0]
   80756:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80758:	42a3      	cmp	r3, r4
   8075a:	d1fa      	bne.n	80752 <Reset_Handler+0x2e>
   8075c:	e7eb      	b.n	80736 <Reset_Handler+0x12>
   8075e:	4b17      	ldr	r3, [pc, #92]	; (807bc <Reset_Handler+0x98>)
   80760:	4917      	ldr	r1, [pc, #92]	; (807c0 <Reset_Handler+0x9c>)
   80762:	1ac9      	subs	r1, r1, r3
   80764:	f021 0103 	bic.w	r1, r1, #3
   80768:	1d1a      	adds	r2, r3, #4
   8076a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8076c:	2200      	movs	r2, #0
   8076e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80772:	428b      	cmp	r3, r1
   80774:	d1fb      	bne.n	8076e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80776:	4a13      	ldr	r2, [pc, #76]	; (807c4 <Reset_Handler+0xa0>)
   80778:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8077c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80780:	4911      	ldr	r1, [pc, #68]	; (807c8 <Reset_Handler+0xa4>)
   80782:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80784:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80788:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8078c:	d203      	bcs.n	80796 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8078e:	688a      	ldr	r2, [r1, #8]
   80790:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80794:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80796:	4b0d      	ldr	r3, [pc, #52]	; (807cc <Reset_Handler+0xa8>)
   80798:	4798      	blx	r3

	/* Branch to main function */
	main();
   8079a:	4b0d      	ldr	r3, [pc, #52]	; (807d0 <Reset_Handler+0xac>)
   8079c:	4798      	blx	r3
   8079e:	e7fe      	b.n	8079e <Reset_Handler+0x7a>
   807a0:	20070000 	.word	0x20070000
   807a4:	00084468 	.word	0x00084468
   807a8:	20070994 	.word	0x20070994
   807ac:	20070a74 	.word	0x20070a74
   807b0:	20070994 	.word	0x20070994
   807b4:	20070004 	.word	0x20070004
   807b8:	20070997 	.word	0x20070997
   807bc:	20070990 	.word	0x20070990
   807c0:	20070a6f 	.word	0x20070a6f
   807c4:	00080000 	.word	0x00080000
   807c8:	e000ed00 	.word	0xe000ed00
   807cc:	00080fc9 	.word	0x00080fc9
   807d0:	00080f51 	.word	0x00080f51

000807d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   807d4:	4b3e      	ldr	r3, [pc, #248]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   807d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807d8:	f003 0303 	and.w	r3, r3, #3
   807dc:	2b03      	cmp	r3, #3
   807de:	d85f      	bhi.n	808a0 <SystemCoreClockUpdate+0xcc>
   807e0:	e8df f003 	tbb	[pc, r3]
   807e4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   807e8:	4b3a      	ldr	r3, [pc, #232]	; (808d4 <SystemCoreClockUpdate+0x100>)
   807ea:	695b      	ldr	r3, [r3, #20]
   807ec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   807f0:	bf14      	ite	ne
   807f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   807f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   807fa:	4b37      	ldr	r3, [pc, #220]	; (808d8 <SystemCoreClockUpdate+0x104>)
   807fc:	601a      	str	r2, [r3, #0]
   807fe:	e04f      	b.n	808a0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80800:	4b33      	ldr	r3, [pc, #204]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   80802:	6a1b      	ldr	r3, [r3, #32]
   80804:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80808:	d003      	beq.n	80812 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8080a:	4a34      	ldr	r2, [pc, #208]	; (808dc <SystemCoreClockUpdate+0x108>)
   8080c:	4b32      	ldr	r3, [pc, #200]	; (808d8 <SystemCoreClockUpdate+0x104>)
   8080e:	601a      	str	r2, [r3, #0]
   80810:	e046      	b.n	808a0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80812:	4a33      	ldr	r2, [pc, #204]	; (808e0 <SystemCoreClockUpdate+0x10c>)
   80814:	4b30      	ldr	r3, [pc, #192]	; (808d8 <SystemCoreClockUpdate+0x104>)
   80816:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80818:	4b2d      	ldr	r3, [pc, #180]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   8081a:	6a1b      	ldr	r3, [r3, #32]
   8081c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80820:	2b10      	cmp	r3, #16
   80822:	d002      	beq.n	8082a <SystemCoreClockUpdate+0x56>
   80824:	2b20      	cmp	r3, #32
   80826:	d004      	beq.n	80832 <SystemCoreClockUpdate+0x5e>
   80828:	e03a      	b.n	808a0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8082a:	4a2e      	ldr	r2, [pc, #184]	; (808e4 <SystemCoreClockUpdate+0x110>)
   8082c:	4b2a      	ldr	r3, [pc, #168]	; (808d8 <SystemCoreClockUpdate+0x104>)
   8082e:	601a      	str	r2, [r3, #0]
				break;
   80830:	e036      	b.n	808a0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80832:	4a2a      	ldr	r2, [pc, #168]	; (808dc <SystemCoreClockUpdate+0x108>)
   80834:	4b28      	ldr	r3, [pc, #160]	; (808d8 <SystemCoreClockUpdate+0x104>)
   80836:	601a      	str	r2, [r3, #0]
				break;
   80838:	e032      	b.n	808a0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8083a:	4b25      	ldr	r3, [pc, #148]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   8083c:	6a1b      	ldr	r3, [r3, #32]
   8083e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80842:	d003      	beq.n	8084c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80844:	4a25      	ldr	r2, [pc, #148]	; (808dc <SystemCoreClockUpdate+0x108>)
   80846:	4b24      	ldr	r3, [pc, #144]	; (808d8 <SystemCoreClockUpdate+0x104>)
   80848:	601a      	str	r2, [r3, #0]
   8084a:	e012      	b.n	80872 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8084c:	4a24      	ldr	r2, [pc, #144]	; (808e0 <SystemCoreClockUpdate+0x10c>)
   8084e:	4b22      	ldr	r3, [pc, #136]	; (808d8 <SystemCoreClockUpdate+0x104>)
   80850:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80852:	4b1f      	ldr	r3, [pc, #124]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   80854:	6a1b      	ldr	r3, [r3, #32]
   80856:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8085a:	2b10      	cmp	r3, #16
   8085c:	d002      	beq.n	80864 <SystemCoreClockUpdate+0x90>
   8085e:	2b20      	cmp	r3, #32
   80860:	d004      	beq.n	8086c <SystemCoreClockUpdate+0x98>
   80862:	e006      	b.n	80872 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80864:	4a1f      	ldr	r2, [pc, #124]	; (808e4 <SystemCoreClockUpdate+0x110>)
   80866:	4b1c      	ldr	r3, [pc, #112]	; (808d8 <SystemCoreClockUpdate+0x104>)
   80868:	601a      	str	r2, [r3, #0]
				break;
   8086a:	e002      	b.n	80872 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8086c:	4a1b      	ldr	r2, [pc, #108]	; (808dc <SystemCoreClockUpdate+0x108>)
   8086e:	4b1a      	ldr	r3, [pc, #104]	; (808d8 <SystemCoreClockUpdate+0x104>)
   80870:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80872:	4b17      	ldr	r3, [pc, #92]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   80874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80876:	f003 0303 	and.w	r3, r3, #3
   8087a:	2b02      	cmp	r3, #2
   8087c:	d10d      	bne.n	8089a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8087e:	4b14      	ldr	r3, [pc, #80]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   80880:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80882:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80884:	4b14      	ldr	r3, [pc, #80]	; (808d8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80886:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8088a:	681a      	ldr	r2, [r3, #0]
   8088c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80890:	b2c9      	uxtb	r1, r1
   80892:	fbb2 f2f1 	udiv	r2, r2, r1
   80896:	601a      	str	r2, [r3, #0]
   80898:	e002      	b.n	808a0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8089a:	4a13      	ldr	r2, [pc, #76]	; (808e8 <SystemCoreClockUpdate+0x114>)
   8089c:	4b0e      	ldr	r3, [pc, #56]	; (808d8 <SystemCoreClockUpdate+0x104>)
   8089e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808a0:	4b0b      	ldr	r3, [pc, #44]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   808a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808a8:	2b70      	cmp	r3, #112	; 0x70
   808aa:	d107      	bne.n	808bc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   808ac:	4b0a      	ldr	r3, [pc, #40]	; (808d8 <SystemCoreClockUpdate+0x104>)
   808ae:	681a      	ldr	r2, [r3, #0]
   808b0:	490e      	ldr	r1, [pc, #56]	; (808ec <SystemCoreClockUpdate+0x118>)
   808b2:	fba1 0202 	umull	r0, r2, r1, r2
   808b6:	0852      	lsrs	r2, r2, #1
   808b8:	601a      	str	r2, [r3, #0]
   808ba:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   808bc:	4b04      	ldr	r3, [pc, #16]	; (808d0 <SystemCoreClockUpdate+0xfc>)
   808be:	6b19      	ldr	r1, [r3, #48]	; 0x30
   808c0:	4b05      	ldr	r3, [pc, #20]	; (808d8 <SystemCoreClockUpdate+0x104>)
   808c2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   808c6:	681a      	ldr	r2, [r3, #0]
   808c8:	40ca      	lsrs	r2, r1
   808ca:	601a      	str	r2, [r3, #0]
   808cc:	4770      	bx	lr
   808ce:	bf00      	nop
   808d0:	400e0600 	.word	0x400e0600
   808d4:	400e1a10 	.word	0x400e1a10
   808d8:	2007012c 	.word	0x2007012c
   808dc:	00b71b00 	.word	0x00b71b00
   808e0:	003d0900 	.word	0x003d0900
   808e4:	007a1200 	.word	0x007a1200
   808e8:	0e4e1c00 	.word	0x0e4e1c00
   808ec:	aaaaaaab 	.word	0xaaaaaaab

000808f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   808f0:	4b09      	ldr	r3, [pc, #36]	; (80918 <_sbrk+0x28>)
   808f2:	681b      	ldr	r3, [r3, #0]
   808f4:	b913      	cbnz	r3, 808fc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   808f6:	4a09      	ldr	r2, [pc, #36]	; (8091c <_sbrk+0x2c>)
   808f8:	4b07      	ldr	r3, [pc, #28]	; (80918 <_sbrk+0x28>)
   808fa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   808fc:	4b06      	ldr	r3, [pc, #24]	; (80918 <_sbrk+0x28>)
   808fe:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80900:	181a      	adds	r2, r3, r0
   80902:	4907      	ldr	r1, [pc, #28]	; (80920 <_sbrk+0x30>)
   80904:	4291      	cmp	r1, r2
   80906:	db04      	blt.n	80912 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80908:	4610      	mov	r0, r2
   8090a:	4a03      	ldr	r2, [pc, #12]	; (80918 <_sbrk+0x28>)
   8090c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8090e:	4618      	mov	r0, r3
   80910:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80912:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80916:	4770      	bx	lr
   80918:	20070a24 	.word	0x20070a24
   8091c:	20072a78 	.word	0x20072a78
   80920:	20087ffc 	.word	0x20087ffc

00080924 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80924:	f04f 30ff 	mov.w	r0, #4294967295
   80928:	4770      	bx	lr
   8092a:	bf00      	nop

0008092c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80930:	604b      	str	r3, [r1, #4]

	return 0;
}
   80932:	2000      	movs	r0, #0
   80934:	4770      	bx	lr
   80936:	bf00      	nop

00080938 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80938:	2001      	movs	r0, #1
   8093a:	4770      	bx	lr

0008093c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8093c:	2000      	movs	r0, #0
   8093e:	4770      	bx	lr

00080940 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80940:	b5f0      	push	{r4, r5, r6, r7, lr}
   80942:	b083      	sub	sp, #12
   80944:	4604      	mov	r4, r0
   80946:	460d      	mov	r5, r1
	uint32_t val = 0;
   80948:	2300      	movs	r3, #0
   8094a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8094c:	4b1f      	ldr	r3, [pc, #124]	; (809cc <usart_serial_getchar+0x8c>)
   8094e:	4298      	cmp	r0, r3
   80950:	d107      	bne.n	80962 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80952:	461f      	mov	r7, r3
   80954:	4e1e      	ldr	r6, [pc, #120]	; (809d0 <usart_serial_getchar+0x90>)
   80956:	4638      	mov	r0, r7
   80958:	4629      	mov	r1, r5
   8095a:	47b0      	blx	r6
   8095c:	2800      	cmp	r0, #0
   8095e:	d1fa      	bne.n	80956 <usart_serial_getchar+0x16>
   80960:	e019      	b.n	80996 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80962:	4b1c      	ldr	r3, [pc, #112]	; (809d4 <usart_serial_getchar+0x94>)
   80964:	4298      	cmp	r0, r3
   80966:	d109      	bne.n	8097c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80968:	461f      	mov	r7, r3
   8096a:	4e1b      	ldr	r6, [pc, #108]	; (809d8 <usart_serial_getchar+0x98>)
   8096c:	4638      	mov	r0, r7
   8096e:	a901      	add	r1, sp, #4
   80970:	47b0      	blx	r6
   80972:	2800      	cmp	r0, #0
   80974:	d1fa      	bne.n	8096c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80976:	9b01      	ldr	r3, [sp, #4]
   80978:	702b      	strb	r3, [r5, #0]
   8097a:	e019      	b.n	809b0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8097c:	4b17      	ldr	r3, [pc, #92]	; (809dc <usart_serial_getchar+0x9c>)
   8097e:	4298      	cmp	r0, r3
   80980:	d109      	bne.n	80996 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80982:	461e      	mov	r6, r3
   80984:	4c14      	ldr	r4, [pc, #80]	; (809d8 <usart_serial_getchar+0x98>)
   80986:	4630      	mov	r0, r6
   80988:	a901      	add	r1, sp, #4
   8098a:	47a0      	blx	r4
   8098c:	2800      	cmp	r0, #0
   8098e:	d1fa      	bne.n	80986 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80990:	9b01      	ldr	r3, [sp, #4]
   80992:	702b      	strb	r3, [r5, #0]
   80994:	e018      	b.n	809c8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80996:	4b12      	ldr	r3, [pc, #72]	; (809e0 <usart_serial_getchar+0xa0>)
   80998:	429c      	cmp	r4, r3
   8099a:	d109      	bne.n	809b0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   8099c:	461e      	mov	r6, r3
   8099e:	4c0e      	ldr	r4, [pc, #56]	; (809d8 <usart_serial_getchar+0x98>)
   809a0:	4630      	mov	r0, r6
   809a2:	a901      	add	r1, sp, #4
   809a4:	47a0      	blx	r4
   809a6:	2800      	cmp	r0, #0
   809a8:	d1fa      	bne.n	809a0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   809aa:	9b01      	ldr	r3, [sp, #4]
   809ac:	702b      	strb	r3, [r5, #0]
   809ae:	e00b      	b.n	809c8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   809b0:	4b0c      	ldr	r3, [pc, #48]	; (809e4 <usart_serial_getchar+0xa4>)
   809b2:	429c      	cmp	r4, r3
   809b4:	d108      	bne.n	809c8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   809b6:	461e      	mov	r6, r3
   809b8:	4c07      	ldr	r4, [pc, #28]	; (809d8 <usart_serial_getchar+0x98>)
   809ba:	4630      	mov	r0, r6
   809bc:	a901      	add	r1, sp, #4
   809be:	47a0      	blx	r4
   809c0:	2800      	cmp	r0, #0
   809c2:	d1fa      	bne.n	809ba <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   809c4:	9b01      	ldr	r3, [sp, #4]
   809c6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   809c8:	b003      	add	sp, #12
   809ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809cc:	400e0800 	.word	0x400e0800
   809d0:	000805f1 	.word	0x000805f1
   809d4:	40098000 	.word	0x40098000
   809d8:	00080709 	.word	0x00080709
   809dc:	4009c000 	.word	0x4009c000
   809e0:	400a0000 	.word	0x400a0000
   809e4:	400a4000 	.word	0x400a4000

000809e8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   809e8:	b570      	push	{r4, r5, r6, lr}
   809ea:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   809ec:	4b21      	ldr	r3, [pc, #132]	; (80a74 <usart_serial_putchar+0x8c>)
   809ee:	4298      	cmp	r0, r3
   809f0:	d107      	bne.n	80a02 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   809f2:	461e      	mov	r6, r3
   809f4:	4d20      	ldr	r5, [pc, #128]	; (80a78 <usart_serial_putchar+0x90>)
   809f6:	4630      	mov	r0, r6
   809f8:	4621      	mov	r1, r4
   809fa:	47a8      	blx	r5
   809fc:	2800      	cmp	r0, #0
   809fe:	d1fa      	bne.n	809f6 <usart_serial_putchar+0xe>
   80a00:	e02b      	b.n	80a5a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80a02:	4b1e      	ldr	r3, [pc, #120]	; (80a7c <usart_serial_putchar+0x94>)
   80a04:	4298      	cmp	r0, r3
   80a06:	d107      	bne.n	80a18 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80a08:	461e      	mov	r6, r3
   80a0a:	4d1d      	ldr	r5, [pc, #116]	; (80a80 <usart_serial_putchar+0x98>)
   80a0c:	4630      	mov	r0, r6
   80a0e:	4621      	mov	r1, r4
   80a10:	47a8      	blx	r5
   80a12:	2800      	cmp	r0, #0
   80a14:	d1fa      	bne.n	80a0c <usart_serial_putchar+0x24>
   80a16:	e022      	b.n	80a5e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80a18:	4b1a      	ldr	r3, [pc, #104]	; (80a84 <usart_serial_putchar+0x9c>)
   80a1a:	4298      	cmp	r0, r3
   80a1c:	d107      	bne.n	80a2e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80a1e:	461e      	mov	r6, r3
   80a20:	4d17      	ldr	r5, [pc, #92]	; (80a80 <usart_serial_putchar+0x98>)
   80a22:	4630      	mov	r0, r6
   80a24:	4621      	mov	r1, r4
   80a26:	47a8      	blx	r5
   80a28:	2800      	cmp	r0, #0
   80a2a:	d1fa      	bne.n	80a22 <usart_serial_putchar+0x3a>
   80a2c:	e019      	b.n	80a62 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a2e:	4b16      	ldr	r3, [pc, #88]	; (80a88 <usart_serial_putchar+0xa0>)
   80a30:	4298      	cmp	r0, r3
   80a32:	d107      	bne.n	80a44 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80a34:	461e      	mov	r6, r3
   80a36:	4d12      	ldr	r5, [pc, #72]	; (80a80 <usart_serial_putchar+0x98>)
   80a38:	4630      	mov	r0, r6
   80a3a:	4621      	mov	r1, r4
   80a3c:	47a8      	blx	r5
   80a3e:	2800      	cmp	r0, #0
   80a40:	d1fa      	bne.n	80a38 <usart_serial_putchar+0x50>
   80a42:	e010      	b.n	80a66 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80a44:	4b11      	ldr	r3, [pc, #68]	; (80a8c <usart_serial_putchar+0xa4>)
   80a46:	4298      	cmp	r0, r3
   80a48:	d10f      	bne.n	80a6a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80a4a:	461e      	mov	r6, r3
   80a4c:	4d0c      	ldr	r5, [pc, #48]	; (80a80 <usart_serial_putchar+0x98>)
   80a4e:	4630      	mov	r0, r6
   80a50:	4621      	mov	r1, r4
   80a52:	47a8      	blx	r5
   80a54:	2800      	cmp	r0, #0
   80a56:	d1fa      	bne.n	80a4e <usart_serial_putchar+0x66>
   80a58:	e009      	b.n	80a6e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80a5a:	2001      	movs	r0, #1
   80a5c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80a5e:	2001      	movs	r0, #1
   80a60:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80a62:	2001      	movs	r0, #1
   80a64:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80a66:	2001      	movs	r0, #1
   80a68:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80a6a:	2000      	movs	r0, #0
   80a6c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80a6e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80a70:	bd70      	pop	{r4, r5, r6, pc}
   80a72:	bf00      	nop
   80a74:	400e0800 	.word	0x400e0800
   80a78:	000805e1 	.word	0x000805e1
   80a7c:	40098000 	.word	0x40098000
   80a80:	000806f5 	.word	0x000806f5
   80a84:	4009c000 	.word	0x4009c000
   80a88:	400a0000 	.word	0x400a0000
   80a8c:	400a4000 	.word	0x400a4000

00080a90 <TC8_Handler>:
    dac_write (0xFFF & sineLUT[sinelut_index], 0) ;
}

/* TC8 interrupt to update 1us counter timestamp*/
void TC8_Handler(void)
{
   80a90:	b082      	sub	sp, #8
    volatile uint32_t ul_status;
    TcChannel * tioa8 = &(TC2->TC_CHANNEL)[TIOA8];
    if ( (tioa8->TC_SR & TC_IER_ETRGS) == TC_IER_ETRGS) {
   80a92:	4b0b      	ldr	r3, [pc, #44]	; (80ac0 <TC8_Handler+0x30>)
   80a94:	6a1b      	ldr	r3, [r3, #32]
   80a96:	f013 0f80 	tst.w	r3, #128	; 0x80
   80a9a:	d007      	beq.n	80aac <TC8_Handler+0x1c>
        /* read status from TC8 status register to clear it and allow the interrupt to fire again */
        ul_status = tioa8->TC_SR;
   80a9c:	4b08      	ldr	r3, [pc, #32]	; (80ac0 <TC8_Handler+0x30>)
   80a9e:	6a1b      	ldr	r3, [r3, #32]
   80aa0:	9301      	str	r3, [sp, #4]
        (void) ul_status;
   80aa2:	9b01      	ldr	r3, [sp, #4]
        us_timestamp = 0;
   80aa4:	2200      	movs	r2, #0
   80aa6:	4b07      	ldr	r3, [pc, #28]	; (80ac4 <TC8_Handler+0x34>)
   80aa8:	601a      	str	r2, [r3, #0]
   80aaa:	e007      	b.n	80abc <TC8_Handler+0x2c>
        } else {
        /* read status from TC8 status register to clear it and allow the interrupt to fire again */
        ul_status = tioa8->TC_SR;
   80aac:	4b04      	ldr	r3, [pc, #16]	; (80ac0 <TC8_Handler+0x30>)
   80aae:	6a1b      	ldr	r3, [r3, #32]
   80ab0:	9301      	str	r3, [sp, #4]
        (void) ul_status;
   80ab2:	9b01      	ldr	r3, [sp, #4]
        us_timestamp++;
   80ab4:	4b03      	ldr	r3, [pc, #12]	; (80ac4 <TC8_Handler+0x34>)
   80ab6:	681a      	ldr	r2, [r3, #0]
   80ab8:	3201      	adds	r2, #1
   80aba:	601a      	str	r2, [r3, #0]
    }
}
   80abc:	b002      	add	sp, #8
   80abe:	4770      	bx	lr
   80ac0:	40088080 	.word	0x40088080
   80ac4:	20070a2c 	.word	0x20070a2c

00080ac8 <ADC_Handler>:

void ADC_Handler(void) {
    int val = 0;
    if (ADC->ADC_ISR & ADC_ISR_EOC7)
   80ac8:	4b06      	ldr	r3, [pc, #24]	; (80ae4 <ADC_Handler+0x1c>)
   80aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80acc:	f013 0f80 	tst.w	r3, #128	; 0x80
   80ad0:	d006      	beq.n	80ae0 <ADC_Handler+0x18>
    {   
        PIOB->PIO_SODR = PIO_PB17;
   80ad2:	4b05      	ldr	r3, [pc, #20]	; (80ae8 <ADC_Handler+0x20>)
   80ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   80ad8:	631a      	str	r2, [r3, #48]	; 0x30
        val = ADC->ADC_CDR[7] ;   /* get conversion result */
   80ada:	4902      	ldr	r1, [pc, #8]	; (80ae4 <ADC_Handler+0x1c>)
   80adc:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
        //samples [sptr] = val ;        /* stick in circular buffer */
        //sptr = (sptr+1) & BUFMASK ;   /* move pointer */
        //dac_write (0xFFF & val, 1);  /* just to debug purposes, a 60Hz sinewave has to be seen here */
        PIOB->PIO_CODR = PIO_PB17;
   80ade:	635a      	str	r2, [r3, #52]	; 0x34
   80ae0:	4770      	bx	lr
   80ae2:	bf00      	nop
   80ae4:	400c0000 	.word	0x400c0000
   80ae8:	400e1000 	.word	0x400e1000

00080aec <usart3_setup>:
    }
}

/* Peripheral functions */

void usart3_setup(void) {
   80aec:	b570      	push	{r4, r5, r6, lr}
   80aee:	b086      	sub	sp, #24
    /* configure board GPIO to USART3 behaviour */
    gpio_configure_pin(PIN_USART3_TXD_IDX, PIN_USART3_TXD_FLAGS);
   80af0:	2064      	movs	r0, #100	; 0x64
   80af2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80af6:	4c1b      	ldr	r4, [pc, #108]	; (80b64 <usart3_setup+0x78>)
   80af8:	47a0      	blx	r4
    gpio_configure_pin(PIN_USART3_RXD_IDX, PIN_USART3_RXD_FLAGS);
   80afa:	2065      	movs	r0, #101	; 0x65
   80afc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b00:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80b02:	4d19      	ldr	r5, [pc, #100]	; (80b68 <usart3_setup+0x7c>)
   80b04:	4b19      	ldr	r3, [pc, #100]	; (80b6c <usart3_setup+0x80>)
   80b06:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80b08:	4a19      	ldr	r2, [pc, #100]	; (80b70 <usart3_setup+0x84>)
   80b0a:	4b1a      	ldr	r3, [pc, #104]	; (80b74 <usart3_setup+0x88>)
   80b0c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80b0e:	4a1a      	ldr	r2, [pc, #104]	; (80b78 <usart3_setup+0x8c>)
   80b10:	4b1a      	ldr	r3, [pc, #104]	; (80b7c <usart3_setup+0x90>)
   80b12:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   80b14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80b18:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
   80b1a:	23c0      	movs	r3, #192	; 0xc0
   80b1c:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
   80b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b22:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
   80b24:	2400      	movs	r4, #0
   80b26:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   80b28:	9404      	str	r4, [sp, #16]
   80b2a:	2014      	movs	r0, #20
   80b2c:	4b14      	ldr	r3, [pc, #80]	; (80b80 <usart3_setup+0x94>)
   80b2e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART3);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   80b30:	4628      	mov	r0, r5
   80b32:	4669      	mov	r1, sp
   80b34:	4a13      	ldr	r2, [pc, #76]	; (80b84 <usart3_setup+0x98>)
   80b36:	4b14      	ldr	r3, [pc, #80]	; (80b88 <usart3_setup+0x9c>)
   80b38:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   80b3a:	4628      	mov	r0, r5
   80b3c:	4b13      	ldr	r3, [pc, #76]	; (80b8c <usart3_setup+0xa0>)
   80b3e:	4798      	blx	r3
		usart_enable_rx(p_usart);
   80b40:	4628      	mov	r0, r5
   80b42:	4b13      	ldr	r3, [pc, #76]	; (80b90 <usart3_setup+0xa4>)
   80b44:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80b46:	4e13      	ldr	r6, [pc, #76]	; (80b94 <usart3_setup+0xa8>)
   80b48:	6833      	ldr	r3, [r6, #0]
   80b4a:	6898      	ldr	r0, [r3, #8]
   80b4c:	4621      	mov	r1, r4
   80b4e:	4d12      	ldr	r5, [pc, #72]	; (80b98 <usart3_setup+0xac>)
   80b50:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80b52:	6833      	ldr	r3, [r6, #0]
   80b54:	6858      	ldr	r0, [r3, #4]
   80b56:	4621      	mov	r1, r4
   80b58:	47a8      	blx	r5
    /* initalize USART3 as console to use printf and scanf */
    stdio_serial_init(USART_SERIAL, &usart_console_settings);
    printf("USART3 ok\n\r");
   80b5a:	4810      	ldr	r0, [pc, #64]	; (80b9c <usart3_setup+0xb0>)
   80b5c:	4b10      	ldr	r3, [pc, #64]	; (80ba0 <usart3_setup+0xb4>)
   80b5e:	4798      	blx	r3
}
   80b60:	b006      	add	sp, #24
   80b62:	bd70      	pop	{r4, r5, r6, pc}
   80b64:	00080325 	.word	0x00080325
   80b68:	400a4000 	.word	0x400a4000
   80b6c:	20070a6c 	.word	0x20070a6c
   80b70:	000809e9 	.word	0x000809e9
   80b74:	20070a68 	.word	0x20070a68
   80b78:	00080941 	.word	0x00080941
   80b7c:	20070a64 	.word	0x20070a64
   80b80:	00080589 	.word	0x00080589
   80b84:	0501bd00 	.word	0x0501bd00
   80b88:	00080691 	.word	0x00080691
   80b8c:	000806e5 	.word	0x000806e5
   80b90:	000806ed 	.word	0x000806ed
   80b94:	20070558 	.word	0x20070558
   80b98:	000810d5 	.word	0x000810d5
   80b9c:	0008435c 	.word	0x0008435c
   80ba0:	00081019 	.word	0x00081019

00080ba4 <tioa0_setup>:

/* adc trigger timer: 6kHz */
void tioa0_setup(void)
{
   80ba4:	b508      	push	{r3, lr}
    /* IO Configure to output waveform from TC0 channel 0 PB25 */
    //Disable Timer Counter 0 from PIO control
    PIOB->PIO_PDR |= PIO_PB25;
   80ba6:	4b19      	ldr	r3, [pc, #100]	; (80c0c <tioa0_setup+0x68>)
   80ba8:	685a      	ldr	r2, [r3, #4]
   80baa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80bae:	605a      	str	r2, [r3, #4]
    //Setup PB25 B peripheral: Timer Counter 0: channel 0
    PIOB->PIO_ABSR |= PIO_PB25;
   80bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bb2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80bb6:	671a      	str	r2, [r3, #112]	; 0x70
    //Disable interrupts on pin
    PIOB->PIO_IDR |= PIO_PB25 ;
   80bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80bba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80bbe:	645a      	str	r2, [r3, #68]	; 0x44
    // Set to output: Output Enable Register
    PIOB->PIO_OER |= PIO_PB25;
   80bc0:	691a      	ldr	r2, [r3, #16]
   80bc2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80bc6:	611a      	str	r2, [r3, #16]
    // Disable pull-up : Pull-up Disable Register
    PIOB->PIO_PUDR |= PIO_PB25;
   80bc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80bca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80bce:	661a      	str	r2, [r3, #96]	; 0x60
    
    // Enable TIOA0 clock
    PMC->PMC_PCER0 = 1 << ID_TC0;
   80bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80bd4:	f5a3 6320 	sub.w	r3, r3, #2560	; 0xa00
   80bd8:	611a      	str	r2, [r3, #16]

    // pointer to TC0 registers for its channel 0
    TcChannel * tioa0 = &(TC0->TC_CHANNEL)[TIOA0];
    
    //Disable de TC Write Protection to Register C
    TC0->TC_WPMR = 0x54494D;
   80bda:	4b0d      	ldr	r3, [pc, #52]	; (80c10 <tioa0_setup+0x6c>)
   80bdc:	4a0d      	ldr	r2, [pc, #52]	; (80c14 <tioa0_setup+0x70>)
   80bde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    //Disable module clock while configuring it
    tioa0->TC_CCR = TC_CCR_CLKDIS;
   80be2:	2202      	movs	r2, #2
   80be4:	601a      	str	r2, [r3, #0]
    //disable all interrupts
    tioa0->TC_IDR = 0xFF;
   80be6:	22ff      	movs	r2, #255	; 0xff
   80be8:	629a      	str	r2, [r3, #40]	; 0x28
    //clear pending interrupts
    tioa0->TC_SR;
   80bea:	6a1a      	ldr	r2, [r3, #32]
    
    // Set Mode
    tioa0->TC_CMR = TC_CMR_WAVE |    //Wave mode
   80bec:	f44f 22d8 	mov.w	r2, #442368	; 0x6c000
   80bf0:	605a      	str	r2, [r3, #4]
    TC_CMR_ACPA_CLEAR |             //RA Compare Effect on TIOA (Clear)
    TC_CMR_ACPC_SET |               //RC Compare Effect on TIOA (Set)
    TC_CMR_CPCTRG;                  //Compare RC Trigger: trigger when counter value matches the RC value
    
    // RC controls the timer counting RA controls duty cycle
    tioa0->TC_RA = TIOA0_TC_COUNTER/2; //50% duty cycle
   80bf2:	f640 52ac 	movw	r2, #3500	; 0xdac
   80bf6:	615a      	str	r2, [r3, #20]
    tioa0->TC_RC = TIOA0_TC_COUNTER;
   80bf8:	f641 3258 	movw	r2, #7000	; 0x1b58
   80bfc:	61da      	str	r2, [r3, #28]
    
    //Reset counter (SWTRG) and enable counter clock (CLKEN)
    tioa0->TC_CCR = (TC_CCR_CLKEN | TC_CCR_SWTRG);
   80bfe:	2205      	movs	r2, #5
   80c00:	601a      	str	r2, [r3, #0]
    tioa0->TC_IER = TC_IER_CPCS;
    // Configure and enable interrupt on RC compare
    NVIC_EnableIRQ((IRQn_Type) TC0_IRQn);
    #endif

    printf("TIOA0 ok\n\r");
   80c02:	4805      	ldr	r0, [pc, #20]	; (80c18 <tioa0_setup+0x74>)
   80c04:	4b05      	ldr	r3, [pc, #20]	; (80c1c <tioa0_setup+0x78>)
   80c06:	4798      	blx	r3
   80c08:	bd08      	pop	{r3, pc}
   80c0a:	bf00      	nop
   80c0c:	400e1000 	.word	0x400e1000
   80c10:	40080000 	.word	0x40080000
   80c14:	0054494d 	.word	0x0054494d
   80c18:	00084368 	.word	0x00084368
   80c1c:	00081019 	.word	0x00081019

00080c20 <tioa6_setup>:
}

/* dac sinewave trigger frequency: 15.360kHz (externally connected to DATRG) */
void tioa6_setup(void)
{
   80c20:	b508      	push	{r3, lr}
    /* IO Configure to output waveform from TC2 channel 6 Pc25 */
    //Disable Timer Counter 2 from PIO control
    PIOC->PIO_PDR |= PIO_PC25;
   80c22:	4b19      	ldr	r3, [pc, #100]	; (80c88 <tioa6_setup+0x68>)
   80c24:	685a      	ldr	r2, [r3, #4]
   80c26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c2a:	605a      	str	r2, [r3, #4]
    //Setup PC28 B peripheral: Timer Counter 2: channel 6
    PIOC->PIO_ABSR |= PIO_PC25;
   80c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c32:	671a      	str	r2, [r3, #112]	; 0x70
    //Disable interrupts on pin
    PIOC->PIO_IDR |= PIO_PC25 ;
   80c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80c36:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c3a:	645a      	str	r2, [r3, #68]	; 0x44
    // Set to output: Output Enable Register
    PIOC->PIO_OER |= PIO_PC25;
   80c3c:	691a      	ldr	r2, [r3, #16]
   80c3e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c42:	611a      	str	r2, [r3, #16]
    // Disable pull-up: Pull-up Disable Register
    PIOC->PIO_PUDR |= PIO_PC25;
   80c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80c46:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c4a:	661a      	str	r2, [r3, #96]	; 0x60
    
    // Enable TIOA6 clock
    PMC->PMC_PCER1 = 1 << (ID_TC6 - 32);
   80c4c:	2202      	movs	r2, #2
   80c4e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
   80c52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    // pointer to TC2 registers for its channel 0 TIOA6
    TcChannel * tioa6 = &(TC2->TC_CHANNEL)[TIOA6];
    
    //Disable de TC Write Protection to Register C
    TC2->TC_WPMR = 0x54494D;
   80c56:	4b0d      	ldr	r3, [pc, #52]	; (80c8c <tioa6_setup+0x6c>)
   80c58:	490d      	ldr	r1, [pc, #52]	; (80c90 <tioa6_setup+0x70>)
   80c5a:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
    //Disable module clock while configuring it
    tioa6->TC_CCR = TC_CCR_CLKDIS;
   80c5e:	601a      	str	r2, [r3, #0]
    //disable all interrupts
    tioa6->TC_IDR = 0xFF;
   80c60:	21ff      	movs	r1, #255	; 0xff
   80c62:	6299      	str	r1, [r3, #40]	; 0x28
    //clear pending interrupts
    tioa6->TC_SR;
   80c64:	6a19      	ldr	r1, [r3, #32]
    
    // Set Mode
    tioa6->TC_CMR = TC_CMR_WAVE |        //Wave mode
   80c66:	490b      	ldr	r1, [pc, #44]	; (80c94 <tioa6_setup+0x74>)
   80c68:	6059      	str	r1, [r3, #4]
    TC_CMR_ACPA_CLEAR |            //RA Compare Effect on TIOA (Clear)
    TC_CMR_ACPC_SET |            //RC Compare Effect on TIOA (Set)
    TC_CMR_CPCTRG;                  //Compare RC Trigger: trigger when counter value matches the RC value
    
    // RC controls the timer counting RA controls duty cycle
    tioa6->TC_RA = TIOA6_TC_COUNTER/2; //50% duty cycle
   80c6a:	2155      	movs	r1, #85	; 0x55
   80c6c:	6159      	str	r1, [r3, #20]
    tioa6->TC_RC = TIOA6_TC_COUNTER;
   80c6e:	21aa      	movs	r1, #170	; 0xaa
   80c70:	61d9      	str	r1, [r3, #28]
    
    //Reset counter (SWTRG) and enable counter clock (CLKEN)
    tioa6->TC_CCR = (TC_CCR_CLKEN | TC_CCR_SWTRG);
   80c72:	2105      	movs	r1, #5
   80c74:	6019      	str	r1, [r3, #0]

    #if 1
    // Enable interrupt on TC2
    tioa6->TC_IER = TC_IER_CPCS;
   80c76:	2110      	movs	r1, #16
   80c78:	6259      	str	r1, [r3, #36]	; 0x24

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c7a:	4b07      	ldr	r3, [pc, #28]	; (80c98 <tioa6_setup+0x78>)
   80c7c:	605a      	str	r2, [r3, #4]
    // Configure and enable interrupt on RC compare
    NVIC_EnableIRQ((IRQn_Type) TC6_IRQn);
    #endif

    printf("TIOA6 ok\n\r");
   80c7e:	4807      	ldr	r0, [pc, #28]	; (80c9c <tioa6_setup+0x7c>)
   80c80:	4b07      	ldr	r3, [pc, #28]	; (80ca0 <tioa6_setup+0x80>)
   80c82:	4798      	blx	r3
   80c84:	bd08      	pop	{r3, pc}
   80c86:	bf00      	nop
   80c88:	400e1200 	.word	0x400e1200
   80c8c:	40088000 	.word	0x40088000
   80c90:	0054494d 	.word	0x0054494d
   80c94:	0006c002 	.word	0x0006c002
   80c98:	e000e100 	.word	0xe000e100
   80c9c:	00084374 	.word	0x00084374
   80ca0:	00081019 	.word	0x00081019

00080ca4 <tioa7_setup>:
}

/* 100ms pps simulating timer */
void tioa7_setup(void)
{
   80ca4:	b508      	push	{r3, lr}
    /* IO Configure to output waveform from TC2 channel 7 Pc28 */
    //Disable Timer Counter 2 from PIO control
    PIOC->PIO_PDR |= PIO_PC28;
   80ca6:	4b19      	ldr	r3, [pc, #100]	; (80d0c <tioa7_setup+0x68>)
   80ca8:	685a      	ldr	r2, [r3, #4]
   80caa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cae:	605a      	str	r2, [r3, #4]
    //Setup PC28 B peripheral: Timer Counter 2: channel 7
    PIOC->PIO_ABSR |= PIO_PC28;
   80cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cb6:	671a      	str	r2, [r3, #112]	; 0x70
    //Disable interrupts on pin
    PIOC->PIO_IDR |= PIO_PC28 ;
   80cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80cba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cbe:	645a      	str	r2, [r3, #68]	; 0x44
    // Set to output: Output Enable Register
    PIOC->PIO_OER |= PIO_PC28;
   80cc0:	691a      	ldr	r2, [r3, #16]
   80cc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cc6:	611a      	str	r2, [r3, #16]
    // Disable pull-up: Pull-up Disable Register
    PIOC->PIO_PUDR |= PIO_PC28;
   80cc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80cca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cce:	661a      	str	r2, [r3, #96]	; 0x60
    
    // Enable TIOA7 clock
    PMC->PMC_PCER1 = 1 << (ID_TC7 - 32);
   80cd0:	2204      	movs	r2, #4
   80cd2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
   80cd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    // pointer to TC2 registers for its channel 1 TIOA7
    TcChannel * tioa7 = &(TC2->TC_CHANNEL)[TIOA7];
    
    //Disable de TC Write Protection to Register C
    TC2->TC_WPMR = 0x54494D;
   80cda:	4a0d      	ldr	r2, [pc, #52]	; (80d10 <tioa7_setup+0x6c>)
   80cdc:	4b0d      	ldr	r3, [pc, #52]	; (80d14 <tioa7_setup+0x70>)
   80cde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    //Disable module clock while configuring it
    tioa7->TC_CCR = TC_CCR_CLKDIS;
   80ce2:	3340      	adds	r3, #64	; 0x40
   80ce4:	2202      	movs	r2, #2
   80ce6:	601a      	str	r2, [r3, #0]
    //disable all interrupts
    tioa7->TC_IDR = 0xFF;
   80ce8:	22ff      	movs	r2, #255	; 0xff
   80cea:	629a      	str	r2, [r3, #40]	; 0x28
    //clear pending interrupts
    tioa7->TC_SR;
   80cec:	6a1a      	ldr	r2, [r3, #32]
    
    // Set Mode
    tioa7->TC_CMR = TC_CMR_WAVE |   //Wave mode
   80cee:	4a0a      	ldr	r2, [pc, #40]	; (80d18 <tioa7_setup+0x74>)
   80cf0:	605a      	str	r2, [r3, #4]
    TC_CMR_ACPA_CLEAR |             //RA Compare Effect on TIOA (Clear)
    TC_CMR_ACPC_SET |               //RC Compare Effect on TIOA (Set)
    TC_CMR_CPCTRG;                  //Compare RC Trigger: trigger when counter value matches the RC value
    
    // RC controls the timer counting RA controls duty cycle
    tioa7->TC_RA = TIOA7_TC_COUNTER/2; //50% duty cycle
   80cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80cf6:	615a      	str	r2, [r3, #20]
    tioa7->TC_RC = TIOA7_TC_COUNTER;
   80cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80cfc:	61da      	str	r2, [r3, #28]
    
    //Reset counter (SWTRG) and enable counter clock (CLKEN)
    tioa7->TC_CCR = (TC_CCR_CLKEN | TC_CCR_SWTRG);
   80cfe:	2205      	movs	r2, #5
   80d00:	601a      	str	r2, [r3, #0]
    tioa7->TC_IER = TC_IER_CPCS;
    // Configure and enable interrupt on RC compare
    NVIC_EnableIRQ((IRQn_Type) TC7_IRQn);
    #endif

    printf("TIOA7 ok\n\r");
   80d02:	4806      	ldr	r0, [pc, #24]	; (80d1c <tioa7_setup+0x78>)
   80d04:	4b06      	ldr	r3, [pc, #24]	; (80d20 <tioa7_setup+0x7c>)
   80d06:	4798      	blx	r3
   80d08:	bd08      	pop	{r3, pc}
   80d0a:	bf00      	nop
   80d0c:	400e1200 	.word	0x400e1200
   80d10:	0054494d 	.word	0x0054494d
   80d14:	40088000 	.word	0x40088000
   80d18:	0006c004 	.word	0x0006c004
   80d1c:	00084380 	.word	0x00084380
   80d20:	00081019 	.word	0x00081019

00080d24 <tioa8_setup>:
}

/*TIOA8: timestamp base 1us TIOB8: Trigged by pps to start the timestamp */
void tioa8_setup(void)
{
   80d24:	b508      	push	{r3, lr}
    /* IO Configure to output waveform from TC2 channel 2 TIOA8 */
    //Disable Timer Counter 2 from PIO control
    PIOD->PIO_PDR |= PIO_PD7;
   80d26:	4b22      	ldr	r3, [pc, #136]	; (80db0 <tioa8_setup+0x8c>)
   80d28:	685a      	ldr	r2, [r3, #4]
   80d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80d2e:	605a      	str	r2, [r3, #4]
    //Setup PD7 B peripheral: TIOA8
    PIOD->PIO_ABSR |= PIO_PD7;
   80d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80d36:	671a      	str	r2, [r3, #112]	; 0x70
    //Disable interrupts on pin
    PIOD->PIO_IDR |= PIO_PD7 ;
   80d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80d3e:	645a      	str	r2, [r3, #68]	; 0x44
    // Set to output: Output Enable Register
    PIOD->PIO_OER |= PIO_PD7;
   80d40:	691a      	ldr	r2, [r3, #16]
   80d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80d46:	611a      	str	r2, [r3, #16]
    // Disable pull-up : Pull-up Disable Register
    PIOD->PIO_PUDR |= PIO_PD7;
   80d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80d4e:	661a      	str	r2, [r3, #96]	; 0x60
    
    /* Configure TIOB8 as input */
    //Disable Timer Counter 2 from PIO control
    PIOD->PIO_PDR |= PIO_PD8;
   80d50:	685a      	ldr	r2, [r3, #4]
   80d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80d56:	605a      	str	r2, [r3, #4]
    //Setup PD8 B peripheral: TIOB8
    PIOD->PIO_ABSR |= PIO_PD8;
   80d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80d5e:	671a      	str	r2, [r3, #112]	; 0x70
    // Set to input: Output Disable Register
    PIOD->PIO_ODR |= PIO_PD8;
   80d60:	695a      	ldr	r2, [r3, #20]
   80d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80d66:	615a      	str	r2, [r3, #20]
    // Disable pull-up : Pull-up Disable Register
    PIOD->PIO_PUDR |= PIO_PD8;
   80d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80d6e:	661a      	str	r2, [r3, #96]	; 0x60
    
    // Enable TIOA8 clock
    PMC->PMC_PCER1 = 1 << (ID_TC8 - 32);
   80d70:	2208      	movs	r2, #8
   80d72:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
   80d76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    // pointer to TC2 registers for its channel 1 TIOA7
    TcChannel * tioa8 = &(TC2->TC_CHANNEL)[TIOA8];
    
    //Disable de TC Write Protection to Register C
    TC2->TC_WPMR = 0x54494D;
   80d7a:	490e      	ldr	r1, [pc, #56]	; (80db4 <tioa8_setup+0x90>)
   80d7c:	4b0e      	ldr	r3, [pc, #56]	; (80db8 <tioa8_setup+0x94>)
   80d7e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
    //Disable module clock while configuring it
    tioa8->TC_CCR = TC_CCR_CLKDIS;
   80d82:	3380      	adds	r3, #128	; 0x80
   80d84:	2102      	movs	r1, #2
   80d86:	6019      	str	r1, [r3, #0]
    //disable all interrupts
    tioa8->TC_IDR = 0xFF;
   80d88:	21ff      	movs	r1, #255	; 0xff
   80d8a:	6299      	str	r1, [r3, #40]	; 0x28
    //clear pending interrupts
    tioa8->TC_SR;
   80d8c:	6a19      	ldr	r1, [r3, #32]
    
    // Set Mode
    tioa8->TC_CMR = TC_CMR_WAVE | //Wave mode
   80d8e:	490b      	ldr	r1, [pc, #44]	; (80dbc <tioa8_setup+0x98>)
   80d90:	6059      	str	r1, [r3, #4]
    TC_CMR_EEVTEDG_RISING |       //Trigger happens on rising edge of input signal TIOB8
    TC_CMR_ENETRG |               //External event resets counter and start counter clock
    TC_CMR_CPCTRG;                //Compare RC Trigger: trigger when counter value matches the RC value
    
    // RC controls the timer counting RA controls duty cycle
    tioa8->TC_RA = TIOA8_TC_COUNTER/2; //50% duty cycle
   80d92:	2115      	movs	r1, #21
   80d94:	6159      	str	r1, [r3, #20]
    tioa8->TC_RC = TIOA8_TC_COUNTER;
   80d96:	212a      	movs	r1, #42	; 0x2a
   80d98:	61d9      	str	r1, [r3, #28]
    
    //Reset counter (SWTRG) and enable counter clock (CLKEN)
    tioa8->TC_CCR = (TC_CCR_CLKEN | TC_CCR_SWTRG);
   80d9a:	2105      	movs	r1, #5
   80d9c:	6019      	str	r1, [r3, #0]

    #if 1
    // Enable interrupt on TC2
    tioa8->TC_IER = TC_IER_CPCS | TC_IER_ETRGS;
   80d9e:	2190      	movs	r1, #144	; 0x90
   80da0:	6259      	str	r1, [r3, #36]	; 0x24
   80da2:	4b07      	ldr	r3, [pc, #28]	; (80dc0 <tioa8_setup+0x9c>)
   80da4:	605a      	str	r2, [r3, #4]
    // Configure and enable interrupt on RC compare
    NVIC_EnableIRQ((IRQn_Type) TC8_IRQn);
    #endif

    printf("TIOA8 ok\n\r");
   80da6:	4807      	ldr	r0, [pc, #28]	; (80dc4 <tioa8_setup+0xa0>)
   80da8:	4b07      	ldr	r3, [pc, #28]	; (80dc8 <tioa8_setup+0xa4>)
   80daa:	4798      	blx	r3
   80dac:	bd08      	pop	{r3, pc}
   80dae:	bf00      	nop
   80db0:	400e1400 	.word	0x400e1400
   80db4:	0054494d 	.word	0x0054494d
   80db8:	40088000 	.word	0x40088000
   80dbc:	0006d100 	.word	0x0006d100
   80dc0:	e000e100 	.word	0xe000e100
   80dc4:	0008438c 	.word	0x0008438c
   80dc8:	00081019 	.word	0x00081019

00080dcc <dac_setup>:
    rtc_set_hour_mode(RTC, 0);
    printf("RTC ok\n\r");
}

void dac_setup (void)
{
   80dcc:	b508      	push	{r3, lr}
    /* IO Configure to set DATRG as input */
    //Disable Timer Counter 2 from PIO control
    PIOA->PIO_PDR |= PIO_PA10;
   80dce:	4b12      	ldr	r3, [pc, #72]	; (80e18 <dac_setup+0x4c>)
   80dd0:	685a      	ldr	r2, [r3, #4]
   80dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80dd6:	605a      	str	r2, [r3, #4]
    //Setup PD8 B peripheral: DATRG
    PIOA->PIO_ABSR |= PIO_PA10;
   80dd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80dde:	671a      	str	r2, [r3, #112]	; 0x70
    // Set to input: Output Disable Register
    PIOA->PIO_ODR |= PIO_PA10;
   80de0:	695a      	ldr	r2, [r3, #20]
   80de2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80de6:	615a      	str	r2, [r3, #20]
    // Disable pull-up : Pull-up Disable Register
    PIOA->PIO_PUDR |= PIO_PA10;
   80de8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   80dee:	661a      	str	r2, [r3, #96]	; 0x60
    
    //DAC clock is 42MHz
    /* Note: DAC takes 25 clock cycles to sample: 25 * 23.81ns = 595.2ns */
    pmc_enable_periph_clk(ID_DACC); // start clocking DAC
   80df0:	2026      	movs	r0, #38	; 0x26
   80df2:	4b0a      	ldr	r3, [pc, #40]	; (80e1c <dac_setup+0x50>)
   80df4:	4798      	blx	r3
    DACC->DACC_WPMR = 0x444143;
   80df6:	4b0a      	ldr	r3, [pc, #40]	; (80e20 <dac_setup+0x54>)
   80df8:	4a0a      	ldr	r2, [pc, #40]	; (80e24 <dac_setup+0x58>)
   80dfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    DACC->DACC_CR = DACC_CR_SWRST;  // reset DAC
   80dfe:	2201      	movs	r2, #1
   80e00:	601a      	str	r2, [r3, #0]
    
    DACC->DACC_MR = DACC_MR_TRGEN_EN | DACC_MR_TRGSEL (0) |  // trigger 1 = TIO output of TC0-channel 0  //changed to zero to use an external clock as trigger, in order to avoid using an entire Timer Counter just for this
   80e02:	4a09      	ldr	r2, [pc, #36]	; (80e28 <dac_setup+0x5c>)
   80e04:	605a      	str	r2, [r3, #4]
    DACC_MR_USER_SEL_CHANNEL0 |  // select channel 0
    DACC_MR_REFRESH (0x01) |     //datasheet: refresh in every 24.38us (bit of a guess... I'm assuming refresh not needed at 48kHz) //example value: 0x0F
    DACC_MR_STARTUP_1536;        //24 = 1536 cycles which I think is in range 23..45us since DAC clock = 42MHz (typical value regarding datasheet)

    DACC->DACC_IDR = 0x0F ;          // no interrupts
   80e06:	220f      	movs	r2, #15
   80e08:	629a      	str	r2, [r3, #40]	; 0x28
    DACC->DACC_CHER = DACC_CHER_CH0 | DACC_CHER_CH1; // enable channel 0   
   80e0a:	2203      	movs	r2, #3
   80e0c:	611a      	str	r2, [r3, #16]
    printf("DAC ok\n\r");
   80e0e:	4807      	ldr	r0, [pc, #28]	; (80e2c <dac_setup+0x60>)
   80e10:	4b07      	ldr	r3, [pc, #28]	; (80e30 <dac_setup+0x64>)
   80e12:	4798      	blx	r3
   80e14:	bd08      	pop	{r3, pc}
   80e16:	bf00      	nop
   80e18:	400e0e00 	.word	0x400e0e00
   80e1c:	00080589 	.word	0x00080589
   80e20:	400c8000 	.word	0x400c8000
   80e24:	00444143 	.word	0x00444143
   80e28:	18000101 	.word	0x18000101
   80e2c:	000843a4 	.word	0x000843a4
   80e30:	00081019 	.word	0x00081019

00080e34 <dac_write>:
}

/*write value to DAC Data register*/
void dac_write (int val, int channel)
{
    if (channel == 0) {
   80e34:	b921      	cbnz	r1, 80e40 <dac_write+0xc>
        DACC->DACC_MR &= DACC_MR_USER_SEL_CHANNEL0;
   80e36:	4b07      	ldr	r3, [pc, #28]	; (80e54 <dac_write+0x20>)
   80e38:	685a      	ldr	r2, [r3, #4]
   80e3a:	2200      	movs	r2, #0
   80e3c:	605a      	str	r2, [r3, #4]
   80e3e:	e004      	b.n	80e4a <dac_write+0x16>
        } else {
        DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
   80e40:	4b04      	ldr	r3, [pc, #16]	; (80e54 <dac_write+0x20>)
   80e42:	685a      	ldr	r2, [r3, #4]
   80e44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80e48:	605a      	str	r2, [r3, #4]
    }
    DACC->DACC_CDR = val & 0xFFF;
   80e4a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   80e4e:	4b01      	ldr	r3, [pc, #4]	; (80e54 <dac_write+0x20>)
   80e50:	6218      	str	r0, [r3, #32]
   80e52:	4770      	bx	lr
   80e54:	400c8000 	.word	0x400c8000

00080e58 <TC6_Handler>:

/* Interrupt Handlers */

/* TC6 interrupt used to update LUT sinewave table index*/
void TC6_Handler(void)
{
   80e58:	b500      	push	{lr}
   80e5a:	b083      	sub	sp, #12
    volatile uint32_t ul_status;
    TcChannel * tioa6 = &(TC2->TC_CHANNEL)[TIOA6];
    /* read status from TC0 status register to clear it and allow the interrupt to fire again */
    ul_status = tioa6->TC_SR;
   80e5c:	4b0f      	ldr	r3, [pc, #60]	; (80e9c <TC6_Handler+0x44>)
   80e5e:	6a1b      	ldr	r3, [r3, #32]
   80e60:	9301      	str	r3, [sp, #4]
    (void) ul_status;
   80e62:	9b01      	ldr	r3, [sp, #4]
    
    sinelut_index++;
   80e64:	4b0e      	ldr	r3, [pc, #56]	; (80ea0 <TC6_Handler+0x48>)
   80e66:	681a      	ldr	r2, [r3, #0]
   80e68:	3201      	adds	r2, #1
   80e6a:	601a      	str	r2, [r3, #0]
    sinelut_index = sinelut_index & 0xff; /* limit index 0..255 (0xff) */
   80e6c:	681a      	ldr	r2, [r3, #0]
   80e6e:	b2d2      	uxtb	r2, r2
   80e70:	601a      	str	r2, [r3, #0]
    if( sinelut_index==0x100) /* 256 */
   80e72:	681b      	ldr	r3, [r3, #0]
   80e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80e78:	d102      	bne.n	80e80 <TC6_Handler+0x28>
    {
        sinelut_index=0;
   80e7a:	2200      	movs	r2, #0
   80e7c:	4b08      	ldr	r3, [pc, #32]	; (80ea0 <TC6_Handler+0x48>)
   80e7e:	601a      	str	r2, [r3, #0]
    }
    dac_write (0xFFF & sineLUT[sinelut_index], 0) ;
   80e80:	4b07      	ldr	r3, [pc, #28]	; (80ea0 <TC6_Handler+0x48>)
   80e82:	681a      	ldr	r2, [r3, #0]
   80e84:	4b07      	ldr	r3, [pc, #28]	; (80ea4 <TC6_Handler+0x4c>)
   80e86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   80e8a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   80e8e:	2100      	movs	r1, #0
   80e90:	4b05      	ldr	r3, [pc, #20]	; (80ea8 <TC6_Handler+0x50>)
   80e92:	4798      	blx	r3
}
   80e94:	b003      	add	sp, #12
   80e96:	f85d fb04 	ldr.w	pc, [sp], #4
   80e9a:	bf00      	nop
   80e9c:	40088000 	.word	0x40088000
   80ea0:	20070a28 	.word	0x20070a28
   80ea4:	00083f5c 	.word	0x00083f5c
   80ea8:	00080e35 	.word	0x00080e35

00080eac <adc_setup>:
        DACC->DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;
    }
    DACC->DACC_CDR = val & 0xFFF;
}

void adc_setup(void) {
   80eac:	b508      	push	{r3, lr}
    
    /* Configure ADC input to A0, Channel A7 : A16 */
    // Enable IO
    PIOA->PIO_PER |= PIO_PA16;
   80eae:	4b17      	ldr	r3, [pc, #92]	; (80f0c <adc_setup+0x60>)
   80eb0:	681a      	ldr	r2, [r3, #0]
   80eb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80eb6:	601a      	str	r2, [r3, #0]
    // Set to input : Output Disable Register
    PIOA->PIO_ODR |= PIO_PA16;
   80eb8:	695a      	ldr	r2, [r3, #20]
   80eba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80ebe:	615a      	str	r2, [r3, #20]
    // Disable pull-up
    PIOA->PIO_PUDR |= PIO_PA16;
   80ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80ec2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80ec6:	661a      	str	r2, [r3, #96]	; 0x60
    // Disable pull-up : Pull-up Disable Register
    PIOA->PIO_PUDR = PIO_PA11;
    #endif

    // Enable ADC clock
    PMC->PMC_PCER1 = 1 << (ID_ADC - 32); //register offset, necessary to PCER1 peripherals
   80ec8:	2220      	movs	r2, #32
   80eca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ece:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    
    //Disable ADC Write Protect Mode Register
    ADC->ADC_WPMR = 0x414443;
   80ed2:	4b0f      	ldr	r3, [pc, #60]	; (80f10 <adc_setup+0x64>)
   80ed4:	490f      	ldr	r1, [pc, #60]	; (80f14 <adc_setup+0x68>)
   80ed6:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
    
    //Disable interrupts
    ADC->ADC_IDR = 0xFFFFFFFF ;
   80eda:	f04f 31ff 	mov.w	r1, #4294967295
   80ede:	6299      	str	r1, [r3, #40]	; 0x28
    */
    
    /* Note: ADC takes 25 clock cycles to sample: 25 * 47.62ns = 1.19us*/
    /* Total sampling time counting TRANSFER AND TRACKING: 1.48us */
    /* ADC Sampling Rate: ~670ksps*/
    ADC->ADC_IER = 0x80;        //enable interrupt End-Of-Conversion on channel 7: Arduino Due PIN A0
   80ee0:	2180      	movs	r1, #128	; 0x80
   80ee2:	6259      	str	r1, [r3, #36]	; 0x24
    ADC->ADC_CHDR = 0xFFFF ;    // disable all channels
   80ee4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80ee8:	6158      	str	r0, [r3, #20]
    //Enable ADC channel 7, Arduino pin A0
    ADC->ADC_CHER = 0x80;
   80eea:	6119      	str	r1, [r3, #16]
    ADC->ADC_COR = 0x00000000 ;   // All offsets off
   80eec:	2100      	movs	r1, #0
   80eee:	64d9      	str	r1, [r3, #76]	; 0x4c
    //Reset ADC Mode Register
    ADC->ADC_MR = 0;
   80ef0:	6059      	str	r1, [r3, #4]
    //Configure ADC Mode Register: 21MHz ADC Normal mode
    ADC->ADC_MR = 0x10380103; //trigged by timer counter 0
   80ef2:	4909      	ldr	r1, [pc, #36]	; (80f18 <adc_setup+0x6c>)
   80ef4:	6059      	str	r1, [r3, #4]
    ADC->ADC_ACR = 0x100;     //Temperature sensor disable, IBCTL = 01
   80ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
   80efa:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
   80efe:	4b07      	ldr	r3, [pc, #28]	; (80f1c <adc_setup+0x70>)
   80f00:	605a      	str	r2, [r3, #4]

    // Configure and enable ADC interrupt
    NVIC_EnableIRQ((IRQn_Type) ADC_IRQn);
    printf("ADC ok\n\r");
   80f02:	4807      	ldr	r0, [pc, #28]	; (80f20 <adc_setup+0x74>)
   80f04:	4b07      	ldr	r3, [pc, #28]	; (80f24 <adc_setup+0x78>)
   80f06:	4798      	blx	r3
   80f08:	bd08      	pop	{r3, pc}
   80f0a:	bf00      	nop
   80f0c:	400e0e00 	.word	0x400e0e00
   80f10:	400c0000 	.word	0x400c0000
   80f14:	00414443 	.word	0x00414443
   80f18:	10380103 	.word	0x10380103
   80f1c:	e000e100 	.word	0xe000e100
   80f20:	000843b0 	.word	0x000843b0
   80f24:	00081019 	.word	0x00081019

00080f28 <debug>:
}

/* set io pins for debug timing*/
void debug(void) {
     /* IO Configure to output ADC interrupt timing */
     PIOB->PIO_PER |= PIO_PB17;
   80f28:	4b08      	ldr	r3, [pc, #32]	; (80f4c <debug+0x24>)
   80f2a:	681a      	ldr	r2, [r3, #0]
   80f2c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   80f30:	601a      	str	r2, [r3, #0]
     //Disable interrupts on pin
     PIOB->PIO_IDR |= PIO_PB17 ;
   80f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80f34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   80f38:	645a      	str	r2, [r3, #68]	; 0x44
     // Set to output: Output Enable Register
     PIOB->PIO_OER |= PIO_PB17;
   80f3a:	691a      	ldr	r2, [r3, #16]
   80f3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   80f40:	611a      	str	r2, [r3, #16]
     // Disable pull-up : Pull-up Disable Register
     PIOB->PIO_PUDR |= PIO_PB17;   
   80f42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80f44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   80f48:	661a      	str	r2, [r3, #96]	; 0x60
   80f4a:	4770      	bx	lr
   80f4c:	400e1000 	.word	0x400e1000

00080f50 <main>:
}

int main (void)
{
   80f50:	b570      	push	{r4, r5, r6, lr}
    sysclk_init();
   80f52:	4b0f      	ldr	r3, [pc, #60]	; (80f90 <main+0x40>)
   80f54:	4798      	blx	r3
    board_init();
   80f56:	4b0f      	ldr	r3, [pc, #60]	; (80f94 <main+0x44>)
   80f58:	4798      	blx	r3
    
    #if 1
    delay_init(sysclk_get_cpu_hz());
    #endif

    usart3_setup();
   80f5a:	4b0f      	ldr	r3, [pc, #60]	; (80f98 <main+0x48>)
   80f5c:	4798      	blx	r3
    dac_setup();
   80f5e:	4b0f      	ldr	r3, [pc, #60]	; (80f9c <main+0x4c>)
   80f60:	4798      	blx	r3
    tioa0_setup();
   80f62:	4b0f      	ldr	r3, [pc, #60]	; (80fa0 <main+0x50>)
   80f64:	4798      	blx	r3
    tioa7_setup();
   80f66:	4b0f      	ldr	r3, [pc, #60]	; (80fa4 <main+0x54>)
   80f68:	4798      	blx	r3
    tioa8_setup();
   80f6a:	4b0f      	ldr	r3, [pc, #60]	; (80fa8 <main+0x58>)
   80f6c:	4798      	blx	r3
    tioa6_setup();
   80f6e:	4b0f      	ldr	r3, [pc, #60]	; (80fac <main+0x5c>)
   80f70:	4798      	blx	r3
    adc_setup();
   80f72:	4b0f      	ldr	r3, [pc, #60]	; (80fb0 <main+0x60>)
   80f74:	4798      	blx	r3
    debug();
   80f76:	4b0f      	ldr	r3, [pc, #60]	; (80fb4 <main+0x64>)
   80f78:	4798      	blx	r3
    rtc_setup();
    rtc_set_date(RTC, 2015, 04, 15, 3);
    rtc_set_time(RTC, 17, 30, 55);
    #endif
    
    printf("perifericos ok\n\r");
   80f7a:	480f      	ldr	r0, [pc, #60]	; (80fb8 <main+0x68>)
   80f7c:	4b0f      	ldr	r3, [pc, #60]	; (80fbc <main+0x6c>)
   80f7e:	4798      	blx	r3
        rtc_get_date(RTC, rtcTime->year, rtcTime->month, rtcTime->day, rtcTime->week);
        printf("Horario atual: %ld/%ld/%ld - %ld:%ld:%ld\n\r", rtcTime->day, rtcTime->month, rtcTime->year, rtcTime->hour, rtcTime->minute, rtcTime->second);
        delay_ms(500);
        #endif
        //printf("TIOA8: CV: %ld\n\r", tioa8->TC_CV);
        printf("us Timestamp: %ld\n\r", us_timestamp);
   80f80:	4e0f      	ldr	r6, [pc, #60]	; (80fc0 <main+0x70>)
   80f82:	4d10      	ldr	r5, [pc, #64]	; (80fc4 <main+0x74>)
   80f84:	4c0d      	ldr	r4, [pc, #52]	; (80fbc <main+0x6c>)
   80f86:	6831      	ldr	r1, [r6, #0]
   80f88:	4628      	mov	r0, r5
   80f8a:	47a0      	blx	r4
   80f8c:	e7fb      	b.n	80f86 <main+0x36>
   80f8e:	bf00      	nop
   80f90:	00080149 	.word	0x00080149
   80f94:	00080241 	.word	0x00080241
   80f98:	00080aed 	.word	0x00080aed
   80f9c:	00080dcd 	.word	0x00080dcd
   80fa0:	00080ba5 	.word	0x00080ba5
   80fa4:	00080ca5 	.word	0x00080ca5
   80fa8:	00080d25 	.word	0x00080d25
   80fac:	00080c21 	.word	0x00080c21
   80fb0:	00080ead 	.word	0x00080ead
   80fb4:	00080f29 	.word	0x00080f29
   80fb8:	000843bc 	.word	0x000843bc
   80fbc:	00081019 	.word	0x00081019
   80fc0:	20070a2c 	.word	0x20070a2c
   80fc4:	000843d0 	.word	0x000843d0

00080fc8 <__libc_init_array>:
   80fc8:	b570      	push	{r4, r5, r6, lr}
   80fca:	4e0f      	ldr	r6, [pc, #60]	; (81008 <__libc_init_array+0x40>)
   80fcc:	4d0f      	ldr	r5, [pc, #60]	; (8100c <__libc_init_array+0x44>)
   80fce:	1b76      	subs	r6, r6, r5
   80fd0:	10b6      	asrs	r6, r6, #2
   80fd2:	d007      	beq.n	80fe4 <__libc_init_array+0x1c>
   80fd4:	3d04      	subs	r5, #4
   80fd6:	2400      	movs	r4, #0
   80fd8:	3401      	adds	r4, #1
   80fda:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80fde:	4798      	blx	r3
   80fe0:	42a6      	cmp	r6, r4
   80fe2:	d1f9      	bne.n	80fd8 <__libc_init_array+0x10>
   80fe4:	4e0a      	ldr	r6, [pc, #40]	; (81010 <__libc_init_array+0x48>)
   80fe6:	4d0b      	ldr	r5, [pc, #44]	; (81014 <__libc_init_array+0x4c>)
   80fe8:	f003 fa28 	bl	8443c <_init>
   80fec:	1b76      	subs	r6, r6, r5
   80fee:	10b6      	asrs	r6, r6, #2
   80ff0:	d008      	beq.n	81004 <__libc_init_array+0x3c>
   80ff2:	3d04      	subs	r5, #4
   80ff4:	2400      	movs	r4, #0
   80ff6:	3401      	adds	r4, #1
   80ff8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80ffc:	4798      	blx	r3
   80ffe:	42a6      	cmp	r6, r4
   81000:	d1f9      	bne.n	80ff6 <__libc_init_array+0x2e>
   81002:	bd70      	pop	{r4, r5, r6, pc}
   81004:	bd70      	pop	{r4, r5, r6, pc}
   81006:	bf00      	nop
   81008:	00084448 	.word	0x00084448
   8100c:	00084448 	.word	0x00084448
   81010:	00084450 	.word	0x00084450
   81014:	00084448 	.word	0x00084448

00081018 <iprintf>:
   81018:	b40f      	push	{r0, r1, r2, r3}
   8101a:	b510      	push	{r4, lr}
   8101c:	4b07      	ldr	r3, [pc, #28]	; (8103c <iprintf+0x24>)
   8101e:	b082      	sub	sp, #8
   81020:	ac04      	add	r4, sp, #16
   81022:	f854 2b04 	ldr.w	r2, [r4], #4
   81026:	6818      	ldr	r0, [r3, #0]
   81028:	4623      	mov	r3, r4
   8102a:	6881      	ldr	r1, [r0, #8]
   8102c:	9401      	str	r4, [sp, #4]
   8102e:	f000 f945 	bl	812bc <_vfiprintf_r>
   81032:	b002      	add	sp, #8
   81034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81038:	b004      	add	sp, #16
   8103a:	4770      	bx	lr
   8103c:	20070558 	.word	0x20070558

00081040 <memset>:
   81040:	b4f0      	push	{r4, r5, r6, r7}
   81042:	0784      	lsls	r4, r0, #30
   81044:	d043      	beq.n	810ce <memset+0x8e>
   81046:	1e54      	subs	r4, r2, #1
   81048:	2a00      	cmp	r2, #0
   8104a:	d03e      	beq.n	810ca <memset+0x8a>
   8104c:	b2cd      	uxtb	r5, r1
   8104e:	4603      	mov	r3, r0
   81050:	e003      	b.n	8105a <memset+0x1a>
   81052:	1e62      	subs	r2, r4, #1
   81054:	2c00      	cmp	r4, #0
   81056:	d038      	beq.n	810ca <memset+0x8a>
   81058:	4614      	mov	r4, r2
   8105a:	f803 5b01 	strb.w	r5, [r3], #1
   8105e:	079a      	lsls	r2, r3, #30
   81060:	d1f7      	bne.n	81052 <memset+0x12>
   81062:	2c03      	cmp	r4, #3
   81064:	d92a      	bls.n	810bc <memset+0x7c>
   81066:	b2cd      	uxtb	r5, r1
   81068:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8106c:	2c0f      	cmp	r4, #15
   8106e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81072:	d915      	bls.n	810a0 <memset+0x60>
   81074:	f1a4 0710 	sub.w	r7, r4, #16
   81078:	093f      	lsrs	r7, r7, #4
   8107a:	f103 0610 	add.w	r6, r3, #16
   8107e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81082:	461a      	mov	r2, r3
   81084:	6015      	str	r5, [r2, #0]
   81086:	6055      	str	r5, [r2, #4]
   81088:	6095      	str	r5, [r2, #8]
   8108a:	60d5      	str	r5, [r2, #12]
   8108c:	3210      	adds	r2, #16
   8108e:	42b2      	cmp	r2, r6
   81090:	d1f8      	bne.n	81084 <memset+0x44>
   81092:	f004 040f 	and.w	r4, r4, #15
   81096:	3701      	adds	r7, #1
   81098:	2c03      	cmp	r4, #3
   8109a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8109e:	d90d      	bls.n	810bc <memset+0x7c>
   810a0:	461e      	mov	r6, r3
   810a2:	4622      	mov	r2, r4
   810a4:	3a04      	subs	r2, #4
   810a6:	2a03      	cmp	r2, #3
   810a8:	f846 5b04 	str.w	r5, [r6], #4
   810ac:	d8fa      	bhi.n	810a4 <memset+0x64>
   810ae:	1f22      	subs	r2, r4, #4
   810b0:	f022 0203 	bic.w	r2, r2, #3
   810b4:	3204      	adds	r2, #4
   810b6:	4413      	add	r3, r2
   810b8:	f004 0403 	and.w	r4, r4, #3
   810bc:	b12c      	cbz	r4, 810ca <memset+0x8a>
   810be:	b2c9      	uxtb	r1, r1
   810c0:	441c      	add	r4, r3
   810c2:	f803 1b01 	strb.w	r1, [r3], #1
   810c6:	42a3      	cmp	r3, r4
   810c8:	d1fb      	bne.n	810c2 <memset+0x82>
   810ca:	bcf0      	pop	{r4, r5, r6, r7}
   810cc:	4770      	bx	lr
   810ce:	4614      	mov	r4, r2
   810d0:	4603      	mov	r3, r0
   810d2:	e7c6      	b.n	81062 <memset+0x22>

000810d4 <setbuf>:
   810d4:	2900      	cmp	r1, #0
   810d6:	bf0c      	ite	eq
   810d8:	2202      	moveq	r2, #2
   810da:	2200      	movne	r2, #0
   810dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   810e0:	f000 b800 	b.w	810e4 <setvbuf>

000810e4 <setvbuf>:
   810e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810e8:	4d3c      	ldr	r5, [pc, #240]	; (811dc <setvbuf+0xf8>)
   810ea:	4604      	mov	r4, r0
   810ec:	682d      	ldr	r5, [r5, #0]
   810ee:	4688      	mov	r8, r1
   810f0:	4616      	mov	r6, r2
   810f2:	461f      	mov	r7, r3
   810f4:	b115      	cbz	r5, 810fc <setvbuf+0x18>
   810f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810f8:	2b00      	cmp	r3, #0
   810fa:	d04f      	beq.n	8119c <setvbuf+0xb8>
   810fc:	2e02      	cmp	r6, #2
   810fe:	d830      	bhi.n	81162 <setvbuf+0x7e>
   81100:	2f00      	cmp	r7, #0
   81102:	db2e      	blt.n	81162 <setvbuf+0x7e>
   81104:	4628      	mov	r0, r5
   81106:	4621      	mov	r1, r4
   81108:	f001 f856 	bl	821b8 <_fflush_r>
   8110c:	89a3      	ldrh	r3, [r4, #12]
   8110e:	2200      	movs	r2, #0
   81110:	6062      	str	r2, [r4, #4]
   81112:	61a2      	str	r2, [r4, #24]
   81114:	061a      	lsls	r2, r3, #24
   81116:	d428      	bmi.n	8116a <setvbuf+0x86>
   81118:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8111c:	b29b      	uxth	r3, r3
   8111e:	2e02      	cmp	r6, #2
   81120:	81a3      	strh	r3, [r4, #12]
   81122:	d02d      	beq.n	81180 <setvbuf+0x9c>
   81124:	f1b8 0f00 	cmp.w	r8, #0
   81128:	d03c      	beq.n	811a4 <setvbuf+0xc0>
   8112a:	2e01      	cmp	r6, #1
   8112c:	d013      	beq.n	81156 <setvbuf+0x72>
   8112e:	b29b      	uxth	r3, r3
   81130:	f003 0008 	and.w	r0, r3, #8
   81134:	4a2a      	ldr	r2, [pc, #168]	; (811e0 <setvbuf+0xfc>)
   81136:	b280      	uxth	r0, r0
   81138:	63ea      	str	r2, [r5, #60]	; 0x3c
   8113a:	f8c4 8000 	str.w	r8, [r4]
   8113e:	f8c4 8010 	str.w	r8, [r4, #16]
   81142:	6167      	str	r7, [r4, #20]
   81144:	b178      	cbz	r0, 81166 <setvbuf+0x82>
   81146:	f013 0f03 	tst.w	r3, #3
   8114a:	bf18      	it	ne
   8114c:	2700      	movne	r7, #0
   8114e:	60a7      	str	r7, [r4, #8]
   81150:	2000      	movs	r0, #0
   81152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81156:	f043 0301 	orr.w	r3, r3, #1
   8115a:	427a      	negs	r2, r7
   8115c:	81a3      	strh	r3, [r4, #12]
   8115e:	61a2      	str	r2, [r4, #24]
   81160:	e7e5      	b.n	8112e <setvbuf+0x4a>
   81162:	f04f 30ff 	mov.w	r0, #4294967295
   81166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8116a:	4628      	mov	r0, r5
   8116c:	6921      	ldr	r1, [r4, #16]
   8116e:	f001 f983 	bl	82478 <_free_r>
   81172:	89a3      	ldrh	r3, [r4, #12]
   81174:	2e02      	cmp	r6, #2
   81176:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8117a:	b29b      	uxth	r3, r3
   8117c:	81a3      	strh	r3, [r4, #12]
   8117e:	d1d1      	bne.n	81124 <setvbuf+0x40>
   81180:	2000      	movs	r0, #0
   81182:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81186:	f043 0302 	orr.w	r3, r3, #2
   8118a:	2500      	movs	r5, #0
   8118c:	2101      	movs	r1, #1
   8118e:	81a3      	strh	r3, [r4, #12]
   81190:	60a5      	str	r5, [r4, #8]
   81192:	6022      	str	r2, [r4, #0]
   81194:	6122      	str	r2, [r4, #16]
   81196:	6161      	str	r1, [r4, #20]
   81198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8119c:	4628      	mov	r0, r5
   8119e:	f001 f827 	bl	821f0 <__sinit>
   811a2:	e7ab      	b.n	810fc <setvbuf+0x18>
   811a4:	2f00      	cmp	r7, #0
   811a6:	bf08      	it	eq
   811a8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   811ac:	4638      	mov	r0, r7
   811ae:	f001 fc59 	bl	82a64 <malloc>
   811b2:	4680      	mov	r8, r0
   811b4:	b128      	cbz	r0, 811c2 <setvbuf+0xde>
   811b6:	89a3      	ldrh	r3, [r4, #12]
   811b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   811bc:	b29b      	uxth	r3, r3
   811be:	81a3      	strh	r3, [r4, #12]
   811c0:	e7b3      	b.n	8112a <setvbuf+0x46>
   811c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   811c6:	f001 fc4d 	bl	82a64 <malloc>
   811ca:	4680      	mov	r8, r0
   811cc:	b918      	cbnz	r0, 811d6 <setvbuf+0xf2>
   811ce:	89a3      	ldrh	r3, [r4, #12]
   811d0:	f04f 30ff 	mov.w	r0, #4294967295
   811d4:	e7d5      	b.n	81182 <setvbuf+0x9e>
   811d6:	f44f 6780 	mov.w	r7, #1024	; 0x400
   811da:	e7ec      	b.n	811b6 <setvbuf+0xd2>
   811dc:	20070558 	.word	0x20070558
   811e0:	000821e5 	.word	0x000821e5

000811e4 <strlen>:
   811e4:	f020 0103 	bic.w	r1, r0, #3
   811e8:	f010 0003 	ands.w	r0, r0, #3
   811ec:	f1c0 0000 	rsb	r0, r0, #0
   811f0:	f851 3b04 	ldr.w	r3, [r1], #4
   811f4:	f100 0c04 	add.w	ip, r0, #4
   811f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   811fc:	f06f 0200 	mvn.w	r2, #0
   81200:	bf1c      	itt	ne
   81202:	fa22 f20c 	lsrne.w	r2, r2, ip
   81206:	4313      	orrne	r3, r2
   81208:	f04f 0c01 	mov.w	ip, #1
   8120c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81210:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81214:	eba3 020c 	sub.w	r2, r3, ip
   81218:	ea22 0203 	bic.w	r2, r2, r3
   8121c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81220:	bf04      	itt	eq
   81222:	f851 3b04 	ldreq.w	r3, [r1], #4
   81226:	3004      	addeq	r0, #4
   81228:	d0f4      	beq.n	81214 <strlen+0x30>
   8122a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8122e:	bf1f      	itttt	ne
   81230:	3001      	addne	r0, #1
   81232:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81236:	3001      	addne	r0, #1
   81238:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   8123c:	bf18      	it	ne
   8123e:	3001      	addne	r0, #1
   81240:	4770      	bx	lr
   81242:	bf00      	nop

00081244 <__sprint_r.part.0>:
   81244:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8124a:	049c      	lsls	r4, r3, #18
   8124c:	460e      	mov	r6, r1
   8124e:	4680      	mov	r8, r0
   81250:	4691      	mov	r9, r2
   81252:	d52a      	bpl.n	812aa <__sprint_r.part.0+0x66>
   81254:	6893      	ldr	r3, [r2, #8]
   81256:	6812      	ldr	r2, [r2, #0]
   81258:	f102 0a08 	add.w	sl, r2, #8
   8125c:	b31b      	cbz	r3, 812a6 <__sprint_r.part.0+0x62>
   8125e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81262:	08bf      	lsrs	r7, r7, #2
   81264:	d017      	beq.n	81296 <__sprint_r.part.0+0x52>
   81266:	3d04      	subs	r5, #4
   81268:	2400      	movs	r4, #0
   8126a:	e001      	b.n	81270 <__sprint_r.part.0+0x2c>
   8126c:	42a7      	cmp	r7, r4
   8126e:	d010      	beq.n	81292 <__sprint_r.part.0+0x4e>
   81270:	4640      	mov	r0, r8
   81272:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81276:	4632      	mov	r2, r6
   81278:	f001 f850 	bl	8231c <_fputwc_r>
   8127c:	1c43      	adds	r3, r0, #1
   8127e:	f104 0401 	add.w	r4, r4, #1
   81282:	d1f3      	bne.n	8126c <__sprint_r.part.0+0x28>
   81284:	2300      	movs	r3, #0
   81286:	f8c9 3008 	str.w	r3, [r9, #8]
   8128a:	f8c9 3004 	str.w	r3, [r9, #4]
   8128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81292:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81296:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8129a:	f8c9 3008 	str.w	r3, [r9, #8]
   8129e:	f10a 0a08 	add.w	sl, sl, #8
   812a2:	2b00      	cmp	r3, #0
   812a4:	d1db      	bne.n	8125e <__sprint_r.part.0+0x1a>
   812a6:	2000      	movs	r0, #0
   812a8:	e7ec      	b.n	81284 <__sprint_r.part.0+0x40>
   812aa:	f001 f9b1 	bl	82610 <__sfvwrite_r>
   812ae:	2300      	movs	r3, #0
   812b0:	f8c9 3008 	str.w	r3, [r9, #8]
   812b4:	f8c9 3004 	str.w	r3, [r9, #4]
   812b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000812bc <_vfiprintf_r>:
   812bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812c0:	b0b1      	sub	sp, #196	; 0xc4
   812c2:	461c      	mov	r4, r3
   812c4:	9102      	str	r1, [sp, #8]
   812c6:	4690      	mov	r8, r2
   812c8:	9308      	str	r3, [sp, #32]
   812ca:	9006      	str	r0, [sp, #24]
   812cc:	b118      	cbz	r0, 812d6 <_vfiprintf_r+0x1a>
   812ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   812d0:	2b00      	cmp	r3, #0
   812d2:	f000 80e8 	beq.w	814a6 <_vfiprintf_r+0x1ea>
   812d6:	9d02      	ldr	r5, [sp, #8]
   812d8:	89ab      	ldrh	r3, [r5, #12]
   812da:	b29a      	uxth	r2, r3
   812dc:	0490      	lsls	r0, r2, #18
   812de:	d407      	bmi.n	812f0 <_vfiprintf_r+0x34>
   812e0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   812e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   812e6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   812ea:	81ab      	strh	r3, [r5, #12]
   812ec:	b29a      	uxth	r2, r3
   812ee:	6669      	str	r1, [r5, #100]	; 0x64
   812f0:	0711      	lsls	r1, r2, #28
   812f2:	f140 80b7 	bpl.w	81464 <_vfiprintf_r+0x1a8>
   812f6:	f8dd b008 	ldr.w	fp, [sp, #8]
   812fa:	f8db 3010 	ldr.w	r3, [fp, #16]
   812fe:	2b00      	cmp	r3, #0
   81300:	f000 80b0 	beq.w	81464 <_vfiprintf_r+0x1a8>
   81304:	f002 021a 	and.w	r2, r2, #26
   81308:	2a0a      	cmp	r2, #10
   8130a:	f000 80b7 	beq.w	8147c <_vfiprintf_r+0x1c0>
   8130e:	2300      	movs	r3, #0
   81310:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81314:	930a      	str	r3, [sp, #40]	; 0x28
   81316:	9315      	str	r3, [sp, #84]	; 0x54
   81318:	9314      	str	r3, [sp, #80]	; 0x50
   8131a:	9309      	str	r3, [sp, #36]	; 0x24
   8131c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81320:	464e      	mov	r6, r9
   81322:	f898 3000 	ldrb.w	r3, [r8]
   81326:	2b00      	cmp	r3, #0
   81328:	f000 84c8 	beq.w	81cbc <_vfiprintf_r+0xa00>
   8132c:	2b25      	cmp	r3, #37	; 0x25
   8132e:	f000 84c5 	beq.w	81cbc <_vfiprintf_r+0xa00>
   81332:	f108 0201 	add.w	r2, r8, #1
   81336:	e001      	b.n	8133c <_vfiprintf_r+0x80>
   81338:	2b25      	cmp	r3, #37	; 0x25
   8133a:	d004      	beq.n	81346 <_vfiprintf_r+0x8a>
   8133c:	7813      	ldrb	r3, [r2, #0]
   8133e:	4614      	mov	r4, r2
   81340:	3201      	adds	r2, #1
   81342:	2b00      	cmp	r3, #0
   81344:	d1f8      	bne.n	81338 <_vfiprintf_r+0x7c>
   81346:	ebc8 0504 	rsb	r5, r8, r4
   8134a:	b195      	cbz	r5, 81372 <_vfiprintf_r+0xb6>
   8134c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8134e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81350:	3301      	adds	r3, #1
   81352:	442a      	add	r2, r5
   81354:	2b07      	cmp	r3, #7
   81356:	f8c6 8000 	str.w	r8, [r6]
   8135a:	6075      	str	r5, [r6, #4]
   8135c:	9215      	str	r2, [sp, #84]	; 0x54
   8135e:	9314      	str	r3, [sp, #80]	; 0x50
   81360:	dd7b      	ble.n	8145a <_vfiprintf_r+0x19e>
   81362:	2a00      	cmp	r2, #0
   81364:	f040 84d5 	bne.w	81d12 <_vfiprintf_r+0xa56>
   81368:	9809      	ldr	r0, [sp, #36]	; 0x24
   8136a:	9214      	str	r2, [sp, #80]	; 0x50
   8136c:	4428      	add	r0, r5
   8136e:	464e      	mov	r6, r9
   81370:	9009      	str	r0, [sp, #36]	; 0x24
   81372:	7823      	ldrb	r3, [r4, #0]
   81374:	2b00      	cmp	r3, #0
   81376:	f000 83ed 	beq.w	81b54 <_vfiprintf_r+0x898>
   8137a:	2100      	movs	r1, #0
   8137c:	f04f 0200 	mov.w	r2, #0
   81380:	f04f 3cff 	mov.w	ip, #4294967295
   81384:	7863      	ldrb	r3, [r4, #1]
   81386:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8138a:	9104      	str	r1, [sp, #16]
   8138c:	468a      	mov	sl, r1
   8138e:	f104 0801 	add.w	r8, r4, #1
   81392:	4608      	mov	r0, r1
   81394:	4665      	mov	r5, ip
   81396:	f108 0801 	add.w	r8, r8, #1
   8139a:	f1a3 0220 	sub.w	r2, r3, #32
   8139e:	2a58      	cmp	r2, #88	; 0x58
   813a0:	f200 82d9 	bhi.w	81956 <_vfiprintf_r+0x69a>
   813a4:	e8df f012 	tbh	[pc, r2, lsl #1]
   813a8:	02d702cb 	.word	0x02d702cb
   813ac:	02d202d7 	.word	0x02d202d7
   813b0:	02d702d7 	.word	0x02d702d7
   813b4:	02d702d7 	.word	0x02d702d7
   813b8:	02d702d7 	.word	0x02d702d7
   813bc:	028f0282 	.word	0x028f0282
   813c0:	008402d7 	.word	0x008402d7
   813c4:	02d70293 	.word	0x02d70293
   813c8:	0196012b 	.word	0x0196012b
   813cc:	01960196 	.word	0x01960196
   813d0:	01960196 	.word	0x01960196
   813d4:	01960196 	.word	0x01960196
   813d8:	01960196 	.word	0x01960196
   813dc:	02d702d7 	.word	0x02d702d7
   813e0:	02d702d7 	.word	0x02d702d7
   813e4:	02d702d7 	.word	0x02d702d7
   813e8:	02d702d7 	.word	0x02d702d7
   813ec:	02d702d7 	.word	0x02d702d7
   813f0:	02d70130 	.word	0x02d70130
   813f4:	02d702d7 	.word	0x02d702d7
   813f8:	02d702d7 	.word	0x02d702d7
   813fc:	02d702d7 	.word	0x02d702d7
   81400:	02d702d7 	.word	0x02d702d7
   81404:	017b02d7 	.word	0x017b02d7
   81408:	02d702d7 	.word	0x02d702d7
   8140c:	02d702d7 	.word	0x02d702d7
   81410:	01a402d7 	.word	0x01a402d7
   81414:	02d702d7 	.word	0x02d702d7
   81418:	02d701bf 	.word	0x02d701bf
   8141c:	02d702d7 	.word	0x02d702d7
   81420:	02d702d7 	.word	0x02d702d7
   81424:	02d702d7 	.word	0x02d702d7
   81428:	02d702d7 	.word	0x02d702d7
   8142c:	01e402d7 	.word	0x01e402d7
   81430:	02d701fa 	.word	0x02d701fa
   81434:	02d702d7 	.word	0x02d702d7
   81438:	01fa0216 	.word	0x01fa0216
   8143c:	02d702d7 	.word	0x02d702d7
   81440:	02d7021b 	.word	0x02d7021b
   81444:	00890228 	.word	0x00890228
   81448:	027d0266 	.word	0x027d0266
   8144c:	023a02d7 	.word	0x023a02d7
   81450:	011902d7 	.word	0x011902d7
   81454:	02d702d7 	.word	0x02d702d7
   81458:	02af      	.short	0x02af
   8145a:	3608      	adds	r6, #8
   8145c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8145e:	4428      	add	r0, r5
   81460:	9009      	str	r0, [sp, #36]	; 0x24
   81462:	e786      	b.n	81372 <_vfiprintf_r+0xb6>
   81464:	9806      	ldr	r0, [sp, #24]
   81466:	9902      	ldr	r1, [sp, #8]
   81468:	f000 fd90 	bl	81f8c <__swsetup_r>
   8146c:	b9b0      	cbnz	r0, 8149c <_vfiprintf_r+0x1e0>
   8146e:	9d02      	ldr	r5, [sp, #8]
   81470:	89aa      	ldrh	r2, [r5, #12]
   81472:	f002 021a 	and.w	r2, r2, #26
   81476:	2a0a      	cmp	r2, #10
   81478:	f47f af49 	bne.w	8130e <_vfiprintf_r+0x52>
   8147c:	f8dd b008 	ldr.w	fp, [sp, #8]
   81480:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81484:	2b00      	cmp	r3, #0
   81486:	f6ff af42 	blt.w	8130e <_vfiprintf_r+0x52>
   8148a:	9806      	ldr	r0, [sp, #24]
   8148c:	4659      	mov	r1, fp
   8148e:	4642      	mov	r2, r8
   81490:	4623      	mov	r3, r4
   81492:	f000 fd3d 	bl	81f10 <__sbprintf>
   81496:	b031      	add	sp, #196	; 0xc4
   81498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8149c:	f04f 30ff 	mov.w	r0, #4294967295
   814a0:	b031      	add	sp, #196	; 0xc4
   814a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814a6:	f000 fea3 	bl	821f0 <__sinit>
   814aa:	e714      	b.n	812d6 <_vfiprintf_r+0x1a>
   814ac:	4240      	negs	r0, r0
   814ae:	9308      	str	r3, [sp, #32]
   814b0:	f04a 0a04 	orr.w	sl, sl, #4
   814b4:	f898 3000 	ldrb.w	r3, [r8]
   814b8:	e76d      	b.n	81396 <_vfiprintf_r+0xda>
   814ba:	f01a 0320 	ands.w	r3, sl, #32
   814be:	9004      	str	r0, [sp, #16]
   814c0:	46ac      	mov	ip, r5
   814c2:	f000 80f4 	beq.w	816ae <_vfiprintf_r+0x3f2>
   814c6:	f8dd b020 	ldr.w	fp, [sp, #32]
   814ca:	f10b 0307 	add.w	r3, fp, #7
   814ce:	f023 0307 	bic.w	r3, r3, #7
   814d2:	f103 0408 	add.w	r4, r3, #8
   814d6:	9408      	str	r4, [sp, #32]
   814d8:	e9d3 4500 	ldrd	r4, r5, [r3]
   814dc:	2300      	movs	r3, #0
   814de:	f04f 0000 	mov.w	r0, #0
   814e2:	2100      	movs	r1, #0
   814e4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   814e8:	f8cd c014 	str.w	ip, [sp, #20]
   814ec:	9107      	str	r1, [sp, #28]
   814ee:	f1bc 0f00 	cmp.w	ip, #0
   814f2:	bfa8      	it	ge
   814f4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   814f8:	ea54 0205 	orrs.w	r2, r4, r5
   814fc:	f040 80ad 	bne.w	8165a <_vfiprintf_r+0x39e>
   81500:	f1bc 0f00 	cmp.w	ip, #0
   81504:	f040 80a9 	bne.w	8165a <_vfiprintf_r+0x39e>
   81508:	2b00      	cmp	r3, #0
   8150a:	f040 83c0 	bne.w	81c8e <_vfiprintf_r+0x9d2>
   8150e:	f01a 0f01 	tst.w	sl, #1
   81512:	f000 83bc 	beq.w	81c8e <_vfiprintf_r+0x9d2>
   81516:	2330      	movs	r3, #48	; 0x30
   81518:	af30      	add	r7, sp, #192	; 0xc0
   8151a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8151e:	ebc7 0409 	rsb	r4, r7, r9
   81522:	9405      	str	r4, [sp, #20]
   81524:	f8dd b014 	ldr.w	fp, [sp, #20]
   81528:	9c07      	ldr	r4, [sp, #28]
   8152a:	45e3      	cmp	fp, ip
   8152c:	bfb8      	it	lt
   8152e:	46e3      	movlt	fp, ip
   81530:	f8cd b00c 	str.w	fp, [sp, #12]
   81534:	b11c      	cbz	r4, 8153e <_vfiprintf_r+0x282>
   81536:	f10b 0b01 	add.w	fp, fp, #1
   8153a:	f8cd b00c 	str.w	fp, [sp, #12]
   8153e:	f01a 0502 	ands.w	r5, sl, #2
   81542:	9507      	str	r5, [sp, #28]
   81544:	d005      	beq.n	81552 <_vfiprintf_r+0x296>
   81546:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8154a:	f10b 0b02 	add.w	fp, fp, #2
   8154e:	f8cd b00c 	str.w	fp, [sp, #12]
   81552:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81556:	930b      	str	r3, [sp, #44]	; 0x2c
   81558:	f040 821b 	bne.w	81992 <_vfiprintf_r+0x6d6>
   8155c:	9d04      	ldr	r5, [sp, #16]
   8155e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81562:	ebcb 0405 	rsb	r4, fp, r5
   81566:	2c00      	cmp	r4, #0
   81568:	f340 8213 	ble.w	81992 <_vfiprintf_r+0x6d6>
   8156c:	2c10      	cmp	r4, #16
   8156e:	f340 8489 	ble.w	81e84 <_vfiprintf_r+0xbc8>
   81572:	4dbe      	ldr	r5, [pc, #760]	; (8186c <_vfiprintf_r+0x5b0>)
   81574:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81576:	462b      	mov	r3, r5
   81578:	9814      	ldr	r0, [sp, #80]	; 0x50
   8157a:	4625      	mov	r5, r4
   8157c:	f04f 0b10 	mov.w	fp, #16
   81580:	4664      	mov	r4, ip
   81582:	46b4      	mov	ip, r6
   81584:	461e      	mov	r6, r3
   81586:	e006      	b.n	81596 <_vfiprintf_r+0x2da>
   81588:	1c83      	adds	r3, r0, #2
   8158a:	f10c 0c08 	add.w	ip, ip, #8
   8158e:	4608      	mov	r0, r1
   81590:	3d10      	subs	r5, #16
   81592:	2d10      	cmp	r5, #16
   81594:	dd11      	ble.n	815ba <_vfiprintf_r+0x2fe>
   81596:	1c41      	adds	r1, r0, #1
   81598:	3210      	adds	r2, #16
   8159a:	2907      	cmp	r1, #7
   8159c:	9215      	str	r2, [sp, #84]	; 0x54
   8159e:	e88c 0840 	stmia.w	ip, {r6, fp}
   815a2:	9114      	str	r1, [sp, #80]	; 0x50
   815a4:	ddf0      	ble.n	81588 <_vfiprintf_r+0x2cc>
   815a6:	2a00      	cmp	r2, #0
   815a8:	f040 81e6 	bne.w	81978 <_vfiprintf_r+0x6bc>
   815ac:	3d10      	subs	r5, #16
   815ae:	2d10      	cmp	r5, #16
   815b0:	f04f 0301 	mov.w	r3, #1
   815b4:	4610      	mov	r0, r2
   815b6:	46cc      	mov	ip, r9
   815b8:	dced      	bgt.n	81596 <_vfiprintf_r+0x2da>
   815ba:	4631      	mov	r1, r6
   815bc:	4666      	mov	r6, ip
   815be:	46a4      	mov	ip, r4
   815c0:	462c      	mov	r4, r5
   815c2:	460d      	mov	r5, r1
   815c4:	4422      	add	r2, r4
   815c6:	2b07      	cmp	r3, #7
   815c8:	9215      	str	r2, [sp, #84]	; 0x54
   815ca:	6035      	str	r5, [r6, #0]
   815cc:	6074      	str	r4, [r6, #4]
   815ce:	9314      	str	r3, [sp, #80]	; 0x50
   815d0:	f300 836d 	bgt.w	81cae <_vfiprintf_r+0x9f2>
   815d4:	3608      	adds	r6, #8
   815d6:	1c59      	adds	r1, r3, #1
   815d8:	e1de      	b.n	81998 <_vfiprintf_r+0x6dc>
   815da:	f01a 0f20 	tst.w	sl, #32
   815de:	9004      	str	r0, [sp, #16]
   815e0:	46ac      	mov	ip, r5
   815e2:	f000 808d 	beq.w	81700 <_vfiprintf_r+0x444>
   815e6:	9d08      	ldr	r5, [sp, #32]
   815e8:	1deb      	adds	r3, r5, #7
   815ea:	f023 0307 	bic.w	r3, r3, #7
   815ee:	f103 0b08 	add.w	fp, r3, #8
   815f2:	e9d3 4500 	ldrd	r4, r5, [r3]
   815f6:	f8cd b020 	str.w	fp, [sp, #32]
   815fa:	2301      	movs	r3, #1
   815fc:	e76f      	b.n	814de <_vfiprintf_r+0x222>
   815fe:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   81602:	f898 3000 	ldrb.w	r3, [r8]
   81606:	e6c6      	b.n	81396 <_vfiprintf_r+0xda>
   81608:	f04a 0a10 	orr.w	sl, sl, #16
   8160c:	f01a 0f20 	tst.w	sl, #32
   81610:	9004      	str	r0, [sp, #16]
   81612:	46ac      	mov	ip, r5
   81614:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81618:	f000 80c8 	beq.w	817ac <_vfiprintf_r+0x4f0>
   8161c:	9c08      	ldr	r4, [sp, #32]
   8161e:	1de1      	adds	r1, r4, #7
   81620:	f021 0107 	bic.w	r1, r1, #7
   81624:	e9d1 2300 	ldrd	r2, r3, [r1]
   81628:	3108      	adds	r1, #8
   8162a:	9108      	str	r1, [sp, #32]
   8162c:	4614      	mov	r4, r2
   8162e:	461d      	mov	r5, r3
   81630:	2a00      	cmp	r2, #0
   81632:	f173 0b00 	sbcs.w	fp, r3, #0
   81636:	f2c0 83ce 	blt.w	81dd6 <_vfiprintf_r+0xb1a>
   8163a:	f1bc 0f00 	cmp.w	ip, #0
   8163e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81642:	bfa8      	it	ge
   81644:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81648:	ea54 0205 	orrs.w	r2, r4, r5
   8164c:	9007      	str	r0, [sp, #28]
   8164e:	f8cd c014 	str.w	ip, [sp, #20]
   81652:	f04f 0301 	mov.w	r3, #1
   81656:	f43f af53 	beq.w	81500 <_vfiprintf_r+0x244>
   8165a:	2b01      	cmp	r3, #1
   8165c:	f000 8319 	beq.w	81c92 <_vfiprintf_r+0x9d6>
   81660:	2b02      	cmp	r3, #2
   81662:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81666:	f040 824c 	bne.w	81b02 <_vfiprintf_r+0x846>
   8166a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8166e:	4619      	mov	r1, r3
   81670:	f004 000f 	and.w	r0, r4, #15
   81674:	0922      	lsrs	r2, r4, #4
   81676:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8167a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8167e:	092b      	lsrs	r3, r5, #4
   81680:	7008      	strb	r0, [r1, #0]
   81682:	ea52 0003 	orrs.w	r0, r2, r3
   81686:	460f      	mov	r7, r1
   81688:	4614      	mov	r4, r2
   8168a:	461d      	mov	r5, r3
   8168c:	f101 31ff 	add.w	r1, r1, #4294967295
   81690:	d1ee      	bne.n	81670 <_vfiprintf_r+0x3b4>
   81692:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81696:	ebc7 0309 	rsb	r3, r7, r9
   8169a:	9305      	str	r3, [sp, #20]
   8169c:	e742      	b.n	81524 <_vfiprintf_r+0x268>
   8169e:	f04a 0a10 	orr.w	sl, sl, #16
   816a2:	f01a 0320 	ands.w	r3, sl, #32
   816a6:	9004      	str	r0, [sp, #16]
   816a8:	46ac      	mov	ip, r5
   816aa:	f47f af0c 	bne.w	814c6 <_vfiprintf_r+0x20a>
   816ae:	f01a 0210 	ands.w	r2, sl, #16
   816b2:	f040 8311 	bne.w	81cd8 <_vfiprintf_r+0xa1c>
   816b6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   816ba:	f000 830d 	beq.w	81cd8 <_vfiprintf_r+0xa1c>
   816be:	f8dd b020 	ldr.w	fp, [sp, #32]
   816c2:	4613      	mov	r3, r2
   816c4:	f8bb 4000 	ldrh.w	r4, [fp]
   816c8:	f10b 0b04 	add.w	fp, fp, #4
   816cc:	2500      	movs	r5, #0
   816ce:	f8cd b020 	str.w	fp, [sp, #32]
   816d2:	e704      	b.n	814de <_vfiprintf_r+0x222>
   816d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816d8:	2000      	movs	r0, #0
   816da:	f818 3b01 	ldrb.w	r3, [r8], #1
   816de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   816e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   816e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816ea:	2a09      	cmp	r2, #9
   816ec:	d9f5      	bls.n	816da <_vfiprintf_r+0x41e>
   816ee:	e654      	b.n	8139a <_vfiprintf_r+0xde>
   816f0:	f04a 0a10 	orr.w	sl, sl, #16
   816f4:	f01a 0f20 	tst.w	sl, #32
   816f8:	9004      	str	r0, [sp, #16]
   816fa:	46ac      	mov	ip, r5
   816fc:	f47f af73 	bne.w	815e6 <_vfiprintf_r+0x32a>
   81700:	f01a 0f10 	tst.w	sl, #16
   81704:	f040 82ef 	bne.w	81ce6 <_vfiprintf_r+0xa2a>
   81708:	f01a 0f40 	tst.w	sl, #64	; 0x40
   8170c:	f000 82eb 	beq.w	81ce6 <_vfiprintf_r+0xa2a>
   81710:	f8dd b020 	ldr.w	fp, [sp, #32]
   81714:	2500      	movs	r5, #0
   81716:	f8bb 4000 	ldrh.w	r4, [fp]
   8171a:	f10b 0b04 	add.w	fp, fp, #4
   8171e:	2301      	movs	r3, #1
   81720:	f8cd b020 	str.w	fp, [sp, #32]
   81724:	e6db      	b.n	814de <_vfiprintf_r+0x222>
   81726:	46ac      	mov	ip, r5
   81728:	4d51      	ldr	r5, [pc, #324]	; (81870 <_vfiprintf_r+0x5b4>)
   8172a:	f01a 0f20 	tst.w	sl, #32
   8172e:	9004      	str	r0, [sp, #16]
   81730:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81734:	950a      	str	r5, [sp, #40]	; 0x28
   81736:	f000 80f0 	beq.w	8191a <_vfiprintf_r+0x65e>
   8173a:	9d08      	ldr	r5, [sp, #32]
   8173c:	1dea      	adds	r2, r5, #7
   8173e:	f022 0207 	bic.w	r2, r2, #7
   81742:	f102 0b08 	add.w	fp, r2, #8
   81746:	f8cd b020 	str.w	fp, [sp, #32]
   8174a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8174e:	f01a 0f01 	tst.w	sl, #1
   81752:	f000 82aa 	beq.w	81caa <_vfiprintf_r+0x9ee>
   81756:	ea54 0b05 	orrs.w	fp, r4, r5
   8175a:	f000 82a6 	beq.w	81caa <_vfiprintf_r+0x9ee>
   8175e:	2230      	movs	r2, #48	; 0x30
   81760:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81764:	f04a 0a02 	orr.w	sl, sl, #2
   81768:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8176c:	2302      	movs	r3, #2
   8176e:	e6b6      	b.n	814de <_vfiprintf_r+0x222>
   81770:	9b08      	ldr	r3, [sp, #32]
   81772:	f8dd b020 	ldr.w	fp, [sp, #32]
   81776:	681b      	ldr	r3, [r3, #0]
   81778:	2401      	movs	r4, #1
   8177a:	f04f 0500 	mov.w	r5, #0
   8177e:	f10b 0b04 	add.w	fp, fp, #4
   81782:	9004      	str	r0, [sp, #16]
   81784:	9403      	str	r4, [sp, #12]
   81786:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8178a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8178e:	f8cd b020 	str.w	fp, [sp, #32]
   81792:	9405      	str	r4, [sp, #20]
   81794:	af16      	add	r7, sp, #88	; 0x58
   81796:	f04f 0c00 	mov.w	ip, #0
   8179a:	e6d0      	b.n	8153e <_vfiprintf_r+0x282>
   8179c:	f01a 0f20 	tst.w	sl, #32
   817a0:	9004      	str	r0, [sp, #16]
   817a2:	46ac      	mov	ip, r5
   817a4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   817a8:	f47f af38 	bne.w	8161c <_vfiprintf_r+0x360>
   817ac:	f01a 0f10 	tst.w	sl, #16
   817b0:	f040 82a7 	bne.w	81d02 <_vfiprintf_r+0xa46>
   817b4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   817b8:	f000 82a3 	beq.w	81d02 <_vfiprintf_r+0xa46>
   817bc:	f8dd b020 	ldr.w	fp, [sp, #32]
   817c0:	f9bb 4000 	ldrsh.w	r4, [fp]
   817c4:	f10b 0b04 	add.w	fp, fp, #4
   817c8:	17e5      	asrs	r5, r4, #31
   817ca:	4622      	mov	r2, r4
   817cc:	462b      	mov	r3, r5
   817ce:	f8cd b020 	str.w	fp, [sp, #32]
   817d2:	e72d      	b.n	81630 <_vfiprintf_r+0x374>
   817d4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   817d8:	f898 3000 	ldrb.w	r3, [r8]
   817dc:	e5db      	b.n	81396 <_vfiprintf_r+0xda>
   817de:	f898 3000 	ldrb.w	r3, [r8]
   817e2:	4642      	mov	r2, r8
   817e4:	2b6c      	cmp	r3, #108	; 0x6c
   817e6:	bf03      	ittte	eq
   817e8:	f108 0801 	addeq.w	r8, r8, #1
   817ec:	f04a 0a20 	orreq.w	sl, sl, #32
   817f0:	7853      	ldrbeq	r3, [r2, #1]
   817f2:	f04a 0a10 	orrne.w	sl, sl, #16
   817f6:	e5ce      	b.n	81396 <_vfiprintf_r+0xda>
   817f8:	f01a 0f20 	tst.w	sl, #32
   817fc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81800:	f000 82f7 	beq.w	81df2 <_vfiprintf_r+0xb36>
   81804:	9c08      	ldr	r4, [sp, #32]
   81806:	6821      	ldr	r1, [r4, #0]
   81808:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8180a:	17e5      	asrs	r5, r4, #31
   8180c:	462b      	mov	r3, r5
   8180e:	9d08      	ldr	r5, [sp, #32]
   81810:	4622      	mov	r2, r4
   81812:	3504      	adds	r5, #4
   81814:	9508      	str	r5, [sp, #32]
   81816:	e9c1 2300 	strd	r2, r3, [r1]
   8181a:	e582      	b.n	81322 <_vfiprintf_r+0x66>
   8181c:	9c08      	ldr	r4, [sp, #32]
   8181e:	46ac      	mov	ip, r5
   81820:	6827      	ldr	r7, [r4, #0]
   81822:	f04f 0500 	mov.w	r5, #0
   81826:	9004      	str	r0, [sp, #16]
   81828:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8182c:	3404      	adds	r4, #4
   8182e:	2f00      	cmp	r7, #0
   81830:	f000 8332 	beq.w	81e98 <_vfiprintf_r+0xbdc>
   81834:	f1bc 0f00 	cmp.w	ip, #0
   81838:	4638      	mov	r0, r7
   8183a:	f2c0 8307 	blt.w	81e4c <_vfiprintf_r+0xb90>
   8183e:	4662      	mov	r2, ip
   81840:	2100      	movs	r1, #0
   81842:	f8cd c004 	str.w	ip, [sp, #4]
   81846:	f001 fbb1 	bl	82fac <memchr>
   8184a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8184e:	2800      	cmp	r0, #0
   81850:	f000 833a 	beq.w	81ec8 <_vfiprintf_r+0xc0c>
   81854:	1bc0      	subs	r0, r0, r7
   81856:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8185a:	4560      	cmp	r0, ip
   8185c:	bfa8      	it	ge
   8185e:	4660      	movge	r0, ip
   81860:	9005      	str	r0, [sp, #20]
   81862:	9408      	str	r4, [sp, #32]
   81864:	9507      	str	r5, [sp, #28]
   81866:	f04f 0c00 	mov.w	ip, #0
   8186a:	e65b      	b.n	81524 <_vfiprintf_r+0x268>
   8186c:	0008442c 	.word	0x0008442c
   81870:	000843ec 	.word	0x000843ec
   81874:	9b08      	ldr	r3, [sp, #32]
   81876:	f8dd b020 	ldr.w	fp, [sp, #32]
   8187a:	9004      	str	r0, [sp, #16]
   8187c:	48b2      	ldr	r0, [pc, #712]	; (81b48 <_vfiprintf_r+0x88c>)
   8187e:	681c      	ldr	r4, [r3, #0]
   81880:	2230      	movs	r2, #48	; 0x30
   81882:	2378      	movs	r3, #120	; 0x78
   81884:	f10b 0b04 	add.w	fp, fp, #4
   81888:	46ac      	mov	ip, r5
   8188a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8188e:	f04a 0a02 	orr.w	sl, sl, #2
   81892:	f8cd b020 	str.w	fp, [sp, #32]
   81896:	2500      	movs	r5, #0
   81898:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8189c:	900a      	str	r0, [sp, #40]	; 0x28
   8189e:	2302      	movs	r3, #2
   818a0:	e61d      	b.n	814de <_vfiprintf_r+0x222>
   818a2:	f04a 0a20 	orr.w	sl, sl, #32
   818a6:	f898 3000 	ldrb.w	r3, [r8]
   818aa:	e574      	b.n	81396 <_vfiprintf_r+0xda>
   818ac:	f8dd b020 	ldr.w	fp, [sp, #32]
   818b0:	f8db 0000 	ldr.w	r0, [fp]
   818b4:	f10b 0304 	add.w	r3, fp, #4
   818b8:	2800      	cmp	r0, #0
   818ba:	f6ff adf7 	blt.w	814ac <_vfiprintf_r+0x1f0>
   818be:	9308      	str	r3, [sp, #32]
   818c0:	f898 3000 	ldrb.w	r3, [r8]
   818c4:	e567      	b.n	81396 <_vfiprintf_r+0xda>
   818c6:	f898 3000 	ldrb.w	r3, [r8]
   818ca:	212b      	movs	r1, #43	; 0x2b
   818cc:	e563      	b.n	81396 <_vfiprintf_r+0xda>
   818ce:	f898 3000 	ldrb.w	r3, [r8]
   818d2:	f108 0401 	add.w	r4, r8, #1
   818d6:	2b2a      	cmp	r3, #42	; 0x2a
   818d8:	f000 8305 	beq.w	81ee6 <_vfiprintf_r+0xc2a>
   818dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818e0:	2a09      	cmp	r2, #9
   818e2:	bf98      	it	ls
   818e4:	2500      	movls	r5, #0
   818e6:	f200 82fa 	bhi.w	81ede <_vfiprintf_r+0xc22>
   818ea:	f814 3b01 	ldrb.w	r3, [r4], #1
   818ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   818f2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   818f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818fa:	2a09      	cmp	r2, #9
   818fc:	d9f5      	bls.n	818ea <_vfiprintf_r+0x62e>
   818fe:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   81902:	46a0      	mov	r8, r4
   81904:	e549      	b.n	8139a <_vfiprintf_r+0xde>
   81906:	4c90      	ldr	r4, [pc, #576]	; (81b48 <_vfiprintf_r+0x88c>)
   81908:	f01a 0f20 	tst.w	sl, #32
   8190c:	9004      	str	r0, [sp, #16]
   8190e:	46ac      	mov	ip, r5
   81910:	940a      	str	r4, [sp, #40]	; 0x28
   81912:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81916:	f47f af10 	bne.w	8173a <_vfiprintf_r+0x47e>
   8191a:	f01a 0f10 	tst.w	sl, #16
   8191e:	f040 81ea 	bne.w	81cf6 <_vfiprintf_r+0xa3a>
   81922:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81926:	f000 81e6 	beq.w	81cf6 <_vfiprintf_r+0xa3a>
   8192a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8192e:	2500      	movs	r5, #0
   81930:	f8bb 4000 	ldrh.w	r4, [fp]
   81934:	f10b 0b04 	add.w	fp, fp, #4
   81938:	f8cd b020 	str.w	fp, [sp, #32]
   8193c:	e707      	b.n	8174e <_vfiprintf_r+0x492>
   8193e:	f898 3000 	ldrb.w	r3, [r8]
   81942:	2900      	cmp	r1, #0
   81944:	f47f ad27 	bne.w	81396 <_vfiprintf_r+0xda>
   81948:	2120      	movs	r1, #32
   8194a:	e524      	b.n	81396 <_vfiprintf_r+0xda>
   8194c:	f04a 0a01 	orr.w	sl, sl, #1
   81950:	f898 3000 	ldrb.w	r3, [r8]
   81954:	e51f      	b.n	81396 <_vfiprintf_r+0xda>
   81956:	9004      	str	r0, [sp, #16]
   81958:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8195c:	2b00      	cmp	r3, #0
   8195e:	f000 80f9 	beq.w	81b54 <_vfiprintf_r+0x898>
   81962:	2501      	movs	r5, #1
   81964:	f04f 0b00 	mov.w	fp, #0
   81968:	9503      	str	r5, [sp, #12]
   8196a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8196e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81972:	9505      	str	r5, [sp, #20]
   81974:	af16      	add	r7, sp, #88	; 0x58
   81976:	e70e      	b.n	81796 <_vfiprintf_r+0x4da>
   81978:	9806      	ldr	r0, [sp, #24]
   8197a:	9902      	ldr	r1, [sp, #8]
   8197c:	aa13      	add	r2, sp, #76	; 0x4c
   8197e:	f7ff fc61 	bl	81244 <__sprint_r.part.0>
   81982:	2800      	cmp	r0, #0
   81984:	f040 80ed 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81988:	9814      	ldr	r0, [sp, #80]	; 0x50
   8198a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8198c:	1c43      	adds	r3, r0, #1
   8198e:	46cc      	mov	ip, r9
   81990:	e5fe      	b.n	81590 <_vfiprintf_r+0x2d4>
   81992:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81994:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81996:	1c59      	adds	r1, r3, #1
   81998:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8199c:	b168      	cbz	r0, 819ba <_vfiprintf_r+0x6fe>
   8199e:	3201      	adds	r2, #1
   819a0:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   819a4:	2301      	movs	r3, #1
   819a6:	2907      	cmp	r1, #7
   819a8:	9215      	str	r2, [sp, #84]	; 0x54
   819aa:	9114      	str	r1, [sp, #80]	; 0x50
   819ac:	e886 0009 	stmia.w	r6, {r0, r3}
   819b0:	f300 8160 	bgt.w	81c74 <_vfiprintf_r+0x9b8>
   819b4:	460b      	mov	r3, r1
   819b6:	3608      	adds	r6, #8
   819b8:	3101      	adds	r1, #1
   819ba:	9c07      	ldr	r4, [sp, #28]
   819bc:	b164      	cbz	r4, 819d8 <_vfiprintf_r+0x71c>
   819be:	3202      	adds	r2, #2
   819c0:	a812      	add	r0, sp, #72	; 0x48
   819c2:	2302      	movs	r3, #2
   819c4:	2907      	cmp	r1, #7
   819c6:	9215      	str	r2, [sp, #84]	; 0x54
   819c8:	9114      	str	r1, [sp, #80]	; 0x50
   819ca:	e886 0009 	stmia.w	r6, {r0, r3}
   819ce:	f300 8157 	bgt.w	81c80 <_vfiprintf_r+0x9c4>
   819d2:	460b      	mov	r3, r1
   819d4:	3608      	adds	r6, #8
   819d6:	3101      	adds	r1, #1
   819d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   819da:	2d80      	cmp	r5, #128	; 0x80
   819dc:	f000 8101 	beq.w	81be2 <_vfiprintf_r+0x926>
   819e0:	9d05      	ldr	r5, [sp, #20]
   819e2:	ebc5 040c 	rsb	r4, r5, ip
   819e6:	2c00      	cmp	r4, #0
   819e8:	dd2f      	ble.n	81a4a <_vfiprintf_r+0x78e>
   819ea:	2c10      	cmp	r4, #16
   819ec:	4d57      	ldr	r5, [pc, #348]	; (81b4c <_vfiprintf_r+0x890>)
   819ee:	dd22      	ble.n	81a36 <_vfiprintf_r+0x77a>
   819f0:	4630      	mov	r0, r6
   819f2:	f04f 0b10 	mov.w	fp, #16
   819f6:	462e      	mov	r6, r5
   819f8:	4625      	mov	r5, r4
   819fa:	9c06      	ldr	r4, [sp, #24]
   819fc:	e006      	b.n	81a0c <_vfiprintf_r+0x750>
   819fe:	f103 0c02 	add.w	ip, r3, #2
   81a02:	3008      	adds	r0, #8
   81a04:	460b      	mov	r3, r1
   81a06:	3d10      	subs	r5, #16
   81a08:	2d10      	cmp	r5, #16
   81a0a:	dd10      	ble.n	81a2e <_vfiprintf_r+0x772>
   81a0c:	1c59      	adds	r1, r3, #1
   81a0e:	3210      	adds	r2, #16
   81a10:	2907      	cmp	r1, #7
   81a12:	9215      	str	r2, [sp, #84]	; 0x54
   81a14:	e880 0840 	stmia.w	r0, {r6, fp}
   81a18:	9114      	str	r1, [sp, #80]	; 0x50
   81a1a:	ddf0      	ble.n	819fe <_vfiprintf_r+0x742>
   81a1c:	2a00      	cmp	r2, #0
   81a1e:	d163      	bne.n	81ae8 <_vfiprintf_r+0x82c>
   81a20:	3d10      	subs	r5, #16
   81a22:	2d10      	cmp	r5, #16
   81a24:	f04f 0c01 	mov.w	ip, #1
   81a28:	4613      	mov	r3, r2
   81a2a:	4648      	mov	r0, r9
   81a2c:	dcee      	bgt.n	81a0c <_vfiprintf_r+0x750>
   81a2e:	462c      	mov	r4, r5
   81a30:	4661      	mov	r1, ip
   81a32:	4635      	mov	r5, r6
   81a34:	4606      	mov	r6, r0
   81a36:	4422      	add	r2, r4
   81a38:	2907      	cmp	r1, #7
   81a3a:	9215      	str	r2, [sp, #84]	; 0x54
   81a3c:	6035      	str	r5, [r6, #0]
   81a3e:	6074      	str	r4, [r6, #4]
   81a40:	9114      	str	r1, [sp, #80]	; 0x50
   81a42:	f300 80c1 	bgt.w	81bc8 <_vfiprintf_r+0x90c>
   81a46:	3608      	adds	r6, #8
   81a48:	3101      	adds	r1, #1
   81a4a:	9d05      	ldr	r5, [sp, #20]
   81a4c:	2907      	cmp	r1, #7
   81a4e:	442a      	add	r2, r5
   81a50:	9215      	str	r2, [sp, #84]	; 0x54
   81a52:	6037      	str	r7, [r6, #0]
   81a54:	6075      	str	r5, [r6, #4]
   81a56:	9114      	str	r1, [sp, #80]	; 0x50
   81a58:	f340 80c1 	ble.w	81bde <_vfiprintf_r+0x922>
   81a5c:	2a00      	cmp	r2, #0
   81a5e:	f040 8130 	bne.w	81cc2 <_vfiprintf_r+0xa06>
   81a62:	9214      	str	r2, [sp, #80]	; 0x50
   81a64:	464e      	mov	r6, r9
   81a66:	f01a 0f04 	tst.w	sl, #4
   81a6a:	f000 808b 	beq.w	81b84 <_vfiprintf_r+0x8c8>
   81a6e:	9d04      	ldr	r5, [sp, #16]
   81a70:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81a74:	ebcb 0405 	rsb	r4, fp, r5
   81a78:	2c00      	cmp	r4, #0
   81a7a:	f340 8083 	ble.w	81b84 <_vfiprintf_r+0x8c8>
   81a7e:	2c10      	cmp	r4, #16
   81a80:	f340 821e 	ble.w	81ec0 <_vfiprintf_r+0xc04>
   81a84:	9914      	ldr	r1, [sp, #80]	; 0x50
   81a86:	4d32      	ldr	r5, [pc, #200]	; (81b50 <_vfiprintf_r+0x894>)
   81a88:	2710      	movs	r7, #16
   81a8a:	f8dd a018 	ldr.w	sl, [sp, #24]
   81a8e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81a92:	e005      	b.n	81aa0 <_vfiprintf_r+0x7e4>
   81a94:	1c88      	adds	r0, r1, #2
   81a96:	3608      	adds	r6, #8
   81a98:	4619      	mov	r1, r3
   81a9a:	3c10      	subs	r4, #16
   81a9c:	2c10      	cmp	r4, #16
   81a9e:	dd10      	ble.n	81ac2 <_vfiprintf_r+0x806>
   81aa0:	1c4b      	adds	r3, r1, #1
   81aa2:	3210      	adds	r2, #16
   81aa4:	2b07      	cmp	r3, #7
   81aa6:	9215      	str	r2, [sp, #84]	; 0x54
   81aa8:	e886 00a0 	stmia.w	r6, {r5, r7}
   81aac:	9314      	str	r3, [sp, #80]	; 0x50
   81aae:	ddf1      	ble.n	81a94 <_vfiprintf_r+0x7d8>
   81ab0:	2a00      	cmp	r2, #0
   81ab2:	d17d      	bne.n	81bb0 <_vfiprintf_r+0x8f4>
   81ab4:	3c10      	subs	r4, #16
   81ab6:	2c10      	cmp	r4, #16
   81ab8:	f04f 0001 	mov.w	r0, #1
   81abc:	4611      	mov	r1, r2
   81abe:	464e      	mov	r6, r9
   81ac0:	dcee      	bgt.n	81aa0 <_vfiprintf_r+0x7e4>
   81ac2:	4422      	add	r2, r4
   81ac4:	2807      	cmp	r0, #7
   81ac6:	9215      	str	r2, [sp, #84]	; 0x54
   81ac8:	6035      	str	r5, [r6, #0]
   81aca:	6074      	str	r4, [r6, #4]
   81acc:	9014      	str	r0, [sp, #80]	; 0x50
   81ace:	dd59      	ble.n	81b84 <_vfiprintf_r+0x8c8>
   81ad0:	2a00      	cmp	r2, #0
   81ad2:	d14f      	bne.n	81b74 <_vfiprintf_r+0x8b8>
   81ad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81ad6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81ada:	9d04      	ldr	r5, [sp, #16]
   81adc:	45ab      	cmp	fp, r5
   81ade:	bfac      	ite	ge
   81ae0:	445c      	addge	r4, fp
   81ae2:	1964      	addlt	r4, r4, r5
   81ae4:	9409      	str	r4, [sp, #36]	; 0x24
   81ae6:	e05e      	b.n	81ba6 <_vfiprintf_r+0x8ea>
   81ae8:	4620      	mov	r0, r4
   81aea:	9902      	ldr	r1, [sp, #8]
   81aec:	aa13      	add	r2, sp, #76	; 0x4c
   81aee:	f7ff fba9 	bl	81244 <__sprint_r.part.0>
   81af2:	2800      	cmp	r0, #0
   81af4:	d135      	bne.n	81b62 <_vfiprintf_r+0x8a6>
   81af6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81af8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81afa:	f103 0c01 	add.w	ip, r3, #1
   81afe:	4648      	mov	r0, r9
   81b00:	e781      	b.n	81a06 <_vfiprintf_r+0x74a>
   81b02:	08e0      	lsrs	r0, r4, #3
   81b04:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81b08:	f004 0207 	and.w	r2, r4, #7
   81b0c:	08e9      	lsrs	r1, r5, #3
   81b0e:	3230      	adds	r2, #48	; 0x30
   81b10:	ea50 0b01 	orrs.w	fp, r0, r1
   81b14:	461f      	mov	r7, r3
   81b16:	701a      	strb	r2, [r3, #0]
   81b18:	4604      	mov	r4, r0
   81b1a:	460d      	mov	r5, r1
   81b1c:	f103 33ff 	add.w	r3, r3, #4294967295
   81b20:	d1ef      	bne.n	81b02 <_vfiprintf_r+0x846>
   81b22:	f01a 0f01 	tst.w	sl, #1
   81b26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81b2a:	4639      	mov	r1, r7
   81b2c:	f000 80b9 	beq.w	81ca2 <_vfiprintf_r+0x9e6>
   81b30:	2a30      	cmp	r2, #48	; 0x30
   81b32:	f43f acf4 	beq.w	8151e <_vfiprintf_r+0x262>
   81b36:	461f      	mov	r7, r3
   81b38:	ebc7 0509 	rsb	r5, r7, r9
   81b3c:	2330      	movs	r3, #48	; 0x30
   81b3e:	9505      	str	r5, [sp, #20]
   81b40:	f801 3c01 	strb.w	r3, [r1, #-1]
   81b44:	e4ee      	b.n	81524 <_vfiprintf_r+0x268>
   81b46:	bf00      	nop
   81b48:	00084400 	.word	0x00084400
   81b4c:	0008441c 	.word	0x0008441c
   81b50:	0008442c 	.word	0x0008442c
   81b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81b56:	b123      	cbz	r3, 81b62 <_vfiprintf_r+0x8a6>
   81b58:	9806      	ldr	r0, [sp, #24]
   81b5a:	9902      	ldr	r1, [sp, #8]
   81b5c:	aa13      	add	r2, sp, #76	; 0x4c
   81b5e:	f7ff fb71 	bl	81244 <__sprint_r.part.0>
   81b62:	9c02      	ldr	r4, [sp, #8]
   81b64:	89a3      	ldrh	r3, [r4, #12]
   81b66:	065b      	lsls	r3, r3, #25
   81b68:	f53f ac98 	bmi.w	8149c <_vfiprintf_r+0x1e0>
   81b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   81b6e:	b031      	add	sp, #196	; 0xc4
   81b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b74:	9806      	ldr	r0, [sp, #24]
   81b76:	9902      	ldr	r1, [sp, #8]
   81b78:	aa13      	add	r2, sp, #76	; 0x4c
   81b7a:	f7ff fb63 	bl	81244 <__sprint_r.part.0>
   81b7e:	2800      	cmp	r0, #0
   81b80:	d1ef      	bne.n	81b62 <_vfiprintf_r+0x8a6>
   81b82:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81b86:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b8a:	9d04      	ldr	r5, [sp, #16]
   81b8c:	45ab      	cmp	fp, r5
   81b8e:	bfac      	ite	ge
   81b90:	445c      	addge	r4, fp
   81b92:	1964      	addlt	r4, r4, r5
   81b94:	9409      	str	r4, [sp, #36]	; 0x24
   81b96:	b132      	cbz	r2, 81ba6 <_vfiprintf_r+0x8ea>
   81b98:	9806      	ldr	r0, [sp, #24]
   81b9a:	9902      	ldr	r1, [sp, #8]
   81b9c:	aa13      	add	r2, sp, #76	; 0x4c
   81b9e:	f7ff fb51 	bl	81244 <__sprint_r.part.0>
   81ba2:	2800      	cmp	r0, #0
   81ba4:	d1dd      	bne.n	81b62 <_vfiprintf_r+0x8a6>
   81ba6:	2000      	movs	r0, #0
   81ba8:	9014      	str	r0, [sp, #80]	; 0x50
   81baa:	464e      	mov	r6, r9
   81bac:	f7ff bbb9 	b.w	81322 <_vfiprintf_r+0x66>
   81bb0:	4650      	mov	r0, sl
   81bb2:	4659      	mov	r1, fp
   81bb4:	aa13      	add	r2, sp, #76	; 0x4c
   81bb6:	f7ff fb45 	bl	81244 <__sprint_r.part.0>
   81bba:	2800      	cmp	r0, #0
   81bbc:	d1d1      	bne.n	81b62 <_vfiprintf_r+0x8a6>
   81bbe:	9914      	ldr	r1, [sp, #80]	; 0x50
   81bc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bc2:	1c48      	adds	r0, r1, #1
   81bc4:	464e      	mov	r6, r9
   81bc6:	e768      	b.n	81a9a <_vfiprintf_r+0x7de>
   81bc8:	2a00      	cmp	r2, #0
   81bca:	f040 80f7 	bne.w	81dbc <_vfiprintf_r+0xb00>
   81bce:	9c05      	ldr	r4, [sp, #20]
   81bd0:	2301      	movs	r3, #1
   81bd2:	9720      	str	r7, [sp, #128]	; 0x80
   81bd4:	9421      	str	r4, [sp, #132]	; 0x84
   81bd6:	9415      	str	r4, [sp, #84]	; 0x54
   81bd8:	4622      	mov	r2, r4
   81bda:	9314      	str	r3, [sp, #80]	; 0x50
   81bdc:	464e      	mov	r6, r9
   81bde:	3608      	adds	r6, #8
   81be0:	e741      	b.n	81a66 <_vfiprintf_r+0x7aa>
   81be2:	9d04      	ldr	r5, [sp, #16]
   81be4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81be8:	ebcb 0405 	rsb	r4, fp, r5
   81bec:	2c00      	cmp	r4, #0
   81bee:	f77f aef7 	ble.w	819e0 <_vfiprintf_r+0x724>
   81bf2:	2c10      	cmp	r4, #16
   81bf4:	4da6      	ldr	r5, [pc, #664]	; (81e90 <_vfiprintf_r+0xbd4>)
   81bf6:	f340 8170 	ble.w	81eda <_vfiprintf_r+0xc1e>
   81bfa:	4629      	mov	r1, r5
   81bfc:	f04f 0b10 	mov.w	fp, #16
   81c00:	4625      	mov	r5, r4
   81c02:	4664      	mov	r4, ip
   81c04:	46b4      	mov	ip, r6
   81c06:	460e      	mov	r6, r1
   81c08:	e006      	b.n	81c18 <_vfiprintf_r+0x95c>
   81c0a:	1c98      	adds	r0, r3, #2
   81c0c:	f10c 0c08 	add.w	ip, ip, #8
   81c10:	460b      	mov	r3, r1
   81c12:	3d10      	subs	r5, #16
   81c14:	2d10      	cmp	r5, #16
   81c16:	dd0f      	ble.n	81c38 <_vfiprintf_r+0x97c>
   81c18:	1c59      	adds	r1, r3, #1
   81c1a:	3210      	adds	r2, #16
   81c1c:	2907      	cmp	r1, #7
   81c1e:	9215      	str	r2, [sp, #84]	; 0x54
   81c20:	e88c 0840 	stmia.w	ip, {r6, fp}
   81c24:	9114      	str	r1, [sp, #80]	; 0x50
   81c26:	ddf0      	ble.n	81c0a <_vfiprintf_r+0x94e>
   81c28:	b9ba      	cbnz	r2, 81c5a <_vfiprintf_r+0x99e>
   81c2a:	3d10      	subs	r5, #16
   81c2c:	2d10      	cmp	r5, #16
   81c2e:	f04f 0001 	mov.w	r0, #1
   81c32:	4613      	mov	r3, r2
   81c34:	46cc      	mov	ip, r9
   81c36:	dcef      	bgt.n	81c18 <_vfiprintf_r+0x95c>
   81c38:	4633      	mov	r3, r6
   81c3a:	4666      	mov	r6, ip
   81c3c:	46a4      	mov	ip, r4
   81c3e:	462c      	mov	r4, r5
   81c40:	461d      	mov	r5, r3
   81c42:	4422      	add	r2, r4
   81c44:	2807      	cmp	r0, #7
   81c46:	9215      	str	r2, [sp, #84]	; 0x54
   81c48:	6035      	str	r5, [r6, #0]
   81c4a:	6074      	str	r4, [r6, #4]
   81c4c:	9014      	str	r0, [sp, #80]	; 0x50
   81c4e:	f300 80af 	bgt.w	81db0 <_vfiprintf_r+0xaf4>
   81c52:	3608      	adds	r6, #8
   81c54:	1c41      	adds	r1, r0, #1
   81c56:	4603      	mov	r3, r0
   81c58:	e6c2      	b.n	819e0 <_vfiprintf_r+0x724>
   81c5a:	9806      	ldr	r0, [sp, #24]
   81c5c:	9902      	ldr	r1, [sp, #8]
   81c5e:	aa13      	add	r2, sp, #76	; 0x4c
   81c60:	f7ff faf0 	bl	81244 <__sprint_r.part.0>
   81c64:	2800      	cmp	r0, #0
   81c66:	f47f af7c 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81c6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c6e:	1c58      	adds	r0, r3, #1
   81c70:	46cc      	mov	ip, r9
   81c72:	e7ce      	b.n	81c12 <_vfiprintf_r+0x956>
   81c74:	2a00      	cmp	r2, #0
   81c76:	d179      	bne.n	81d6c <_vfiprintf_r+0xab0>
   81c78:	4619      	mov	r1, r3
   81c7a:	464e      	mov	r6, r9
   81c7c:	4613      	mov	r3, r2
   81c7e:	e69c      	b.n	819ba <_vfiprintf_r+0x6fe>
   81c80:	2a00      	cmp	r2, #0
   81c82:	f040 8084 	bne.w	81d8e <_vfiprintf_r+0xad2>
   81c86:	2101      	movs	r1, #1
   81c88:	4613      	mov	r3, r2
   81c8a:	464e      	mov	r6, r9
   81c8c:	e6a4      	b.n	819d8 <_vfiprintf_r+0x71c>
   81c8e:	464f      	mov	r7, r9
   81c90:	e448      	b.n	81524 <_vfiprintf_r+0x268>
   81c92:	2d00      	cmp	r5, #0
   81c94:	bf08      	it	eq
   81c96:	2c0a      	cmpeq	r4, #10
   81c98:	d246      	bcs.n	81d28 <_vfiprintf_r+0xa6c>
   81c9a:	3430      	adds	r4, #48	; 0x30
   81c9c:	af30      	add	r7, sp, #192	; 0xc0
   81c9e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81ca2:	ebc7 0309 	rsb	r3, r7, r9
   81ca6:	9305      	str	r3, [sp, #20]
   81ca8:	e43c      	b.n	81524 <_vfiprintf_r+0x268>
   81caa:	2302      	movs	r3, #2
   81cac:	e417      	b.n	814de <_vfiprintf_r+0x222>
   81cae:	2a00      	cmp	r2, #0
   81cb0:	f040 80af 	bne.w	81e12 <_vfiprintf_r+0xb56>
   81cb4:	4613      	mov	r3, r2
   81cb6:	2101      	movs	r1, #1
   81cb8:	464e      	mov	r6, r9
   81cba:	e66d      	b.n	81998 <_vfiprintf_r+0x6dc>
   81cbc:	4644      	mov	r4, r8
   81cbe:	f7ff bb58 	b.w	81372 <_vfiprintf_r+0xb6>
   81cc2:	9806      	ldr	r0, [sp, #24]
   81cc4:	9902      	ldr	r1, [sp, #8]
   81cc6:	aa13      	add	r2, sp, #76	; 0x4c
   81cc8:	f7ff fabc 	bl	81244 <__sprint_r.part.0>
   81ccc:	2800      	cmp	r0, #0
   81cce:	f47f af48 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81cd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cd4:	464e      	mov	r6, r9
   81cd6:	e6c6      	b.n	81a66 <_vfiprintf_r+0x7aa>
   81cd8:	9d08      	ldr	r5, [sp, #32]
   81cda:	682c      	ldr	r4, [r5, #0]
   81cdc:	3504      	adds	r5, #4
   81cde:	9508      	str	r5, [sp, #32]
   81ce0:	2500      	movs	r5, #0
   81ce2:	f7ff bbfc 	b.w	814de <_vfiprintf_r+0x222>
   81ce6:	9d08      	ldr	r5, [sp, #32]
   81ce8:	2301      	movs	r3, #1
   81cea:	682c      	ldr	r4, [r5, #0]
   81cec:	3504      	adds	r5, #4
   81cee:	9508      	str	r5, [sp, #32]
   81cf0:	2500      	movs	r5, #0
   81cf2:	f7ff bbf4 	b.w	814de <_vfiprintf_r+0x222>
   81cf6:	9d08      	ldr	r5, [sp, #32]
   81cf8:	682c      	ldr	r4, [r5, #0]
   81cfa:	3504      	adds	r5, #4
   81cfc:	9508      	str	r5, [sp, #32]
   81cfe:	2500      	movs	r5, #0
   81d00:	e525      	b.n	8174e <_vfiprintf_r+0x492>
   81d02:	9d08      	ldr	r5, [sp, #32]
   81d04:	682c      	ldr	r4, [r5, #0]
   81d06:	3504      	adds	r5, #4
   81d08:	9508      	str	r5, [sp, #32]
   81d0a:	17e5      	asrs	r5, r4, #31
   81d0c:	4622      	mov	r2, r4
   81d0e:	462b      	mov	r3, r5
   81d10:	e48e      	b.n	81630 <_vfiprintf_r+0x374>
   81d12:	9806      	ldr	r0, [sp, #24]
   81d14:	9902      	ldr	r1, [sp, #8]
   81d16:	aa13      	add	r2, sp, #76	; 0x4c
   81d18:	f7ff fa94 	bl	81244 <__sprint_r.part.0>
   81d1c:	2800      	cmp	r0, #0
   81d1e:	f47f af20 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81d22:	464e      	mov	r6, r9
   81d24:	f7ff bb9a 	b.w	8145c <_vfiprintf_r+0x1a0>
   81d28:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81d2c:	9603      	str	r6, [sp, #12]
   81d2e:	465e      	mov	r6, fp
   81d30:	46e3      	mov	fp, ip
   81d32:	4620      	mov	r0, r4
   81d34:	4629      	mov	r1, r5
   81d36:	220a      	movs	r2, #10
   81d38:	2300      	movs	r3, #0
   81d3a:	f001 fe2f 	bl	8399c <__aeabi_uldivmod>
   81d3e:	3230      	adds	r2, #48	; 0x30
   81d40:	7032      	strb	r2, [r6, #0]
   81d42:	4620      	mov	r0, r4
   81d44:	4629      	mov	r1, r5
   81d46:	220a      	movs	r2, #10
   81d48:	2300      	movs	r3, #0
   81d4a:	f001 fe27 	bl	8399c <__aeabi_uldivmod>
   81d4e:	4604      	mov	r4, r0
   81d50:	460d      	mov	r5, r1
   81d52:	ea54 0005 	orrs.w	r0, r4, r5
   81d56:	4637      	mov	r7, r6
   81d58:	f106 36ff 	add.w	r6, r6, #4294967295
   81d5c:	d1e9      	bne.n	81d32 <_vfiprintf_r+0xa76>
   81d5e:	ebc7 0309 	rsb	r3, r7, r9
   81d62:	46dc      	mov	ip, fp
   81d64:	9e03      	ldr	r6, [sp, #12]
   81d66:	9305      	str	r3, [sp, #20]
   81d68:	f7ff bbdc 	b.w	81524 <_vfiprintf_r+0x268>
   81d6c:	9806      	ldr	r0, [sp, #24]
   81d6e:	9902      	ldr	r1, [sp, #8]
   81d70:	aa13      	add	r2, sp, #76	; 0x4c
   81d72:	f8cd c004 	str.w	ip, [sp, #4]
   81d76:	f7ff fa65 	bl	81244 <__sprint_r.part.0>
   81d7a:	f8dd c004 	ldr.w	ip, [sp, #4]
   81d7e:	2800      	cmp	r0, #0
   81d80:	f47f aeef 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d88:	1c59      	adds	r1, r3, #1
   81d8a:	464e      	mov	r6, r9
   81d8c:	e615      	b.n	819ba <_vfiprintf_r+0x6fe>
   81d8e:	9806      	ldr	r0, [sp, #24]
   81d90:	9902      	ldr	r1, [sp, #8]
   81d92:	aa13      	add	r2, sp, #76	; 0x4c
   81d94:	f8cd c004 	str.w	ip, [sp, #4]
   81d98:	f7ff fa54 	bl	81244 <__sprint_r.part.0>
   81d9c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81da0:	2800      	cmp	r0, #0
   81da2:	f47f aede 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81da8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81daa:	1c59      	adds	r1, r3, #1
   81dac:	464e      	mov	r6, r9
   81dae:	e613      	b.n	819d8 <_vfiprintf_r+0x71c>
   81db0:	2a00      	cmp	r2, #0
   81db2:	d156      	bne.n	81e62 <_vfiprintf_r+0xba6>
   81db4:	2101      	movs	r1, #1
   81db6:	4613      	mov	r3, r2
   81db8:	464e      	mov	r6, r9
   81dba:	e611      	b.n	819e0 <_vfiprintf_r+0x724>
   81dbc:	9806      	ldr	r0, [sp, #24]
   81dbe:	9902      	ldr	r1, [sp, #8]
   81dc0:	aa13      	add	r2, sp, #76	; 0x4c
   81dc2:	f7ff fa3f 	bl	81244 <__sprint_r.part.0>
   81dc6:	2800      	cmp	r0, #0
   81dc8:	f47f aecb 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81dcc:	9914      	ldr	r1, [sp, #80]	; 0x50
   81dce:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dd0:	3101      	adds	r1, #1
   81dd2:	464e      	mov	r6, r9
   81dd4:	e639      	b.n	81a4a <_vfiprintf_r+0x78e>
   81dd6:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81dda:	4264      	negs	r4, r4
   81ddc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81de0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81de4:	f8cd b01c 	str.w	fp, [sp, #28]
   81de8:	f8cd c014 	str.w	ip, [sp, #20]
   81dec:	2301      	movs	r3, #1
   81dee:	f7ff bb7e 	b.w	814ee <_vfiprintf_r+0x232>
   81df2:	f01a 0f10 	tst.w	sl, #16
   81df6:	d11d      	bne.n	81e34 <_vfiprintf_r+0xb78>
   81df8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81dfc:	d058      	beq.n	81eb0 <_vfiprintf_r+0xbf4>
   81dfe:	9d08      	ldr	r5, [sp, #32]
   81e00:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81e04:	682b      	ldr	r3, [r5, #0]
   81e06:	3504      	adds	r5, #4
   81e08:	9508      	str	r5, [sp, #32]
   81e0a:	f8a3 b000 	strh.w	fp, [r3]
   81e0e:	f7ff ba88 	b.w	81322 <_vfiprintf_r+0x66>
   81e12:	9806      	ldr	r0, [sp, #24]
   81e14:	9902      	ldr	r1, [sp, #8]
   81e16:	aa13      	add	r2, sp, #76	; 0x4c
   81e18:	f8cd c004 	str.w	ip, [sp, #4]
   81e1c:	f7ff fa12 	bl	81244 <__sprint_r.part.0>
   81e20:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e24:	2800      	cmp	r0, #0
   81e26:	f47f ae9c 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e2e:	1c59      	adds	r1, r3, #1
   81e30:	464e      	mov	r6, r9
   81e32:	e5b1      	b.n	81998 <_vfiprintf_r+0x6dc>
   81e34:	f8dd b020 	ldr.w	fp, [sp, #32]
   81e38:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81e3a:	f8db 3000 	ldr.w	r3, [fp]
   81e3e:	f10b 0b04 	add.w	fp, fp, #4
   81e42:	f8cd b020 	str.w	fp, [sp, #32]
   81e46:	601c      	str	r4, [r3, #0]
   81e48:	f7ff ba6b 	b.w	81322 <_vfiprintf_r+0x66>
   81e4c:	9408      	str	r4, [sp, #32]
   81e4e:	f7ff f9c9 	bl	811e4 <strlen>
   81e52:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81e56:	9005      	str	r0, [sp, #20]
   81e58:	9407      	str	r4, [sp, #28]
   81e5a:	f04f 0c00 	mov.w	ip, #0
   81e5e:	f7ff bb61 	b.w	81524 <_vfiprintf_r+0x268>
   81e62:	9806      	ldr	r0, [sp, #24]
   81e64:	9902      	ldr	r1, [sp, #8]
   81e66:	aa13      	add	r2, sp, #76	; 0x4c
   81e68:	f8cd c004 	str.w	ip, [sp, #4]
   81e6c:	f7ff f9ea 	bl	81244 <__sprint_r.part.0>
   81e70:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e74:	2800      	cmp	r0, #0
   81e76:	f47f ae74 	bne.w	81b62 <_vfiprintf_r+0x8a6>
   81e7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e7e:	1c59      	adds	r1, r3, #1
   81e80:	464e      	mov	r6, r9
   81e82:	e5ad      	b.n	819e0 <_vfiprintf_r+0x724>
   81e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e88:	3301      	adds	r3, #1
   81e8a:	4d02      	ldr	r5, [pc, #8]	; (81e94 <_vfiprintf_r+0xbd8>)
   81e8c:	f7ff bb9a 	b.w	815c4 <_vfiprintf_r+0x308>
   81e90:	0008441c 	.word	0x0008441c
   81e94:	0008442c 	.word	0x0008442c
   81e98:	f1bc 0f06 	cmp.w	ip, #6
   81e9c:	bf34      	ite	cc
   81e9e:	4663      	movcc	r3, ip
   81ea0:	2306      	movcs	r3, #6
   81ea2:	9408      	str	r4, [sp, #32]
   81ea4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81ea8:	9305      	str	r3, [sp, #20]
   81eaa:	9403      	str	r4, [sp, #12]
   81eac:	4f16      	ldr	r7, [pc, #88]	; (81f08 <_vfiprintf_r+0xc4c>)
   81eae:	e472      	b.n	81796 <_vfiprintf_r+0x4da>
   81eb0:	9c08      	ldr	r4, [sp, #32]
   81eb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81eb4:	6823      	ldr	r3, [r4, #0]
   81eb6:	3404      	adds	r4, #4
   81eb8:	9408      	str	r4, [sp, #32]
   81eba:	601d      	str	r5, [r3, #0]
   81ebc:	f7ff ba31 	b.w	81322 <_vfiprintf_r+0x66>
   81ec0:	9814      	ldr	r0, [sp, #80]	; 0x50
   81ec2:	4d12      	ldr	r5, [pc, #72]	; (81f0c <_vfiprintf_r+0xc50>)
   81ec4:	3001      	adds	r0, #1
   81ec6:	e5fc      	b.n	81ac2 <_vfiprintf_r+0x806>
   81ec8:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81ecc:	f8cd c014 	str.w	ip, [sp, #20]
   81ed0:	9507      	str	r5, [sp, #28]
   81ed2:	9408      	str	r4, [sp, #32]
   81ed4:	4684      	mov	ip, r0
   81ed6:	f7ff bb25 	b.w	81524 <_vfiprintf_r+0x268>
   81eda:	4608      	mov	r0, r1
   81edc:	e6b1      	b.n	81c42 <_vfiprintf_r+0x986>
   81ede:	46a0      	mov	r8, r4
   81ee0:	2500      	movs	r5, #0
   81ee2:	f7ff ba5a 	b.w	8139a <_vfiprintf_r+0xde>
   81ee6:	f8dd b020 	ldr.w	fp, [sp, #32]
   81eea:	f898 3001 	ldrb.w	r3, [r8, #1]
   81eee:	f8db 5000 	ldr.w	r5, [fp]
   81ef2:	f10b 0204 	add.w	r2, fp, #4
   81ef6:	2d00      	cmp	r5, #0
   81ef8:	9208      	str	r2, [sp, #32]
   81efa:	46a0      	mov	r8, r4
   81efc:	f6bf aa4b 	bge.w	81396 <_vfiprintf_r+0xda>
   81f00:	f04f 35ff 	mov.w	r5, #4294967295
   81f04:	f7ff ba47 	b.w	81396 <_vfiprintf_r+0xda>
   81f08:	00084414 	.word	0x00084414
   81f0c:	0008442c 	.word	0x0008442c

00081f10 <__sbprintf>:
   81f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f14:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81f16:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81f1a:	4688      	mov	r8, r1
   81f1c:	9719      	str	r7, [sp, #100]	; 0x64
   81f1e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81f22:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81f26:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81f2a:	9707      	str	r7, [sp, #28]
   81f2c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81f30:	ac1a      	add	r4, sp, #104	; 0x68
   81f32:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81f36:	f02a 0a02 	bic.w	sl, sl, #2
   81f3a:	2600      	movs	r6, #0
   81f3c:	4669      	mov	r1, sp
   81f3e:	9400      	str	r4, [sp, #0]
   81f40:	9404      	str	r4, [sp, #16]
   81f42:	9502      	str	r5, [sp, #8]
   81f44:	9505      	str	r5, [sp, #20]
   81f46:	f8ad a00c 	strh.w	sl, [sp, #12]
   81f4a:	f8ad 900e 	strh.w	r9, [sp, #14]
   81f4e:	9709      	str	r7, [sp, #36]	; 0x24
   81f50:	9606      	str	r6, [sp, #24]
   81f52:	4605      	mov	r5, r0
   81f54:	f7ff f9b2 	bl	812bc <_vfiprintf_r>
   81f58:	1e04      	subs	r4, r0, #0
   81f5a:	db07      	blt.n	81f6c <__sbprintf+0x5c>
   81f5c:	4628      	mov	r0, r5
   81f5e:	4669      	mov	r1, sp
   81f60:	f000 f92a 	bl	821b8 <_fflush_r>
   81f64:	42b0      	cmp	r0, r6
   81f66:	bf18      	it	ne
   81f68:	f04f 34ff 	movne.w	r4, #4294967295
   81f6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81f70:	065b      	lsls	r3, r3, #25
   81f72:	d505      	bpl.n	81f80 <__sbprintf+0x70>
   81f74:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f7c:	f8a8 300c 	strh.w	r3, [r8, #12]
   81f80:	4620      	mov	r0, r4
   81f82:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f8a:	bf00      	nop

00081f8c <__swsetup_r>:
   81f8c:	4b2f      	ldr	r3, [pc, #188]	; (8204c <__swsetup_r+0xc0>)
   81f8e:	b570      	push	{r4, r5, r6, lr}
   81f90:	4606      	mov	r6, r0
   81f92:	6818      	ldr	r0, [r3, #0]
   81f94:	460c      	mov	r4, r1
   81f96:	b110      	cbz	r0, 81f9e <__swsetup_r+0x12>
   81f98:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81f9a:	2a00      	cmp	r2, #0
   81f9c:	d036      	beq.n	8200c <__swsetup_r+0x80>
   81f9e:	89a5      	ldrh	r5, [r4, #12]
   81fa0:	b2ab      	uxth	r3, r5
   81fa2:	0719      	lsls	r1, r3, #28
   81fa4:	d50c      	bpl.n	81fc0 <__swsetup_r+0x34>
   81fa6:	6922      	ldr	r2, [r4, #16]
   81fa8:	b1aa      	cbz	r2, 81fd6 <__swsetup_r+0x4a>
   81faa:	f013 0101 	ands.w	r1, r3, #1
   81fae:	d01e      	beq.n	81fee <__swsetup_r+0x62>
   81fb0:	6963      	ldr	r3, [r4, #20]
   81fb2:	2100      	movs	r1, #0
   81fb4:	425b      	negs	r3, r3
   81fb6:	61a3      	str	r3, [r4, #24]
   81fb8:	60a1      	str	r1, [r4, #8]
   81fba:	b1f2      	cbz	r2, 81ffa <__swsetup_r+0x6e>
   81fbc:	2000      	movs	r0, #0
   81fbe:	bd70      	pop	{r4, r5, r6, pc}
   81fc0:	06da      	lsls	r2, r3, #27
   81fc2:	d53a      	bpl.n	8203a <__swsetup_r+0xae>
   81fc4:	075b      	lsls	r3, r3, #29
   81fc6:	d424      	bmi.n	82012 <__swsetup_r+0x86>
   81fc8:	6922      	ldr	r2, [r4, #16]
   81fca:	f045 0308 	orr.w	r3, r5, #8
   81fce:	81a3      	strh	r3, [r4, #12]
   81fd0:	b29b      	uxth	r3, r3
   81fd2:	2a00      	cmp	r2, #0
   81fd4:	d1e9      	bne.n	81faa <__swsetup_r+0x1e>
   81fd6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81fda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81fde:	d0e4      	beq.n	81faa <__swsetup_r+0x1e>
   81fe0:	4630      	mov	r0, r6
   81fe2:	4621      	mov	r1, r4
   81fe4:	f000 fcce 	bl	82984 <__smakebuf_r>
   81fe8:	89a3      	ldrh	r3, [r4, #12]
   81fea:	6922      	ldr	r2, [r4, #16]
   81fec:	e7dd      	b.n	81faa <__swsetup_r+0x1e>
   81fee:	0798      	lsls	r0, r3, #30
   81ff0:	bf58      	it	pl
   81ff2:	6961      	ldrpl	r1, [r4, #20]
   81ff4:	60a1      	str	r1, [r4, #8]
   81ff6:	2a00      	cmp	r2, #0
   81ff8:	d1e0      	bne.n	81fbc <__swsetup_r+0x30>
   81ffa:	89a3      	ldrh	r3, [r4, #12]
   81ffc:	061a      	lsls	r2, r3, #24
   81ffe:	d5dd      	bpl.n	81fbc <__swsetup_r+0x30>
   82000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82004:	81a3      	strh	r3, [r4, #12]
   82006:	f04f 30ff 	mov.w	r0, #4294967295
   8200a:	bd70      	pop	{r4, r5, r6, pc}
   8200c:	f000 f8f0 	bl	821f0 <__sinit>
   82010:	e7c5      	b.n	81f9e <__swsetup_r+0x12>
   82012:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82014:	b149      	cbz	r1, 8202a <__swsetup_r+0x9e>
   82016:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8201a:	4299      	cmp	r1, r3
   8201c:	d003      	beq.n	82026 <__swsetup_r+0x9a>
   8201e:	4630      	mov	r0, r6
   82020:	f000 fa2a 	bl	82478 <_free_r>
   82024:	89a5      	ldrh	r5, [r4, #12]
   82026:	2300      	movs	r3, #0
   82028:	6323      	str	r3, [r4, #48]	; 0x30
   8202a:	6922      	ldr	r2, [r4, #16]
   8202c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82030:	2100      	movs	r1, #0
   82032:	b2ad      	uxth	r5, r5
   82034:	6022      	str	r2, [r4, #0]
   82036:	6061      	str	r1, [r4, #4]
   82038:	e7c7      	b.n	81fca <__swsetup_r+0x3e>
   8203a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8203e:	2309      	movs	r3, #9
   82040:	6033      	str	r3, [r6, #0]
   82042:	f04f 30ff 	mov.w	r0, #4294967295
   82046:	81a5      	strh	r5, [r4, #12]
   82048:	bd70      	pop	{r4, r5, r6, pc}
   8204a:	bf00      	nop
   8204c:	20070558 	.word	0x20070558

00082050 <register_fini>:
   82050:	4b02      	ldr	r3, [pc, #8]	; (8205c <register_fini+0xc>)
   82052:	b113      	cbz	r3, 8205a <register_fini+0xa>
   82054:	4802      	ldr	r0, [pc, #8]	; (82060 <register_fini+0x10>)
   82056:	f000 b805 	b.w	82064 <atexit>
   8205a:	4770      	bx	lr
   8205c:	00000000 	.word	0x00000000
   82060:	000822ed 	.word	0x000822ed

00082064 <atexit>:
   82064:	4601      	mov	r1, r0
   82066:	2000      	movs	r0, #0
   82068:	4602      	mov	r2, r0
   8206a:	4603      	mov	r3, r0
   8206c:	f001 bb9a 	b.w	837a4 <__register_exitproc>

00082070 <__sflush_r>:
   82070:	898b      	ldrh	r3, [r1, #12]
   82072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82076:	b29a      	uxth	r2, r3
   82078:	460d      	mov	r5, r1
   8207a:	0711      	lsls	r1, r2, #28
   8207c:	4680      	mov	r8, r0
   8207e:	d43c      	bmi.n	820fa <__sflush_r+0x8a>
   82080:	686a      	ldr	r2, [r5, #4]
   82082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82086:	2a00      	cmp	r2, #0
   82088:	81ab      	strh	r3, [r5, #12]
   8208a:	dd59      	ble.n	82140 <__sflush_r+0xd0>
   8208c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8208e:	2c00      	cmp	r4, #0
   82090:	d04b      	beq.n	8212a <__sflush_r+0xba>
   82092:	b29b      	uxth	r3, r3
   82094:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82098:	2100      	movs	r1, #0
   8209a:	b292      	uxth	r2, r2
   8209c:	f8d8 6000 	ldr.w	r6, [r8]
   820a0:	f8c8 1000 	str.w	r1, [r8]
   820a4:	2a00      	cmp	r2, #0
   820a6:	d04f      	beq.n	82148 <__sflush_r+0xd8>
   820a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   820aa:	075f      	lsls	r7, r3, #29
   820ac:	d505      	bpl.n	820ba <__sflush_r+0x4a>
   820ae:	6869      	ldr	r1, [r5, #4]
   820b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   820b2:	1a52      	subs	r2, r2, r1
   820b4:	b10b      	cbz	r3, 820ba <__sflush_r+0x4a>
   820b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   820b8:	1ad2      	subs	r2, r2, r3
   820ba:	4640      	mov	r0, r8
   820bc:	69e9      	ldr	r1, [r5, #28]
   820be:	2300      	movs	r3, #0
   820c0:	47a0      	blx	r4
   820c2:	1c44      	adds	r4, r0, #1
   820c4:	d04a      	beq.n	8215c <__sflush_r+0xec>
   820c6:	89ab      	ldrh	r3, [r5, #12]
   820c8:	692a      	ldr	r2, [r5, #16]
   820ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   820ce:	b29b      	uxth	r3, r3
   820d0:	2100      	movs	r1, #0
   820d2:	602a      	str	r2, [r5, #0]
   820d4:	04da      	lsls	r2, r3, #19
   820d6:	81ab      	strh	r3, [r5, #12]
   820d8:	6069      	str	r1, [r5, #4]
   820da:	d44c      	bmi.n	82176 <__sflush_r+0x106>
   820dc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   820de:	f8c8 6000 	str.w	r6, [r8]
   820e2:	b311      	cbz	r1, 8212a <__sflush_r+0xba>
   820e4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   820e8:	4299      	cmp	r1, r3
   820ea:	d002      	beq.n	820f2 <__sflush_r+0x82>
   820ec:	4640      	mov	r0, r8
   820ee:	f000 f9c3 	bl	82478 <_free_r>
   820f2:	2000      	movs	r0, #0
   820f4:	6328      	str	r0, [r5, #48]	; 0x30
   820f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820fa:	692e      	ldr	r6, [r5, #16]
   820fc:	b1ae      	cbz	r6, 8212a <__sflush_r+0xba>
   820fe:	0791      	lsls	r1, r2, #30
   82100:	682c      	ldr	r4, [r5, #0]
   82102:	bf0c      	ite	eq
   82104:	696b      	ldreq	r3, [r5, #20]
   82106:	2300      	movne	r3, #0
   82108:	602e      	str	r6, [r5, #0]
   8210a:	1ba4      	subs	r4, r4, r6
   8210c:	60ab      	str	r3, [r5, #8]
   8210e:	e00a      	b.n	82126 <__sflush_r+0xb6>
   82110:	4632      	mov	r2, r6
   82112:	4623      	mov	r3, r4
   82114:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82116:	4640      	mov	r0, r8
   82118:	69e9      	ldr	r1, [r5, #28]
   8211a:	47b8      	blx	r7
   8211c:	2800      	cmp	r0, #0
   8211e:	ebc0 0404 	rsb	r4, r0, r4
   82122:	4406      	add	r6, r0
   82124:	dd04      	ble.n	82130 <__sflush_r+0xc0>
   82126:	2c00      	cmp	r4, #0
   82128:	dcf2      	bgt.n	82110 <__sflush_r+0xa0>
   8212a:	2000      	movs	r0, #0
   8212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82130:	89ab      	ldrh	r3, [r5, #12]
   82132:	f04f 30ff 	mov.w	r0, #4294967295
   82136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8213a:	81ab      	strh	r3, [r5, #12]
   8213c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82140:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82142:	2a00      	cmp	r2, #0
   82144:	dca2      	bgt.n	8208c <__sflush_r+0x1c>
   82146:	e7f0      	b.n	8212a <__sflush_r+0xba>
   82148:	2301      	movs	r3, #1
   8214a:	4640      	mov	r0, r8
   8214c:	69e9      	ldr	r1, [r5, #28]
   8214e:	47a0      	blx	r4
   82150:	1c43      	adds	r3, r0, #1
   82152:	4602      	mov	r2, r0
   82154:	d01e      	beq.n	82194 <__sflush_r+0x124>
   82156:	89ab      	ldrh	r3, [r5, #12]
   82158:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8215a:	e7a6      	b.n	820aa <__sflush_r+0x3a>
   8215c:	f8d8 3000 	ldr.w	r3, [r8]
   82160:	b95b      	cbnz	r3, 8217a <__sflush_r+0x10a>
   82162:	89aa      	ldrh	r2, [r5, #12]
   82164:	6929      	ldr	r1, [r5, #16]
   82166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8216a:	b292      	uxth	r2, r2
   8216c:	606b      	str	r3, [r5, #4]
   8216e:	04d3      	lsls	r3, r2, #19
   82170:	81aa      	strh	r2, [r5, #12]
   82172:	6029      	str	r1, [r5, #0]
   82174:	d5b2      	bpl.n	820dc <__sflush_r+0x6c>
   82176:	6528      	str	r0, [r5, #80]	; 0x50
   82178:	e7b0      	b.n	820dc <__sflush_r+0x6c>
   8217a:	2b1d      	cmp	r3, #29
   8217c:	d001      	beq.n	82182 <__sflush_r+0x112>
   8217e:	2b16      	cmp	r3, #22
   82180:	d113      	bne.n	821aa <__sflush_r+0x13a>
   82182:	89a9      	ldrh	r1, [r5, #12]
   82184:	692b      	ldr	r3, [r5, #16]
   82186:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   8218a:	2200      	movs	r2, #0
   8218c:	81a9      	strh	r1, [r5, #12]
   8218e:	602b      	str	r3, [r5, #0]
   82190:	606a      	str	r2, [r5, #4]
   82192:	e7a3      	b.n	820dc <__sflush_r+0x6c>
   82194:	f8d8 3000 	ldr.w	r3, [r8]
   82198:	2b00      	cmp	r3, #0
   8219a:	d0dc      	beq.n	82156 <__sflush_r+0xe6>
   8219c:	2b1d      	cmp	r3, #29
   8219e:	d001      	beq.n	821a4 <__sflush_r+0x134>
   821a0:	2b16      	cmp	r3, #22
   821a2:	d1c5      	bne.n	82130 <__sflush_r+0xc0>
   821a4:	f8c8 6000 	str.w	r6, [r8]
   821a8:	e7bf      	b.n	8212a <__sflush_r+0xba>
   821aa:	89ab      	ldrh	r3, [r5, #12]
   821ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821b0:	81ab      	strh	r3, [r5, #12]
   821b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b6:	bf00      	nop

000821b8 <_fflush_r>:
   821b8:	b510      	push	{r4, lr}
   821ba:	4604      	mov	r4, r0
   821bc:	b082      	sub	sp, #8
   821be:	b108      	cbz	r0, 821c4 <_fflush_r+0xc>
   821c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821c2:	b153      	cbz	r3, 821da <_fflush_r+0x22>
   821c4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   821c8:	b908      	cbnz	r0, 821ce <_fflush_r+0x16>
   821ca:	b002      	add	sp, #8
   821cc:	bd10      	pop	{r4, pc}
   821ce:	4620      	mov	r0, r4
   821d0:	b002      	add	sp, #8
   821d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   821d6:	f7ff bf4b 	b.w	82070 <__sflush_r>
   821da:	9101      	str	r1, [sp, #4]
   821dc:	f000 f808 	bl	821f0 <__sinit>
   821e0:	9901      	ldr	r1, [sp, #4]
   821e2:	e7ef      	b.n	821c4 <_fflush_r+0xc>

000821e4 <_cleanup_r>:
   821e4:	4901      	ldr	r1, [pc, #4]	; (821ec <_cleanup_r+0x8>)
   821e6:	f000 bb9f 	b.w	82928 <_fwalk>
   821ea:	bf00      	nop
   821ec:	000838f1 	.word	0x000838f1

000821f0 <__sinit>:
   821f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821f4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   821f6:	b083      	sub	sp, #12
   821f8:	4607      	mov	r7, r0
   821fa:	2c00      	cmp	r4, #0
   821fc:	d165      	bne.n	822ca <__sinit+0xda>
   821fe:	687d      	ldr	r5, [r7, #4]
   82200:	4833      	ldr	r0, [pc, #204]	; (822d0 <__sinit+0xe0>)
   82202:	2304      	movs	r3, #4
   82204:	2103      	movs	r1, #3
   82206:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8220a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8220c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82210:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82214:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82218:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8221c:	81ab      	strh	r3, [r5, #12]
   8221e:	602c      	str	r4, [r5, #0]
   82220:	606c      	str	r4, [r5, #4]
   82222:	60ac      	str	r4, [r5, #8]
   82224:	666c      	str	r4, [r5, #100]	; 0x64
   82226:	81ec      	strh	r4, [r5, #14]
   82228:	612c      	str	r4, [r5, #16]
   8222a:	616c      	str	r4, [r5, #20]
   8222c:	61ac      	str	r4, [r5, #24]
   8222e:	4621      	mov	r1, r4
   82230:	2208      	movs	r2, #8
   82232:	f7fe ff05 	bl	81040 <memset>
   82236:	f8df b09c 	ldr.w	fp, [pc, #156]	; 822d4 <__sinit+0xe4>
   8223a:	68be      	ldr	r6, [r7, #8]
   8223c:	f8df a098 	ldr.w	sl, [pc, #152]	; 822d8 <__sinit+0xe8>
   82240:	f8df 9098 	ldr.w	r9, [pc, #152]	; 822dc <__sinit+0xec>
   82244:	f8df 8098 	ldr.w	r8, [pc, #152]	; 822e0 <__sinit+0xf0>
   82248:	2301      	movs	r3, #1
   8224a:	2209      	movs	r2, #9
   8224c:	61ed      	str	r5, [r5, #28]
   8224e:	f8c5 b020 	str.w	fp, [r5, #32]
   82252:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82256:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8225a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8225e:	4621      	mov	r1, r4
   82260:	81f3      	strh	r3, [r6, #14]
   82262:	81b2      	strh	r2, [r6, #12]
   82264:	6034      	str	r4, [r6, #0]
   82266:	6074      	str	r4, [r6, #4]
   82268:	60b4      	str	r4, [r6, #8]
   8226a:	6674      	str	r4, [r6, #100]	; 0x64
   8226c:	6134      	str	r4, [r6, #16]
   8226e:	6174      	str	r4, [r6, #20]
   82270:	61b4      	str	r4, [r6, #24]
   82272:	2208      	movs	r2, #8
   82274:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82278:	9301      	str	r3, [sp, #4]
   8227a:	f7fe fee1 	bl	81040 <memset>
   8227e:	68fd      	ldr	r5, [r7, #12]
   82280:	2012      	movs	r0, #18
   82282:	2202      	movs	r2, #2
   82284:	61f6      	str	r6, [r6, #28]
   82286:	f8c6 b020 	str.w	fp, [r6, #32]
   8228a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8228e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82292:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82296:	4621      	mov	r1, r4
   82298:	81a8      	strh	r0, [r5, #12]
   8229a:	81ea      	strh	r2, [r5, #14]
   8229c:	602c      	str	r4, [r5, #0]
   8229e:	606c      	str	r4, [r5, #4]
   822a0:	60ac      	str	r4, [r5, #8]
   822a2:	666c      	str	r4, [r5, #100]	; 0x64
   822a4:	612c      	str	r4, [r5, #16]
   822a6:	616c      	str	r4, [r5, #20]
   822a8:	61ac      	str	r4, [r5, #24]
   822aa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   822ae:	2208      	movs	r2, #8
   822b0:	f7fe fec6 	bl	81040 <memset>
   822b4:	9b01      	ldr	r3, [sp, #4]
   822b6:	61ed      	str	r5, [r5, #28]
   822b8:	f8c5 b020 	str.w	fp, [r5, #32]
   822bc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   822c0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   822c4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   822c8:	63bb      	str	r3, [r7, #56]	; 0x38
   822ca:	b003      	add	sp, #12
   822cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822d0:	000821e5 	.word	0x000821e5
   822d4:	000835e5 	.word	0x000835e5
   822d8:	00083609 	.word	0x00083609
   822dc:	00083641 	.word	0x00083641
   822e0:	00083661 	.word	0x00083661

000822e4 <__sfp_lock_acquire>:
   822e4:	4770      	bx	lr
   822e6:	bf00      	nop

000822e8 <__sfp_lock_release>:
   822e8:	4770      	bx	lr
   822ea:	bf00      	nop

000822ec <__libc_fini_array>:
   822ec:	b538      	push	{r3, r4, r5, lr}
   822ee:	4d09      	ldr	r5, [pc, #36]	; (82314 <__libc_fini_array+0x28>)
   822f0:	4c09      	ldr	r4, [pc, #36]	; (82318 <__libc_fini_array+0x2c>)
   822f2:	1b64      	subs	r4, r4, r5
   822f4:	10a4      	asrs	r4, r4, #2
   822f6:	bf18      	it	ne
   822f8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   822fc:	d005      	beq.n	8230a <__libc_fini_array+0x1e>
   822fe:	3c01      	subs	r4, #1
   82300:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82304:	4798      	blx	r3
   82306:	2c00      	cmp	r4, #0
   82308:	d1f9      	bne.n	822fe <__libc_fini_array+0x12>
   8230a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8230e:	f002 b89f 	b.w	84450 <_fini>
   82312:	bf00      	nop
   82314:	0008445c 	.word	0x0008445c
   82318:	00084460 	.word	0x00084460

0008231c <_fputwc_r>:
   8231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82320:	8993      	ldrh	r3, [r2, #12]
   82322:	460f      	mov	r7, r1
   82324:	0499      	lsls	r1, r3, #18
   82326:	b082      	sub	sp, #8
   82328:	4614      	mov	r4, r2
   8232a:	4680      	mov	r8, r0
   8232c:	d406      	bmi.n	8233c <_fputwc_r+0x20>
   8232e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82338:	81a3      	strh	r3, [r4, #12]
   8233a:	6662      	str	r2, [r4, #100]	; 0x64
   8233c:	f000 fb1c 	bl	82978 <__locale_mb_cur_max>
   82340:	2801      	cmp	r0, #1
   82342:	d03e      	beq.n	823c2 <_fputwc_r+0xa6>
   82344:	463a      	mov	r2, r7
   82346:	4640      	mov	r0, r8
   82348:	a901      	add	r1, sp, #4
   8234a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8234e:	f001 f9df 	bl	83710 <_wcrtomb_r>
   82352:	1c42      	adds	r2, r0, #1
   82354:	4606      	mov	r6, r0
   82356:	d02d      	beq.n	823b4 <_fputwc_r+0x98>
   82358:	2800      	cmp	r0, #0
   8235a:	d03a      	beq.n	823d2 <_fputwc_r+0xb6>
   8235c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82360:	2500      	movs	r5, #0
   82362:	e009      	b.n	82378 <_fputwc_r+0x5c>
   82364:	6823      	ldr	r3, [r4, #0]
   82366:	7019      	strb	r1, [r3, #0]
   82368:	6823      	ldr	r3, [r4, #0]
   8236a:	3301      	adds	r3, #1
   8236c:	6023      	str	r3, [r4, #0]
   8236e:	3501      	adds	r5, #1
   82370:	42b5      	cmp	r5, r6
   82372:	d22e      	bcs.n	823d2 <_fputwc_r+0xb6>
   82374:	ab01      	add	r3, sp, #4
   82376:	5ce9      	ldrb	r1, [r5, r3]
   82378:	68a3      	ldr	r3, [r4, #8]
   8237a:	3b01      	subs	r3, #1
   8237c:	2b00      	cmp	r3, #0
   8237e:	60a3      	str	r3, [r4, #8]
   82380:	daf0      	bge.n	82364 <_fputwc_r+0x48>
   82382:	69a2      	ldr	r2, [r4, #24]
   82384:	4293      	cmp	r3, r2
   82386:	db06      	blt.n	82396 <_fputwc_r+0x7a>
   82388:	6823      	ldr	r3, [r4, #0]
   8238a:	7019      	strb	r1, [r3, #0]
   8238c:	6823      	ldr	r3, [r4, #0]
   8238e:	7819      	ldrb	r1, [r3, #0]
   82390:	3301      	adds	r3, #1
   82392:	290a      	cmp	r1, #10
   82394:	d1ea      	bne.n	8236c <_fputwc_r+0x50>
   82396:	4640      	mov	r0, r8
   82398:	4622      	mov	r2, r4
   8239a:	f001 f965 	bl	83668 <__swbuf_r>
   8239e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   823a2:	4258      	negs	r0, r3
   823a4:	4158      	adcs	r0, r3
   823a6:	2800      	cmp	r0, #0
   823a8:	d0e1      	beq.n	8236e <_fputwc_r+0x52>
   823aa:	f04f 30ff 	mov.w	r0, #4294967295
   823ae:	b002      	add	sp, #8
   823b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823b4:	89a3      	ldrh	r3, [r4, #12]
   823b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823ba:	81a3      	strh	r3, [r4, #12]
   823bc:	b002      	add	sp, #8
   823be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823c2:	1e7b      	subs	r3, r7, #1
   823c4:	2bfe      	cmp	r3, #254	; 0xfe
   823c6:	d8bd      	bhi.n	82344 <_fputwc_r+0x28>
   823c8:	b2f9      	uxtb	r1, r7
   823ca:	4606      	mov	r6, r0
   823cc:	f88d 1004 	strb.w	r1, [sp, #4]
   823d0:	e7c6      	b.n	82360 <_fputwc_r+0x44>
   823d2:	4638      	mov	r0, r7
   823d4:	b002      	add	sp, #8
   823d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823da:	bf00      	nop

000823dc <_malloc_trim_r>:
   823dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823de:	4d23      	ldr	r5, [pc, #140]	; (8246c <_malloc_trim_r+0x90>)
   823e0:	460f      	mov	r7, r1
   823e2:	4604      	mov	r4, r0
   823e4:	f000 ff08 	bl	831f8 <__malloc_lock>
   823e8:	68ab      	ldr	r3, [r5, #8]
   823ea:	685e      	ldr	r6, [r3, #4]
   823ec:	f026 0603 	bic.w	r6, r6, #3
   823f0:	1bf1      	subs	r1, r6, r7
   823f2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   823f6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   823fa:	f021 010f 	bic.w	r1, r1, #15
   823fe:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82402:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82406:	db07      	blt.n	82418 <_malloc_trim_r+0x3c>
   82408:	4620      	mov	r0, r4
   8240a:	2100      	movs	r1, #0
   8240c:	f001 f8d8 	bl	835c0 <_sbrk_r>
   82410:	68ab      	ldr	r3, [r5, #8]
   82412:	4433      	add	r3, r6
   82414:	4298      	cmp	r0, r3
   82416:	d004      	beq.n	82422 <_malloc_trim_r+0x46>
   82418:	4620      	mov	r0, r4
   8241a:	f000 feef 	bl	831fc <__malloc_unlock>
   8241e:	2000      	movs	r0, #0
   82420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82422:	4620      	mov	r0, r4
   82424:	4279      	negs	r1, r7
   82426:	f001 f8cb 	bl	835c0 <_sbrk_r>
   8242a:	3001      	adds	r0, #1
   8242c:	d00d      	beq.n	8244a <_malloc_trim_r+0x6e>
   8242e:	4b10      	ldr	r3, [pc, #64]	; (82470 <_malloc_trim_r+0x94>)
   82430:	68aa      	ldr	r2, [r5, #8]
   82432:	6819      	ldr	r1, [r3, #0]
   82434:	1bf6      	subs	r6, r6, r7
   82436:	f046 0601 	orr.w	r6, r6, #1
   8243a:	4620      	mov	r0, r4
   8243c:	1bc9      	subs	r1, r1, r7
   8243e:	6056      	str	r6, [r2, #4]
   82440:	6019      	str	r1, [r3, #0]
   82442:	f000 fedb 	bl	831fc <__malloc_unlock>
   82446:	2001      	movs	r0, #1
   82448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8244a:	4620      	mov	r0, r4
   8244c:	2100      	movs	r1, #0
   8244e:	f001 f8b7 	bl	835c0 <_sbrk_r>
   82452:	68ab      	ldr	r3, [r5, #8]
   82454:	1ac2      	subs	r2, r0, r3
   82456:	2a0f      	cmp	r2, #15
   82458:	ddde      	ble.n	82418 <_malloc_trim_r+0x3c>
   8245a:	4d06      	ldr	r5, [pc, #24]	; (82474 <_malloc_trim_r+0x98>)
   8245c:	4904      	ldr	r1, [pc, #16]	; (82470 <_malloc_trim_r+0x94>)
   8245e:	682d      	ldr	r5, [r5, #0]
   82460:	f042 0201 	orr.w	r2, r2, #1
   82464:	1b40      	subs	r0, r0, r5
   82466:	605a      	str	r2, [r3, #4]
   82468:	6008      	str	r0, [r1, #0]
   8246a:	e7d5      	b.n	82418 <_malloc_trim_r+0x3c>
   8246c:	20070580 	.word	0x20070580
   82470:	20070a3c 	.word	0x20070a3c
   82474:	2007098c 	.word	0x2007098c

00082478 <_free_r>:
   82478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8247c:	460d      	mov	r5, r1
   8247e:	4606      	mov	r6, r0
   82480:	2900      	cmp	r1, #0
   82482:	d055      	beq.n	82530 <_free_r+0xb8>
   82484:	f000 feb8 	bl	831f8 <__malloc_lock>
   82488:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8248c:	f8df c170 	ldr.w	ip, [pc, #368]	; 82600 <_free_r+0x188>
   82490:	f1a5 0408 	sub.w	r4, r5, #8
   82494:	f021 0301 	bic.w	r3, r1, #1
   82498:	18e2      	adds	r2, r4, r3
   8249a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8249e:	6857      	ldr	r7, [r2, #4]
   824a0:	4290      	cmp	r0, r2
   824a2:	f027 0703 	bic.w	r7, r7, #3
   824a6:	d068      	beq.n	8257a <_free_r+0x102>
   824a8:	f011 0101 	ands.w	r1, r1, #1
   824ac:	6057      	str	r7, [r2, #4]
   824ae:	d032      	beq.n	82516 <_free_r+0x9e>
   824b0:	2100      	movs	r1, #0
   824b2:	19d0      	adds	r0, r2, r7
   824b4:	6840      	ldr	r0, [r0, #4]
   824b6:	07c0      	lsls	r0, r0, #31
   824b8:	d406      	bmi.n	824c8 <_free_r+0x50>
   824ba:	443b      	add	r3, r7
   824bc:	6890      	ldr	r0, [r2, #8]
   824be:	2900      	cmp	r1, #0
   824c0:	d04d      	beq.n	8255e <_free_r+0xe6>
   824c2:	68d2      	ldr	r2, [r2, #12]
   824c4:	60c2      	str	r2, [r0, #12]
   824c6:	6090      	str	r0, [r2, #8]
   824c8:	f043 0201 	orr.w	r2, r3, #1
   824cc:	6062      	str	r2, [r4, #4]
   824ce:	50e3      	str	r3, [r4, r3]
   824d0:	b9e1      	cbnz	r1, 8250c <_free_r+0x94>
   824d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   824d6:	d32d      	bcc.n	82534 <_free_r+0xbc>
   824d8:	0a5a      	lsrs	r2, r3, #9
   824da:	2a04      	cmp	r2, #4
   824dc:	d869      	bhi.n	825b2 <_free_r+0x13a>
   824de:	0998      	lsrs	r0, r3, #6
   824e0:	3038      	adds	r0, #56	; 0x38
   824e2:	0041      	lsls	r1, r0, #1
   824e4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   824e8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   824ec:	4944      	ldr	r1, [pc, #272]	; (82600 <_free_r+0x188>)
   824ee:	4562      	cmp	r2, ip
   824f0:	d065      	beq.n	825be <_free_r+0x146>
   824f2:	6851      	ldr	r1, [r2, #4]
   824f4:	f021 0103 	bic.w	r1, r1, #3
   824f8:	428b      	cmp	r3, r1
   824fa:	d202      	bcs.n	82502 <_free_r+0x8a>
   824fc:	6892      	ldr	r2, [r2, #8]
   824fe:	4594      	cmp	ip, r2
   82500:	d1f7      	bne.n	824f2 <_free_r+0x7a>
   82502:	68d3      	ldr	r3, [r2, #12]
   82504:	60e3      	str	r3, [r4, #12]
   82506:	60a2      	str	r2, [r4, #8]
   82508:	609c      	str	r4, [r3, #8]
   8250a:	60d4      	str	r4, [r2, #12]
   8250c:	4630      	mov	r0, r6
   8250e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82512:	f000 be73 	b.w	831fc <__malloc_unlock>
   82516:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8251a:	f10c 0808 	add.w	r8, ip, #8
   8251e:	1b64      	subs	r4, r4, r5
   82520:	68a0      	ldr	r0, [r4, #8]
   82522:	442b      	add	r3, r5
   82524:	4540      	cmp	r0, r8
   82526:	d042      	beq.n	825ae <_free_r+0x136>
   82528:	68e5      	ldr	r5, [r4, #12]
   8252a:	60c5      	str	r5, [r0, #12]
   8252c:	60a8      	str	r0, [r5, #8]
   8252e:	e7c0      	b.n	824b2 <_free_r+0x3a>
   82530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82534:	08db      	lsrs	r3, r3, #3
   82536:	109a      	asrs	r2, r3, #2
   82538:	2001      	movs	r0, #1
   8253a:	4090      	lsls	r0, r2
   8253c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82540:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82544:	689a      	ldr	r2, [r3, #8]
   82546:	4301      	orrs	r1, r0
   82548:	60a2      	str	r2, [r4, #8]
   8254a:	60e3      	str	r3, [r4, #12]
   8254c:	f8cc 1004 	str.w	r1, [ip, #4]
   82550:	4630      	mov	r0, r6
   82552:	609c      	str	r4, [r3, #8]
   82554:	60d4      	str	r4, [r2, #12]
   82556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8255a:	f000 be4f 	b.w	831fc <__malloc_unlock>
   8255e:	4d29      	ldr	r5, [pc, #164]	; (82604 <_free_r+0x18c>)
   82560:	42a8      	cmp	r0, r5
   82562:	d1ae      	bne.n	824c2 <_free_r+0x4a>
   82564:	f043 0201 	orr.w	r2, r3, #1
   82568:	f8cc 4014 	str.w	r4, [ip, #20]
   8256c:	f8cc 4010 	str.w	r4, [ip, #16]
   82570:	60e0      	str	r0, [r4, #12]
   82572:	60a0      	str	r0, [r4, #8]
   82574:	6062      	str	r2, [r4, #4]
   82576:	50e3      	str	r3, [r4, r3]
   82578:	e7c8      	b.n	8250c <_free_r+0x94>
   8257a:	441f      	add	r7, r3
   8257c:	07cb      	lsls	r3, r1, #31
   8257e:	d407      	bmi.n	82590 <_free_r+0x118>
   82580:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82584:	1a64      	subs	r4, r4, r1
   82586:	68e3      	ldr	r3, [r4, #12]
   82588:	68a2      	ldr	r2, [r4, #8]
   8258a:	440f      	add	r7, r1
   8258c:	60d3      	str	r3, [r2, #12]
   8258e:	609a      	str	r2, [r3, #8]
   82590:	4b1d      	ldr	r3, [pc, #116]	; (82608 <_free_r+0x190>)
   82592:	f047 0201 	orr.w	r2, r7, #1
   82596:	681b      	ldr	r3, [r3, #0]
   82598:	6062      	str	r2, [r4, #4]
   8259a:	429f      	cmp	r7, r3
   8259c:	f8cc 4008 	str.w	r4, [ip, #8]
   825a0:	d3b4      	bcc.n	8250c <_free_r+0x94>
   825a2:	4b1a      	ldr	r3, [pc, #104]	; (8260c <_free_r+0x194>)
   825a4:	4630      	mov	r0, r6
   825a6:	6819      	ldr	r1, [r3, #0]
   825a8:	f7ff ff18 	bl	823dc <_malloc_trim_r>
   825ac:	e7ae      	b.n	8250c <_free_r+0x94>
   825ae:	2101      	movs	r1, #1
   825b0:	e77f      	b.n	824b2 <_free_r+0x3a>
   825b2:	2a14      	cmp	r2, #20
   825b4:	d80b      	bhi.n	825ce <_free_r+0x156>
   825b6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   825ba:	0041      	lsls	r1, r0, #1
   825bc:	e792      	b.n	824e4 <_free_r+0x6c>
   825be:	1080      	asrs	r0, r0, #2
   825c0:	2501      	movs	r5, #1
   825c2:	4085      	lsls	r5, r0
   825c4:	6848      	ldr	r0, [r1, #4]
   825c6:	4613      	mov	r3, r2
   825c8:	4328      	orrs	r0, r5
   825ca:	6048      	str	r0, [r1, #4]
   825cc:	e79a      	b.n	82504 <_free_r+0x8c>
   825ce:	2a54      	cmp	r2, #84	; 0x54
   825d0:	d803      	bhi.n	825da <_free_r+0x162>
   825d2:	0b18      	lsrs	r0, r3, #12
   825d4:	306e      	adds	r0, #110	; 0x6e
   825d6:	0041      	lsls	r1, r0, #1
   825d8:	e784      	b.n	824e4 <_free_r+0x6c>
   825da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   825de:	d803      	bhi.n	825e8 <_free_r+0x170>
   825e0:	0bd8      	lsrs	r0, r3, #15
   825e2:	3077      	adds	r0, #119	; 0x77
   825e4:	0041      	lsls	r1, r0, #1
   825e6:	e77d      	b.n	824e4 <_free_r+0x6c>
   825e8:	f240 5154 	movw	r1, #1364	; 0x554
   825ec:	428a      	cmp	r2, r1
   825ee:	d803      	bhi.n	825f8 <_free_r+0x180>
   825f0:	0c98      	lsrs	r0, r3, #18
   825f2:	307c      	adds	r0, #124	; 0x7c
   825f4:	0041      	lsls	r1, r0, #1
   825f6:	e775      	b.n	824e4 <_free_r+0x6c>
   825f8:	21fc      	movs	r1, #252	; 0xfc
   825fa:	207e      	movs	r0, #126	; 0x7e
   825fc:	e772      	b.n	824e4 <_free_r+0x6c>
   825fe:	bf00      	nop
   82600:	20070580 	.word	0x20070580
   82604:	20070588 	.word	0x20070588
   82608:	20070988 	.word	0x20070988
   8260c:	20070a38 	.word	0x20070a38

00082610 <__sfvwrite_r>:
   82610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82614:	6893      	ldr	r3, [r2, #8]
   82616:	b083      	sub	sp, #12
   82618:	4616      	mov	r6, r2
   8261a:	4681      	mov	r9, r0
   8261c:	460c      	mov	r4, r1
   8261e:	b32b      	cbz	r3, 8266c <__sfvwrite_r+0x5c>
   82620:	898b      	ldrh	r3, [r1, #12]
   82622:	0719      	lsls	r1, r3, #28
   82624:	d526      	bpl.n	82674 <__sfvwrite_r+0x64>
   82626:	6922      	ldr	r2, [r4, #16]
   82628:	b322      	cbz	r2, 82674 <__sfvwrite_r+0x64>
   8262a:	f003 0202 	and.w	r2, r3, #2
   8262e:	b292      	uxth	r2, r2
   82630:	6835      	ldr	r5, [r6, #0]
   82632:	2a00      	cmp	r2, #0
   82634:	d02c      	beq.n	82690 <__sfvwrite_r+0x80>
   82636:	f04f 0a00 	mov.w	sl, #0
   8263a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82924 <__sfvwrite_r+0x314>
   8263e:	46d0      	mov	r8, sl
   82640:	45d8      	cmp	r8, fp
   82642:	bf34      	ite	cc
   82644:	4643      	movcc	r3, r8
   82646:	465b      	movcs	r3, fp
   82648:	4652      	mov	r2, sl
   8264a:	4648      	mov	r0, r9
   8264c:	f1b8 0f00 	cmp.w	r8, #0
   82650:	d04f      	beq.n	826f2 <__sfvwrite_r+0xe2>
   82652:	69e1      	ldr	r1, [r4, #28]
   82654:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82656:	47b8      	blx	r7
   82658:	2800      	cmp	r0, #0
   8265a:	dd56      	ble.n	8270a <__sfvwrite_r+0xfa>
   8265c:	68b3      	ldr	r3, [r6, #8]
   8265e:	4482      	add	sl, r0
   82660:	1a1b      	subs	r3, r3, r0
   82662:	ebc0 0808 	rsb	r8, r0, r8
   82666:	60b3      	str	r3, [r6, #8]
   82668:	2b00      	cmp	r3, #0
   8266a:	d1e9      	bne.n	82640 <__sfvwrite_r+0x30>
   8266c:	2000      	movs	r0, #0
   8266e:	b003      	add	sp, #12
   82670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82674:	4648      	mov	r0, r9
   82676:	4621      	mov	r1, r4
   82678:	f7ff fc88 	bl	81f8c <__swsetup_r>
   8267c:	2800      	cmp	r0, #0
   8267e:	f040 8148 	bne.w	82912 <__sfvwrite_r+0x302>
   82682:	89a3      	ldrh	r3, [r4, #12]
   82684:	6835      	ldr	r5, [r6, #0]
   82686:	f003 0202 	and.w	r2, r3, #2
   8268a:	b292      	uxth	r2, r2
   8268c:	2a00      	cmp	r2, #0
   8268e:	d1d2      	bne.n	82636 <__sfvwrite_r+0x26>
   82690:	f013 0a01 	ands.w	sl, r3, #1
   82694:	d142      	bne.n	8271c <__sfvwrite_r+0x10c>
   82696:	46d0      	mov	r8, sl
   82698:	f1b8 0f00 	cmp.w	r8, #0
   8269c:	d023      	beq.n	826e6 <__sfvwrite_r+0xd6>
   8269e:	059a      	lsls	r2, r3, #22
   826a0:	68a7      	ldr	r7, [r4, #8]
   826a2:	d576      	bpl.n	82792 <__sfvwrite_r+0x182>
   826a4:	45b8      	cmp	r8, r7
   826a6:	f0c0 80a4 	bcc.w	827f2 <__sfvwrite_r+0x1e2>
   826aa:	f413 6f90 	tst.w	r3, #1152	; 0x480
   826ae:	f040 80b2 	bne.w	82816 <__sfvwrite_r+0x206>
   826b2:	6820      	ldr	r0, [r4, #0]
   826b4:	46bb      	mov	fp, r7
   826b6:	4651      	mov	r1, sl
   826b8:	465a      	mov	r2, fp
   826ba:	f000 fd37 	bl	8312c <memmove>
   826be:	68a2      	ldr	r2, [r4, #8]
   826c0:	6821      	ldr	r1, [r4, #0]
   826c2:	1bd2      	subs	r2, r2, r7
   826c4:	eb01 030b 	add.w	r3, r1, fp
   826c8:	60a2      	str	r2, [r4, #8]
   826ca:	6023      	str	r3, [r4, #0]
   826cc:	4642      	mov	r2, r8
   826ce:	68b3      	ldr	r3, [r6, #8]
   826d0:	4492      	add	sl, r2
   826d2:	1a9b      	subs	r3, r3, r2
   826d4:	ebc2 0808 	rsb	r8, r2, r8
   826d8:	60b3      	str	r3, [r6, #8]
   826da:	2b00      	cmp	r3, #0
   826dc:	d0c6      	beq.n	8266c <__sfvwrite_r+0x5c>
   826de:	89a3      	ldrh	r3, [r4, #12]
   826e0:	f1b8 0f00 	cmp.w	r8, #0
   826e4:	d1db      	bne.n	8269e <__sfvwrite_r+0x8e>
   826e6:	f8d5 a000 	ldr.w	sl, [r5]
   826ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826ee:	3508      	adds	r5, #8
   826f0:	e7d2      	b.n	82698 <__sfvwrite_r+0x88>
   826f2:	f8d5 a000 	ldr.w	sl, [r5]
   826f6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   826fa:	3508      	adds	r5, #8
   826fc:	e7a0      	b.n	82640 <__sfvwrite_r+0x30>
   826fe:	4648      	mov	r0, r9
   82700:	4621      	mov	r1, r4
   82702:	f7ff fd59 	bl	821b8 <_fflush_r>
   82706:	2800      	cmp	r0, #0
   82708:	d059      	beq.n	827be <__sfvwrite_r+0x1ae>
   8270a:	89a3      	ldrh	r3, [r4, #12]
   8270c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82710:	f04f 30ff 	mov.w	r0, #4294967295
   82714:	81a3      	strh	r3, [r4, #12]
   82716:	b003      	add	sp, #12
   82718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8271c:	4692      	mov	sl, r2
   8271e:	9201      	str	r2, [sp, #4]
   82720:	4693      	mov	fp, r2
   82722:	4690      	mov	r8, r2
   82724:	f1b8 0f00 	cmp.w	r8, #0
   82728:	d02b      	beq.n	82782 <__sfvwrite_r+0x172>
   8272a:	9f01      	ldr	r7, [sp, #4]
   8272c:	2f00      	cmp	r7, #0
   8272e:	d064      	beq.n	827fa <__sfvwrite_r+0x1ea>
   82730:	6820      	ldr	r0, [r4, #0]
   82732:	6921      	ldr	r1, [r4, #16]
   82734:	45c2      	cmp	sl, r8
   82736:	bf34      	ite	cc
   82738:	4653      	movcc	r3, sl
   8273a:	4643      	movcs	r3, r8
   8273c:	4288      	cmp	r0, r1
   8273e:	461f      	mov	r7, r3
   82740:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82744:	6962      	ldr	r2, [r4, #20]
   82746:	d903      	bls.n	82750 <__sfvwrite_r+0x140>
   82748:	4494      	add	ip, r2
   8274a:	4563      	cmp	r3, ip
   8274c:	f300 80ae 	bgt.w	828ac <__sfvwrite_r+0x29c>
   82750:	4293      	cmp	r3, r2
   82752:	db36      	blt.n	827c2 <__sfvwrite_r+0x1b2>
   82754:	4613      	mov	r3, r2
   82756:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82758:	4648      	mov	r0, r9
   8275a:	69e1      	ldr	r1, [r4, #28]
   8275c:	465a      	mov	r2, fp
   8275e:	47b8      	blx	r7
   82760:	1e07      	subs	r7, r0, #0
   82762:	ddd2      	ble.n	8270a <__sfvwrite_r+0xfa>
   82764:	ebba 0a07 	subs.w	sl, sl, r7
   82768:	d03a      	beq.n	827e0 <__sfvwrite_r+0x1d0>
   8276a:	68b3      	ldr	r3, [r6, #8]
   8276c:	44bb      	add	fp, r7
   8276e:	1bdb      	subs	r3, r3, r7
   82770:	ebc7 0808 	rsb	r8, r7, r8
   82774:	60b3      	str	r3, [r6, #8]
   82776:	2b00      	cmp	r3, #0
   82778:	f43f af78 	beq.w	8266c <__sfvwrite_r+0x5c>
   8277c:	f1b8 0f00 	cmp.w	r8, #0
   82780:	d1d3      	bne.n	8272a <__sfvwrite_r+0x11a>
   82782:	2700      	movs	r7, #0
   82784:	f8d5 b000 	ldr.w	fp, [r5]
   82788:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8278c:	9701      	str	r7, [sp, #4]
   8278e:	3508      	adds	r5, #8
   82790:	e7c8      	b.n	82724 <__sfvwrite_r+0x114>
   82792:	6820      	ldr	r0, [r4, #0]
   82794:	6923      	ldr	r3, [r4, #16]
   82796:	4298      	cmp	r0, r3
   82798:	d802      	bhi.n	827a0 <__sfvwrite_r+0x190>
   8279a:	6963      	ldr	r3, [r4, #20]
   8279c:	4598      	cmp	r8, r3
   8279e:	d272      	bcs.n	82886 <__sfvwrite_r+0x276>
   827a0:	45b8      	cmp	r8, r7
   827a2:	bf38      	it	cc
   827a4:	4647      	movcc	r7, r8
   827a6:	463a      	mov	r2, r7
   827a8:	4651      	mov	r1, sl
   827aa:	f000 fcbf 	bl	8312c <memmove>
   827ae:	68a3      	ldr	r3, [r4, #8]
   827b0:	6822      	ldr	r2, [r4, #0]
   827b2:	1bdb      	subs	r3, r3, r7
   827b4:	443a      	add	r2, r7
   827b6:	60a3      	str	r3, [r4, #8]
   827b8:	6022      	str	r2, [r4, #0]
   827ba:	2b00      	cmp	r3, #0
   827bc:	d09f      	beq.n	826fe <__sfvwrite_r+0xee>
   827be:	463a      	mov	r2, r7
   827c0:	e785      	b.n	826ce <__sfvwrite_r+0xbe>
   827c2:	461a      	mov	r2, r3
   827c4:	4659      	mov	r1, fp
   827c6:	9300      	str	r3, [sp, #0]
   827c8:	f000 fcb0 	bl	8312c <memmove>
   827cc:	9b00      	ldr	r3, [sp, #0]
   827ce:	68a1      	ldr	r1, [r4, #8]
   827d0:	6822      	ldr	r2, [r4, #0]
   827d2:	1ac9      	subs	r1, r1, r3
   827d4:	ebba 0a07 	subs.w	sl, sl, r7
   827d8:	4413      	add	r3, r2
   827da:	60a1      	str	r1, [r4, #8]
   827dc:	6023      	str	r3, [r4, #0]
   827de:	d1c4      	bne.n	8276a <__sfvwrite_r+0x15a>
   827e0:	4648      	mov	r0, r9
   827e2:	4621      	mov	r1, r4
   827e4:	f7ff fce8 	bl	821b8 <_fflush_r>
   827e8:	2800      	cmp	r0, #0
   827ea:	d18e      	bne.n	8270a <__sfvwrite_r+0xfa>
   827ec:	f8cd a004 	str.w	sl, [sp, #4]
   827f0:	e7bb      	b.n	8276a <__sfvwrite_r+0x15a>
   827f2:	6820      	ldr	r0, [r4, #0]
   827f4:	4647      	mov	r7, r8
   827f6:	46c3      	mov	fp, r8
   827f8:	e75d      	b.n	826b6 <__sfvwrite_r+0xa6>
   827fa:	4658      	mov	r0, fp
   827fc:	210a      	movs	r1, #10
   827fe:	4642      	mov	r2, r8
   82800:	f000 fbd4 	bl	82fac <memchr>
   82804:	2800      	cmp	r0, #0
   82806:	d07f      	beq.n	82908 <__sfvwrite_r+0x2f8>
   82808:	f100 0a01 	add.w	sl, r0, #1
   8280c:	2701      	movs	r7, #1
   8280e:	ebcb 0a0a 	rsb	sl, fp, sl
   82812:	9701      	str	r7, [sp, #4]
   82814:	e78c      	b.n	82730 <__sfvwrite_r+0x120>
   82816:	6822      	ldr	r2, [r4, #0]
   82818:	6921      	ldr	r1, [r4, #16]
   8281a:	6967      	ldr	r7, [r4, #20]
   8281c:	ebc1 0c02 	rsb	ip, r1, r2
   82820:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82824:	f10c 0201 	add.w	r2, ip, #1
   82828:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8282c:	4442      	add	r2, r8
   8282e:	107f      	asrs	r7, r7, #1
   82830:	4297      	cmp	r7, r2
   82832:	bf34      	ite	cc
   82834:	4617      	movcc	r7, r2
   82836:	463a      	movcs	r2, r7
   82838:	055b      	lsls	r3, r3, #21
   8283a:	d54f      	bpl.n	828dc <__sfvwrite_r+0x2cc>
   8283c:	4611      	mov	r1, r2
   8283e:	4648      	mov	r0, r9
   82840:	f8cd c000 	str.w	ip, [sp]
   82844:	f000 f916 	bl	82a74 <_malloc_r>
   82848:	f8dd c000 	ldr.w	ip, [sp]
   8284c:	4683      	mov	fp, r0
   8284e:	2800      	cmp	r0, #0
   82850:	d062      	beq.n	82918 <__sfvwrite_r+0x308>
   82852:	4662      	mov	r2, ip
   82854:	6921      	ldr	r1, [r4, #16]
   82856:	f8cd c000 	str.w	ip, [sp]
   8285a:	f000 fbf1 	bl	83040 <memcpy>
   8285e:	89a2      	ldrh	r2, [r4, #12]
   82860:	f8dd c000 	ldr.w	ip, [sp]
   82864:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82868:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8286c:	81a2      	strh	r2, [r4, #12]
   8286e:	eb0b 000c 	add.w	r0, fp, ip
   82872:	ebcc 0207 	rsb	r2, ip, r7
   82876:	f8c4 b010 	str.w	fp, [r4, #16]
   8287a:	6167      	str	r7, [r4, #20]
   8287c:	6020      	str	r0, [r4, #0]
   8287e:	60a2      	str	r2, [r4, #8]
   82880:	4647      	mov	r7, r8
   82882:	46c3      	mov	fp, r8
   82884:	e717      	b.n	826b6 <__sfvwrite_r+0xa6>
   82886:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8288a:	4590      	cmp	r8, r2
   8288c:	bf38      	it	cc
   8288e:	4642      	movcc	r2, r8
   82890:	fb92 f2f3 	sdiv	r2, r2, r3
   82894:	fb02 f303 	mul.w	r3, r2, r3
   82898:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8289a:	4648      	mov	r0, r9
   8289c:	69e1      	ldr	r1, [r4, #28]
   8289e:	4652      	mov	r2, sl
   828a0:	47b8      	blx	r7
   828a2:	2800      	cmp	r0, #0
   828a4:	f77f af31 	ble.w	8270a <__sfvwrite_r+0xfa>
   828a8:	4602      	mov	r2, r0
   828aa:	e710      	b.n	826ce <__sfvwrite_r+0xbe>
   828ac:	4662      	mov	r2, ip
   828ae:	4659      	mov	r1, fp
   828b0:	f8cd c000 	str.w	ip, [sp]
   828b4:	f000 fc3a 	bl	8312c <memmove>
   828b8:	f8dd c000 	ldr.w	ip, [sp]
   828bc:	6823      	ldr	r3, [r4, #0]
   828be:	4648      	mov	r0, r9
   828c0:	4463      	add	r3, ip
   828c2:	6023      	str	r3, [r4, #0]
   828c4:	4621      	mov	r1, r4
   828c6:	f8cd c000 	str.w	ip, [sp]
   828ca:	f7ff fc75 	bl	821b8 <_fflush_r>
   828ce:	f8dd c000 	ldr.w	ip, [sp]
   828d2:	2800      	cmp	r0, #0
   828d4:	f47f af19 	bne.w	8270a <__sfvwrite_r+0xfa>
   828d8:	4667      	mov	r7, ip
   828da:	e743      	b.n	82764 <__sfvwrite_r+0x154>
   828dc:	4648      	mov	r0, r9
   828de:	f8cd c000 	str.w	ip, [sp]
   828e2:	f000 fc8d 	bl	83200 <_realloc_r>
   828e6:	f8dd c000 	ldr.w	ip, [sp]
   828ea:	4683      	mov	fp, r0
   828ec:	2800      	cmp	r0, #0
   828ee:	d1be      	bne.n	8286e <__sfvwrite_r+0x25e>
   828f0:	4648      	mov	r0, r9
   828f2:	6921      	ldr	r1, [r4, #16]
   828f4:	f7ff fdc0 	bl	82478 <_free_r>
   828f8:	89a3      	ldrh	r3, [r4, #12]
   828fa:	220c      	movs	r2, #12
   828fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82900:	b29b      	uxth	r3, r3
   82902:	f8c9 2000 	str.w	r2, [r9]
   82906:	e701      	b.n	8270c <__sfvwrite_r+0xfc>
   82908:	2701      	movs	r7, #1
   8290a:	f108 0a01 	add.w	sl, r8, #1
   8290e:	9701      	str	r7, [sp, #4]
   82910:	e70e      	b.n	82730 <__sfvwrite_r+0x120>
   82912:	f04f 30ff 	mov.w	r0, #4294967295
   82916:	e6aa      	b.n	8266e <__sfvwrite_r+0x5e>
   82918:	230c      	movs	r3, #12
   8291a:	f8c9 3000 	str.w	r3, [r9]
   8291e:	89a3      	ldrh	r3, [r4, #12]
   82920:	e6f4      	b.n	8270c <__sfvwrite_r+0xfc>
   82922:	bf00      	nop
   82924:	7ffffc00 	.word	0x7ffffc00

00082928 <_fwalk>:
   82928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8292c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82930:	4688      	mov	r8, r1
   82932:	d019      	beq.n	82968 <_fwalk+0x40>
   82934:	2600      	movs	r6, #0
   82936:	687d      	ldr	r5, [r7, #4]
   82938:	68bc      	ldr	r4, [r7, #8]
   8293a:	3d01      	subs	r5, #1
   8293c:	d40e      	bmi.n	8295c <_fwalk+0x34>
   8293e:	89a3      	ldrh	r3, [r4, #12]
   82940:	3d01      	subs	r5, #1
   82942:	2b01      	cmp	r3, #1
   82944:	d906      	bls.n	82954 <_fwalk+0x2c>
   82946:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8294a:	4620      	mov	r0, r4
   8294c:	3301      	adds	r3, #1
   8294e:	d001      	beq.n	82954 <_fwalk+0x2c>
   82950:	47c0      	blx	r8
   82952:	4306      	orrs	r6, r0
   82954:	1c6b      	adds	r3, r5, #1
   82956:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8295a:	d1f0      	bne.n	8293e <_fwalk+0x16>
   8295c:	683f      	ldr	r7, [r7, #0]
   8295e:	2f00      	cmp	r7, #0
   82960:	d1e9      	bne.n	82936 <_fwalk+0xe>
   82962:	4630      	mov	r0, r6
   82964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82968:	463e      	mov	r6, r7
   8296a:	4630      	mov	r0, r6
   8296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082970 <__locale_charset>:
   82970:	4800      	ldr	r0, [pc, #0]	; (82974 <__locale_charset+0x4>)
   82972:	4770      	bx	lr
   82974:	2007055c 	.word	0x2007055c

00082978 <__locale_mb_cur_max>:
   82978:	4b01      	ldr	r3, [pc, #4]	; (82980 <__locale_mb_cur_max+0x8>)
   8297a:	6818      	ldr	r0, [r3, #0]
   8297c:	4770      	bx	lr
   8297e:	bf00      	nop
   82980:	2007057c 	.word	0x2007057c

00082984 <__smakebuf_r>:
   82984:	b5f0      	push	{r4, r5, r6, r7, lr}
   82986:	898b      	ldrh	r3, [r1, #12]
   82988:	b091      	sub	sp, #68	; 0x44
   8298a:	b29a      	uxth	r2, r3
   8298c:	0796      	lsls	r6, r2, #30
   8298e:	460c      	mov	r4, r1
   82990:	4605      	mov	r5, r0
   82992:	d437      	bmi.n	82a04 <__smakebuf_r+0x80>
   82994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82998:	2900      	cmp	r1, #0
   8299a:	db17      	blt.n	829cc <__smakebuf_r+0x48>
   8299c:	aa01      	add	r2, sp, #4
   8299e:	f000 ffaf 	bl	83900 <_fstat_r>
   829a2:	2800      	cmp	r0, #0
   829a4:	db10      	blt.n	829c8 <__smakebuf_r+0x44>
   829a6:	9b02      	ldr	r3, [sp, #8]
   829a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   829ac:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   829b0:	424f      	negs	r7, r1
   829b2:	414f      	adcs	r7, r1
   829b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   829b8:	d02c      	beq.n	82a14 <__smakebuf_r+0x90>
   829ba:	89a3      	ldrh	r3, [r4, #12]
   829bc:	f44f 6680 	mov.w	r6, #1024	; 0x400
   829c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   829c4:	81a3      	strh	r3, [r4, #12]
   829c6:	e00b      	b.n	829e0 <__smakebuf_r+0x5c>
   829c8:	89a3      	ldrh	r3, [r4, #12]
   829ca:	b29a      	uxth	r2, r3
   829cc:	f012 0f80 	tst.w	r2, #128	; 0x80
   829d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   829d4:	81a3      	strh	r3, [r4, #12]
   829d6:	bf14      	ite	ne
   829d8:	2640      	movne	r6, #64	; 0x40
   829da:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   829de:	2700      	movs	r7, #0
   829e0:	4628      	mov	r0, r5
   829e2:	4631      	mov	r1, r6
   829e4:	f000 f846 	bl	82a74 <_malloc_r>
   829e8:	89a3      	ldrh	r3, [r4, #12]
   829ea:	2800      	cmp	r0, #0
   829ec:	d029      	beq.n	82a42 <__smakebuf_r+0xbe>
   829ee:	4a1b      	ldr	r2, [pc, #108]	; (82a5c <__smakebuf_r+0xd8>)
   829f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   829f4:	63ea      	str	r2, [r5, #60]	; 0x3c
   829f6:	81a3      	strh	r3, [r4, #12]
   829f8:	6020      	str	r0, [r4, #0]
   829fa:	6120      	str	r0, [r4, #16]
   829fc:	6166      	str	r6, [r4, #20]
   829fe:	b9a7      	cbnz	r7, 82a2a <__smakebuf_r+0xa6>
   82a00:	b011      	add	sp, #68	; 0x44
   82a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a04:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82a08:	2201      	movs	r2, #1
   82a0a:	600b      	str	r3, [r1, #0]
   82a0c:	610b      	str	r3, [r1, #16]
   82a0e:	614a      	str	r2, [r1, #20]
   82a10:	b011      	add	sp, #68	; 0x44
   82a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a14:	4a12      	ldr	r2, [pc, #72]	; (82a60 <__smakebuf_r+0xdc>)
   82a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82a18:	4293      	cmp	r3, r2
   82a1a:	d1ce      	bne.n	829ba <__smakebuf_r+0x36>
   82a1c:	89a3      	ldrh	r3, [r4, #12]
   82a1e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82a22:	4333      	orrs	r3, r6
   82a24:	81a3      	strh	r3, [r4, #12]
   82a26:	64e6      	str	r6, [r4, #76]	; 0x4c
   82a28:	e7da      	b.n	829e0 <__smakebuf_r+0x5c>
   82a2a:	4628      	mov	r0, r5
   82a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a30:	f000 ff7a 	bl	83928 <_isatty_r>
   82a34:	2800      	cmp	r0, #0
   82a36:	d0e3      	beq.n	82a00 <__smakebuf_r+0x7c>
   82a38:	89a3      	ldrh	r3, [r4, #12]
   82a3a:	f043 0301 	orr.w	r3, r3, #1
   82a3e:	81a3      	strh	r3, [r4, #12]
   82a40:	e7de      	b.n	82a00 <__smakebuf_r+0x7c>
   82a42:	059a      	lsls	r2, r3, #22
   82a44:	d4dc      	bmi.n	82a00 <__smakebuf_r+0x7c>
   82a46:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a4a:	f043 0302 	orr.w	r3, r3, #2
   82a4e:	2101      	movs	r1, #1
   82a50:	81a3      	strh	r3, [r4, #12]
   82a52:	6022      	str	r2, [r4, #0]
   82a54:	6122      	str	r2, [r4, #16]
   82a56:	6161      	str	r1, [r4, #20]
   82a58:	e7d2      	b.n	82a00 <__smakebuf_r+0x7c>
   82a5a:	bf00      	nop
   82a5c:	000821e5 	.word	0x000821e5
   82a60:	00083641 	.word	0x00083641

00082a64 <malloc>:
   82a64:	4b02      	ldr	r3, [pc, #8]	; (82a70 <malloc+0xc>)
   82a66:	4601      	mov	r1, r0
   82a68:	6818      	ldr	r0, [r3, #0]
   82a6a:	f000 b803 	b.w	82a74 <_malloc_r>
   82a6e:	bf00      	nop
   82a70:	20070558 	.word	0x20070558

00082a74 <_malloc_r>:
   82a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a78:	f101 050b 	add.w	r5, r1, #11
   82a7c:	2d16      	cmp	r5, #22
   82a7e:	b083      	sub	sp, #12
   82a80:	4606      	mov	r6, r0
   82a82:	d927      	bls.n	82ad4 <_malloc_r+0x60>
   82a84:	f035 0507 	bics.w	r5, r5, #7
   82a88:	d427      	bmi.n	82ada <_malloc_r+0x66>
   82a8a:	42a9      	cmp	r1, r5
   82a8c:	d825      	bhi.n	82ada <_malloc_r+0x66>
   82a8e:	4630      	mov	r0, r6
   82a90:	f000 fbb2 	bl	831f8 <__malloc_lock>
   82a94:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82a98:	d226      	bcs.n	82ae8 <_malloc_r+0x74>
   82a9a:	4fc1      	ldr	r7, [pc, #772]	; (82da0 <_malloc_r+0x32c>)
   82a9c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82aa0:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82aa4:	68dc      	ldr	r4, [r3, #12]
   82aa6:	429c      	cmp	r4, r3
   82aa8:	f000 81d2 	beq.w	82e50 <_malloc_r+0x3dc>
   82aac:	6863      	ldr	r3, [r4, #4]
   82aae:	68e2      	ldr	r2, [r4, #12]
   82ab0:	f023 0303 	bic.w	r3, r3, #3
   82ab4:	4423      	add	r3, r4
   82ab6:	6858      	ldr	r0, [r3, #4]
   82ab8:	68a1      	ldr	r1, [r4, #8]
   82aba:	f040 0501 	orr.w	r5, r0, #1
   82abe:	60ca      	str	r2, [r1, #12]
   82ac0:	4630      	mov	r0, r6
   82ac2:	6091      	str	r1, [r2, #8]
   82ac4:	605d      	str	r5, [r3, #4]
   82ac6:	f000 fb99 	bl	831fc <__malloc_unlock>
   82aca:	3408      	adds	r4, #8
   82acc:	4620      	mov	r0, r4
   82ace:	b003      	add	sp, #12
   82ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ad4:	2510      	movs	r5, #16
   82ad6:	42a9      	cmp	r1, r5
   82ad8:	d9d9      	bls.n	82a8e <_malloc_r+0x1a>
   82ada:	2400      	movs	r4, #0
   82adc:	230c      	movs	r3, #12
   82ade:	4620      	mov	r0, r4
   82ae0:	6033      	str	r3, [r6, #0]
   82ae2:	b003      	add	sp, #12
   82ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ae8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82aec:	f000 8089 	beq.w	82c02 <_malloc_r+0x18e>
   82af0:	f1bc 0f04 	cmp.w	ip, #4
   82af4:	f200 8160 	bhi.w	82db8 <_malloc_r+0x344>
   82af8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82afc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82b00:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82b04:	4fa6      	ldr	r7, [pc, #664]	; (82da0 <_malloc_r+0x32c>)
   82b06:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82b0a:	68cc      	ldr	r4, [r1, #12]
   82b0c:	42a1      	cmp	r1, r4
   82b0e:	d105      	bne.n	82b1c <_malloc_r+0xa8>
   82b10:	e00c      	b.n	82b2c <_malloc_r+0xb8>
   82b12:	2b00      	cmp	r3, #0
   82b14:	da79      	bge.n	82c0a <_malloc_r+0x196>
   82b16:	68e4      	ldr	r4, [r4, #12]
   82b18:	42a1      	cmp	r1, r4
   82b1a:	d007      	beq.n	82b2c <_malloc_r+0xb8>
   82b1c:	6862      	ldr	r2, [r4, #4]
   82b1e:	f022 0203 	bic.w	r2, r2, #3
   82b22:	1b53      	subs	r3, r2, r5
   82b24:	2b0f      	cmp	r3, #15
   82b26:	ddf4      	ble.n	82b12 <_malloc_r+0x9e>
   82b28:	f10c 3cff 	add.w	ip, ip, #4294967295
   82b2c:	f10c 0c01 	add.w	ip, ip, #1
   82b30:	4b9b      	ldr	r3, [pc, #620]	; (82da0 <_malloc_r+0x32c>)
   82b32:	693c      	ldr	r4, [r7, #16]
   82b34:	f103 0e08 	add.w	lr, r3, #8
   82b38:	4574      	cmp	r4, lr
   82b3a:	f000 817e 	beq.w	82e3a <_malloc_r+0x3c6>
   82b3e:	6861      	ldr	r1, [r4, #4]
   82b40:	f021 0103 	bic.w	r1, r1, #3
   82b44:	1b4a      	subs	r2, r1, r5
   82b46:	2a0f      	cmp	r2, #15
   82b48:	f300 8164 	bgt.w	82e14 <_malloc_r+0x3a0>
   82b4c:	2a00      	cmp	r2, #0
   82b4e:	f8c3 e014 	str.w	lr, [r3, #20]
   82b52:	f8c3 e010 	str.w	lr, [r3, #16]
   82b56:	da69      	bge.n	82c2c <_malloc_r+0x1b8>
   82b58:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82b5c:	f080 813a 	bcs.w	82dd4 <_malloc_r+0x360>
   82b60:	08c9      	lsrs	r1, r1, #3
   82b62:	108a      	asrs	r2, r1, #2
   82b64:	f04f 0801 	mov.w	r8, #1
   82b68:	fa08 f802 	lsl.w	r8, r8, r2
   82b6c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82b70:	685a      	ldr	r2, [r3, #4]
   82b72:	6888      	ldr	r0, [r1, #8]
   82b74:	ea48 0202 	orr.w	r2, r8, r2
   82b78:	60a0      	str	r0, [r4, #8]
   82b7a:	60e1      	str	r1, [r4, #12]
   82b7c:	605a      	str	r2, [r3, #4]
   82b7e:	608c      	str	r4, [r1, #8]
   82b80:	60c4      	str	r4, [r0, #12]
   82b82:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82b86:	2001      	movs	r0, #1
   82b88:	4098      	lsls	r0, r3
   82b8a:	4290      	cmp	r0, r2
   82b8c:	d85b      	bhi.n	82c46 <_malloc_r+0x1d2>
   82b8e:	4202      	tst	r2, r0
   82b90:	d106      	bne.n	82ba0 <_malloc_r+0x12c>
   82b92:	f02c 0c03 	bic.w	ip, ip, #3
   82b96:	0040      	lsls	r0, r0, #1
   82b98:	4202      	tst	r2, r0
   82b9a:	f10c 0c04 	add.w	ip, ip, #4
   82b9e:	d0fa      	beq.n	82b96 <_malloc_r+0x122>
   82ba0:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82ba4:	4644      	mov	r4, r8
   82ba6:	46e1      	mov	r9, ip
   82ba8:	68e3      	ldr	r3, [r4, #12]
   82baa:	429c      	cmp	r4, r3
   82bac:	d107      	bne.n	82bbe <_malloc_r+0x14a>
   82bae:	e146      	b.n	82e3e <_malloc_r+0x3ca>
   82bb0:	2a00      	cmp	r2, #0
   82bb2:	f280 8157 	bge.w	82e64 <_malloc_r+0x3f0>
   82bb6:	68db      	ldr	r3, [r3, #12]
   82bb8:	429c      	cmp	r4, r3
   82bba:	f000 8140 	beq.w	82e3e <_malloc_r+0x3ca>
   82bbe:	6859      	ldr	r1, [r3, #4]
   82bc0:	f021 0103 	bic.w	r1, r1, #3
   82bc4:	1b4a      	subs	r2, r1, r5
   82bc6:	2a0f      	cmp	r2, #15
   82bc8:	ddf2      	ble.n	82bb0 <_malloc_r+0x13c>
   82bca:	461c      	mov	r4, r3
   82bcc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82bd0:	68d9      	ldr	r1, [r3, #12]
   82bd2:	f045 0901 	orr.w	r9, r5, #1
   82bd6:	f042 0801 	orr.w	r8, r2, #1
   82bda:	441d      	add	r5, r3
   82bdc:	f8c3 9004 	str.w	r9, [r3, #4]
   82be0:	4630      	mov	r0, r6
   82be2:	f8cc 100c 	str.w	r1, [ip, #12]
   82be6:	f8c1 c008 	str.w	ip, [r1, #8]
   82bea:	617d      	str	r5, [r7, #20]
   82bec:	613d      	str	r5, [r7, #16]
   82bee:	f8c5 e00c 	str.w	lr, [r5, #12]
   82bf2:	f8c5 e008 	str.w	lr, [r5, #8]
   82bf6:	f8c5 8004 	str.w	r8, [r5, #4]
   82bfa:	50aa      	str	r2, [r5, r2]
   82bfc:	f000 fafe 	bl	831fc <__malloc_unlock>
   82c00:	e764      	b.n	82acc <_malloc_r+0x58>
   82c02:	217e      	movs	r1, #126	; 0x7e
   82c04:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82c08:	e77c      	b.n	82b04 <_malloc_r+0x90>
   82c0a:	4422      	add	r2, r4
   82c0c:	6850      	ldr	r0, [r2, #4]
   82c0e:	68e3      	ldr	r3, [r4, #12]
   82c10:	68a1      	ldr	r1, [r4, #8]
   82c12:	f040 0501 	orr.w	r5, r0, #1
   82c16:	60cb      	str	r3, [r1, #12]
   82c18:	4630      	mov	r0, r6
   82c1a:	6099      	str	r1, [r3, #8]
   82c1c:	6055      	str	r5, [r2, #4]
   82c1e:	f000 faed 	bl	831fc <__malloc_unlock>
   82c22:	3408      	adds	r4, #8
   82c24:	4620      	mov	r0, r4
   82c26:	b003      	add	sp, #12
   82c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c2c:	4421      	add	r1, r4
   82c2e:	684b      	ldr	r3, [r1, #4]
   82c30:	4630      	mov	r0, r6
   82c32:	f043 0301 	orr.w	r3, r3, #1
   82c36:	604b      	str	r3, [r1, #4]
   82c38:	f000 fae0 	bl	831fc <__malloc_unlock>
   82c3c:	3408      	adds	r4, #8
   82c3e:	4620      	mov	r0, r4
   82c40:	b003      	add	sp, #12
   82c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c46:	68bc      	ldr	r4, [r7, #8]
   82c48:	6863      	ldr	r3, [r4, #4]
   82c4a:	f023 0903 	bic.w	r9, r3, #3
   82c4e:	45a9      	cmp	r9, r5
   82c50:	d304      	bcc.n	82c5c <_malloc_r+0x1e8>
   82c52:	ebc5 0309 	rsb	r3, r5, r9
   82c56:	2b0f      	cmp	r3, #15
   82c58:	f300 8091 	bgt.w	82d7e <_malloc_r+0x30a>
   82c5c:	4b51      	ldr	r3, [pc, #324]	; (82da4 <_malloc_r+0x330>)
   82c5e:	4a52      	ldr	r2, [pc, #328]	; (82da8 <_malloc_r+0x334>)
   82c60:	6819      	ldr	r1, [r3, #0]
   82c62:	6813      	ldr	r3, [r2, #0]
   82c64:	eb05 0a01 	add.w	sl, r5, r1
   82c68:	3301      	adds	r3, #1
   82c6a:	eb04 0b09 	add.w	fp, r4, r9
   82c6e:	f000 8161 	beq.w	82f34 <_malloc_r+0x4c0>
   82c72:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82c76:	f10a 0a0f 	add.w	sl, sl, #15
   82c7a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82c7e:	f02a 0a0f 	bic.w	sl, sl, #15
   82c82:	4630      	mov	r0, r6
   82c84:	4651      	mov	r1, sl
   82c86:	9201      	str	r2, [sp, #4]
   82c88:	f000 fc9a 	bl	835c0 <_sbrk_r>
   82c8c:	f1b0 3fff 	cmp.w	r0, #4294967295
   82c90:	4680      	mov	r8, r0
   82c92:	9a01      	ldr	r2, [sp, #4]
   82c94:	f000 8101 	beq.w	82e9a <_malloc_r+0x426>
   82c98:	4583      	cmp	fp, r0
   82c9a:	f200 80fb 	bhi.w	82e94 <_malloc_r+0x420>
   82c9e:	f8df c114 	ldr.w	ip, [pc, #276]	; 82db4 <_malloc_r+0x340>
   82ca2:	45c3      	cmp	fp, r8
   82ca4:	f8dc 3000 	ldr.w	r3, [ip]
   82ca8:	4453      	add	r3, sl
   82caa:	f8cc 3000 	str.w	r3, [ip]
   82cae:	f000 814a 	beq.w	82f46 <_malloc_r+0x4d2>
   82cb2:	6812      	ldr	r2, [r2, #0]
   82cb4:	493c      	ldr	r1, [pc, #240]	; (82da8 <_malloc_r+0x334>)
   82cb6:	3201      	adds	r2, #1
   82cb8:	bf1b      	ittet	ne
   82cba:	ebcb 0b08 	rsbne	fp, fp, r8
   82cbe:	445b      	addne	r3, fp
   82cc0:	f8c1 8000 	streq.w	r8, [r1]
   82cc4:	f8cc 3000 	strne.w	r3, [ip]
   82cc8:	f018 0307 	ands.w	r3, r8, #7
   82ccc:	f000 8114 	beq.w	82ef8 <_malloc_r+0x484>
   82cd0:	f1c3 0208 	rsb	r2, r3, #8
   82cd4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82cd8:	4490      	add	r8, r2
   82cda:	3308      	adds	r3, #8
   82cdc:	44c2      	add	sl, r8
   82cde:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82ce2:	ebca 0a03 	rsb	sl, sl, r3
   82ce6:	4651      	mov	r1, sl
   82ce8:	4630      	mov	r0, r6
   82cea:	f8cd c004 	str.w	ip, [sp, #4]
   82cee:	f000 fc67 	bl	835c0 <_sbrk_r>
   82cf2:	1c43      	adds	r3, r0, #1
   82cf4:	f8dd c004 	ldr.w	ip, [sp, #4]
   82cf8:	f000 8135 	beq.w	82f66 <_malloc_r+0x4f2>
   82cfc:	ebc8 0200 	rsb	r2, r8, r0
   82d00:	4452      	add	r2, sl
   82d02:	f042 0201 	orr.w	r2, r2, #1
   82d06:	f8dc 3000 	ldr.w	r3, [ip]
   82d0a:	42bc      	cmp	r4, r7
   82d0c:	4453      	add	r3, sl
   82d0e:	f8c7 8008 	str.w	r8, [r7, #8]
   82d12:	f8cc 3000 	str.w	r3, [ip]
   82d16:	f8c8 2004 	str.w	r2, [r8, #4]
   82d1a:	f8df a098 	ldr.w	sl, [pc, #152]	; 82db4 <_malloc_r+0x340>
   82d1e:	d015      	beq.n	82d4c <_malloc_r+0x2d8>
   82d20:	f1b9 0f0f 	cmp.w	r9, #15
   82d24:	f240 80eb 	bls.w	82efe <_malloc_r+0x48a>
   82d28:	6861      	ldr	r1, [r4, #4]
   82d2a:	f1a9 020c 	sub.w	r2, r9, #12
   82d2e:	f022 0207 	bic.w	r2, r2, #7
   82d32:	f001 0101 	and.w	r1, r1, #1
   82d36:	ea42 0e01 	orr.w	lr, r2, r1
   82d3a:	2005      	movs	r0, #5
   82d3c:	18a1      	adds	r1, r4, r2
   82d3e:	2a0f      	cmp	r2, #15
   82d40:	f8c4 e004 	str.w	lr, [r4, #4]
   82d44:	6048      	str	r0, [r1, #4]
   82d46:	6088      	str	r0, [r1, #8]
   82d48:	f200 8111 	bhi.w	82f6e <_malloc_r+0x4fa>
   82d4c:	4a17      	ldr	r2, [pc, #92]	; (82dac <_malloc_r+0x338>)
   82d4e:	68bc      	ldr	r4, [r7, #8]
   82d50:	6811      	ldr	r1, [r2, #0]
   82d52:	428b      	cmp	r3, r1
   82d54:	bf88      	it	hi
   82d56:	6013      	strhi	r3, [r2, #0]
   82d58:	4a15      	ldr	r2, [pc, #84]	; (82db0 <_malloc_r+0x33c>)
   82d5a:	6811      	ldr	r1, [r2, #0]
   82d5c:	428b      	cmp	r3, r1
   82d5e:	bf88      	it	hi
   82d60:	6013      	strhi	r3, [r2, #0]
   82d62:	6862      	ldr	r2, [r4, #4]
   82d64:	f022 0203 	bic.w	r2, r2, #3
   82d68:	4295      	cmp	r5, r2
   82d6a:	ebc5 0302 	rsb	r3, r5, r2
   82d6e:	d801      	bhi.n	82d74 <_malloc_r+0x300>
   82d70:	2b0f      	cmp	r3, #15
   82d72:	dc04      	bgt.n	82d7e <_malloc_r+0x30a>
   82d74:	4630      	mov	r0, r6
   82d76:	f000 fa41 	bl	831fc <__malloc_unlock>
   82d7a:	2400      	movs	r4, #0
   82d7c:	e6a6      	b.n	82acc <_malloc_r+0x58>
   82d7e:	f045 0201 	orr.w	r2, r5, #1
   82d82:	f043 0301 	orr.w	r3, r3, #1
   82d86:	4425      	add	r5, r4
   82d88:	6062      	str	r2, [r4, #4]
   82d8a:	4630      	mov	r0, r6
   82d8c:	60bd      	str	r5, [r7, #8]
   82d8e:	606b      	str	r3, [r5, #4]
   82d90:	f000 fa34 	bl	831fc <__malloc_unlock>
   82d94:	3408      	adds	r4, #8
   82d96:	4620      	mov	r0, r4
   82d98:	b003      	add	sp, #12
   82d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d9e:	bf00      	nop
   82da0:	20070580 	.word	0x20070580
   82da4:	20070a38 	.word	0x20070a38
   82da8:	2007098c 	.word	0x2007098c
   82dac:	20070a34 	.word	0x20070a34
   82db0:	20070a30 	.word	0x20070a30
   82db4:	20070a3c 	.word	0x20070a3c
   82db8:	f1bc 0f14 	cmp.w	ip, #20
   82dbc:	d961      	bls.n	82e82 <_malloc_r+0x40e>
   82dbe:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82dc2:	f200 808f 	bhi.w	82ee4 <_malloc_r+0x470>
   82dc6:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82dca:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82dce:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82dd2:	e697      	b.n	82b04 <_malloc_r+0x90>
   82dd4:	0a4b      	lsrs	r3, r1, #9
   82dd6:	2b04      	cmp	r3, #4
   82dd8:	d958      	bls.n	82e8c <_malloc_r+0x418>
   82dda:	2b14      	cmp	r3, #20
   82ddc:	f200 80ad 	bhi.w	82f3a <_malloc_r+0x4c6>
   82de0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82de4:	0050      	lsls	r0, r2, #1
   82de6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82dea:	6883      	ldr	r3, [r0, #8]
   82dec:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82fa8 <_malloc_r+0x534>
   82df0:	4283      	cmp	r3, r0
   82df2:	f000 808a 	beq.w	82f0a <_malloc_r+0x496>
   82df6:	685a      	ldr	r2, [r3, #4]
   82df8:	f022 0203 	bic.w	r2, r2, #3
   82dfc:	4291      	cmp	r1, r2
   82dfe:	d202      	bcs.n	82e06 <_malloc_r+0x392>
   82e00:	689b      	ldr	r3, [r3, #8]
   82e02:	4298      	cmp	r0, r3
   82e04:	d1f7      	bne.n	82df6 <_malloc_r+0x382>
   82e06:	68d9      	ldr	r1, [r3, #12]
   82e08:	687a      	ldr	r2, [r7, #4]
   82e0a:	60e1      	str	r1, [r4, #12]
   82e0c:	60a3      	str	r3, [r4, #8]
   82e0e:	608c      	str	r4, [r1, #8]
   82e10:	60dc      	str	r4, [r3, #12]
   82e12:	e6b6      	b.n	82b82 <_malloc_r+0x10e>
   82e14:	f045 0701 	orr.w	r7, r5, #1
   82e18:	f042 0101 	orr.w	r1, r2, #1
   82e1c:	4425      	add	r5, r4
   82e1e:	6067      	str	r7, [r4, #4]
   82e20:	4630      	mov	r0, r6
   82e22:	615d      	str	r5, [r3, #20]
   82e24:	611d      	str	r5, [r3, #16]
   82e26:	f8c5 e00c 	str.w	lr, [r5, #12]
   82e2a:	f8c5 e008 	str.w	lr, [r5, #8]
   82e2e:	6069      	str	r1, [r5, #4]
   82e30:	50aa      	str	r2, [r5, r2]
   82e32:	3408      	adds	r4, #8
   82e34:	f000 f9e2 	bl	831fc <__malloc_unlock>
   82e38:	e648      	b.n	82acc <_malloc_r+0x58>
   82e3a:	685a      	ldr	r2, [r3, #4]
   82e3c:	e6a1      	b.n	82b82 <_malloc_r+0x10e>
   82e3e:	f109 0901 	add.w	r9, r9, #1
   82e42:	f019 0f03 	tst.w	r9, #3
   82e46:	f104 0408 	add.w	r4, r4, #8
   82e4a:	f47f aead 	bne.w	82ba8 <_malloc_r+0x134>
   82e4e:	e02d      	b.n	82eac <_malloc_r+0x438>
   82e50:	f104 0308 	add.w	r3, r4, #8
   82e54:	6964      	ldr	r4, [r4, #20]
   82e56:	42a3      	cmp	r3, r4
   82e58:	bf08      	it	eq
   82e5a:	f10c 0c02 	addeq.w	ip, ip, #2
   82e5e:	f43f ae67 	beq.w	82b30 <_malloc_r+0xbc>
   82e62:	e623      	b.n	82aac <_malloc_r+0x38>
   82e64:	4419      	add	r1, r3
   82e66:	6848      	ldr	r0, [r1, #4]
   82e68:	461c      	mov	r4, r3
   82e6a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82e6e:	68db      	ldr	r3, [r3, #12]
   82e70:	f040 0501 	orr.w	r5, r0, #1
   82e74:	604d      	str	r5, [r1, #4]
   82e76:	4630      	mov	r0, r6
   82e78:	60d3      	str	r3, [r2, #12]
   82e7a:	609a      	str	r2, [r3, #8]
   82e7c:	f000 f9be 	bl	831fc <__malloc_unlock>
   82e80:	e624      	b.n	82acc <_malloc_r+0x58>
   82e82:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82e86:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82e8a:	e63b      	b.n	82b04 <_malloc_r+0x90>
   82e8c:	098a      	lsrs	r2, r1, #6
   82e8e:	3238      	adds	r2, #56	; 0x38
   82e90:	0050      	lsls	r0, r2, #1
   82e92:	e7a8      	b.n	82de6 <_malloc_r+0x372>
   82e94:	42bc      	cmp	r4, r7
   82e96:	f43f af02 	beq.w	82c9e <_malloc_r+0x22a>
   82e9a:	68bc      	ldr	r4, [r7, #8]
   82e9c:	6862      	ldr	r2, [r4, #4]
   82e9e:	f022 0203 	bic.w	r2, r2, #3
   82ea2:	e761      	b.n	82d68 <_malloc_r+0x2f4>
   82ea4:	f8d8 8000 	ldr.w	r8, [r8]
   82ea8:	4598      	cmp	r8, r3
   82eaa:	d17a      	bne.n	82fa2 <_malloc_r+0x52e>
   82eac:	f01c 0f03 	tst.w	ip, #3
   82eb0:	f1a8 0308 	sub.w	r3, r8, #8
   82eb4:	f10c 3cff 	add.w	ip, ip, #4294967295
   82eb8:	d1f4      	bne.n	82ea4 <_malloc_r+0x430>
   82eba:	687b      	ldr	r3, [r7, #4]
   82ebc:	ea23 0300 	bic.w	r3, r3, r0
   82ec0:	607b      	str	r3, [r7, #4]
   82ec2:	0040      	lsls	r0, r0, #1
   82ec4:	4298      	cmp	r0, r3
   82ec6:	f63f aebe 	bhi.w	82c46 <_malloc_r+0x1d2>
   82eca:	2800      	cmp	r0, #0
   82ecc:	f43f aebb 	beq.w	82c46 <_malloc_r+0x1d2>
   82ed0:	4203      	tst	r3, r0
   82ed2:	46cc      	mov	ip, r9
   82ed4:	f47f ae64 	bne.w	82ba0 <_malloc_r+0x12c>
   82ed8:	0040      	lsls	r0, r0, #1
   82eda:	4203      	tst	r3, r0
   82edc:	f10c 0c04 	add.w	ip, ip, #4
   82ee0:	d0fa      	beq.n	82ed8 <_malloc_r+0x464>
   82ee2:	e65d      	b.n	82ba0 <_malloc_r+0x12c>
   82ee4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82ee8:	d819      	bhi.n	82f1e <_malloc_r+0x4aa>
   82eea:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82eee:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82ef2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ef6:	e605      	b.n	82b04 <_malloc_r+0x90>
   82ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82efc:	e6ee      	b.n	82cdc <_malloc_r+0x268>
   82efe:	2301      	movs	r3, #1
   82f00:	f8c8 3004 	str.w	r3, [r8, #4]
   82f04:	4644      	mov	r4, r8
   82f06:	2200      	movs	r2, #0
   82f08:	e72e      	b.n	82d68 <_malloc_r+0x2f4>
   82f0a:	1092      	asrs	r2, r2, #2
   82f0c:	2001      	movs	r0, #1
   82f0e:	4090      	lsls	r0, r2
   82f10:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82f14:	4619      	mov	r1, r3
   82f16:	4302      	orrs	r2, r0
   82f18:	f8c8 2004 	str.w	r2, [r8, #4]
   82f1c:	e775      	b.n	82e0a <_malloc_r+0x396>
   82f1e:	f240 5354 	movw	r3, #1364	; 0x554
   82f22:	459c      	cmp	ip, r3
   82f24:	d81b      	bhi.n	82f5e <_malloc_r+0x4ea>
   82f26:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82f2a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82f2e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82f32:	e5e7      	b.n	82b04 <_malloc_r+0x90>
   82f34:	f10a 0a10 	add.w	sl, sl, #16
   82f38:	e6a3      	b.n	82c82 <_malloc_r+0x20e>
   82f3a:	2b54      	cmp	r3, #84	; 0x54
   82f3c:	d81f      	bhi.n	82f7e <_malloc_r+0x50a>
   82f3e:	0b0a      	lsrs	r2, r1, #12
   82f40:	326e      	adds	r2, #110	; 0x6e
   82f42:	0050      	lsls	r0, r2, #1
   82f44:	e74f      	b.n	82de6 <_malloc_r+0x372>
   82f46:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82f4a:	2900      	cmp	r1, #0
   82f4c:	f47f aeb1 	bne.w	82cb2 <_malloc_r+0x23e>
   82f50:	eb0a 0109 	add.w	r1, sl, r9
   82f54:	68ba      	ldr	r2, [r7, #8]
   82f56:	f041 0101 	orr.w	r1, r1, #1
   82f5a:	6051      	str	r1, [r2, #4]
   82f5c:	e6f6      	b.n	82d4c <_malloc_r+0x2d8>
   82f5e:	21fc      	movs	r1, #252	; 0xfc
   82f60:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82f64:	e5ce      	b.n	82b04 <_malloc_r+0x90>
   82f66:	2201      	movs	r2, #1
   82f68:	f04f 0a00 	mov.w	sl, #0
   82f6c:	e6cb      	b.n	82d06 <_malloc_r+0x292>
   82f6e:	f104 0108 	add.w	r1, r4, #8
   82f72:	4630      	mov	r0, r6
   82f74:	f7ff fa80 	bl	82478 <_free_r>
   82f78:	f8da 3000 	ldr.w	r3, [sl]
   82f7c:	e6e6      	b.n	82d4c <_malloc_r+0x2d8>
   82f7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f82:	d803      	bhi.n	82f8c <_malloc_r+0x518>
   82f84:	0bca      	lsrs	r2, r1, #15
   82f86:	3277      	adds	r2, #119	; 0x77
   82f88:	0050      	lsls	r0, r2, #1
   82f8a:	e72c      	b.n	82de6 <_malloc_r+0x372>
   82f8c:	f240 5254 	movw	r2, #1364	; 0x554
   82f90:	4293      	cmp	r3, r2
   82f92:	d803      	bhi.n	82f9c <_malloc_r+0x528>
   82f94:	0c8a      	lsrs	r2, r1, #18
   82f96:	327c      	adds	r2, #124	; 0x7c
   82f98:	0050      	lsls	r0, r2, #1
   82f9a:	e724      	b.n	82de6 <_malloc_r+0x372>
   82f9c:	20fc      	movs	r0, #252	; 0xfc
   82f9e:	227e      	movs	r2, #126	; 0x7e
   82fa0:	e721      	b.n	82de6 <_malloc_r+0x372>
   82fa2:	687b      	ldr	r3, [r7, #4]
   82fa4:	e78d      	b.n	82ec2 <_malloc_r+0x44e>
   82fa6:	bf00      	nop
   82fa8:	20070580 	.word	0x20070580

00082fac <memchr>:
   82fac:	0783      	lsls	r3, r0, #30
   82fae:	b470      	push	{r4, r5, r6}
   82fb0:	b2c9      	uxtb	r1, r1
   82fb2:	d040      	beq.n	83036 <memchr+0x8a>
   82fb4:	1e54      	subs	r4, r2, #1
   82fb6:	b32a      	cbz	r2, 83004 <memchr+0x58>
   82fb8:	7803      	ldrb	r3, [r0, #0]
   82fba:	428b      	cmp	r3, r1
   82fbc:	d023      	beq.n	83006 <memchr+0x5a>
   82fbe:	1c43      	adds	r3, r0, #1
   82fc0:	e004      	b.n	82fcc <memchr+0x20>
   82fc2:	b1fc      	cbz	r4, 83004 <memchr+0x58>
   82fc4:	7805      	ldrb	r5, [r0, #0]
   82fc6:	4614      	mov	r4, r2
   82fc8:	428d      	cmp	r5, r1
   82fca:	d01c      	beq.n	83006 <memchr+0x5a>
   82fcc:	f013 0f03 	tst.w	r3, #3
   82fd0:	4618      	mov	r0, r3
   82fd2:	f104 32ff 	add.w	r2, r4, #4294967295
   82fd6:	f103 0301 	add.w	r3, r3, #1
   82fda:	d1f2      	bne.n	82fc2 <memchr+0x16>
   82fdc:	2c03      	cmp	r4, #3
   82fde:	d814      	bhi.n	8300a <memchr+0x5e>
   82fe0:	1e65      	subs	r5, r4, #1
   82fe2:	b354      	cbz	r4, 8303a <memchr+0x8e>
   82fe4:	7803      	ldrb	r3, [r0, #0]
   82fe6:	428b      	cmp	r3, r1
   82fe8:	d00d      	beq.n	83006 <memchr+0x5a>
   82fea:	1c42      	adds	r2, r0, #1
   82fec:	2300      	movs	r3, #0
   82fee:	e002      	b.n	82ff6 <memchr+0x4a>
   82ff0:	7804      	ldrb	r4, [r0, #0]
   82ff2:	428c      	cmp	r4, r1
   82ff4:	d007      	beq.n	83006 <memchr+0x5a>
   82ff6:	42ab      	cmp	r3, r5
   82ff8:	4610      	mov	r0, r2
   82ffa:	f103 0301 	add.w	r3, r3, #1
   82ffe:	f102 0201 	add.w	r2, r2, #1
   83002:	d1f5      	bne.n	82ff0 <memchr+0x44>
   83004:	2000      	movs	r0, #0
   83006:	bc70      	pop	{r4, r5, r6}
   83008:	4770      	bx	lr
   8300a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8300e:	4603      	mov	r3, r0
   83010:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83014:	681a      	ldr	r2, [r3, #0]
   83016:	4618      	mov	r0, r3
   83018:	4072      	eors	r2, r6
   8301a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8301e:	ea25 0202 	bic.w	r2, r5, r2
   83022:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83026:	f103 0304 	add.w	r3, r3, #4
   8302a:	d1d9      	bne.n	82fe0 <memchr+0x34>
   8302c:	3c04      	subs	r4, #4
   8302e:	2c03      	cmp	r4, #3
   83030:	4618      	mov	r0, r3
   83032:	d8ef      	bhi.n	83014 <memchr+0x68>
   83034:	e7d4      	b.n	82fe0 <memchr+0x34>
   83036:	4614      	mov	r4, r2
   83038:	e7d0      	b.n	82fdc <memchr+0x30>
   8303a:	4620      	mov	r0, r4
   8303c:	e7e3      	b.n	83006 <memchr+0x5a>
   8303e:	bf00      	nop

00083040 <memcpy>:
   83040:	4684      	mov	ip, r0
   83042:	ea41 0300 	orr.w	r3, r1, r0
   83046:	f013 0303 	ands.w	r3, r3, #3
   8304a:	d149      	bne.n	830e0 <memcpy+0xa0>
   8304c:	3a40      	subs	r2, #64	; 0x40
   8304e:	d323      	bcc.n	83098 <memcpy+0x58>
   83050:	680b      	ldr	r3, [r1, #0]
   83052:	6003      	str	r3, [r0, #0]
   83054:	684b      	ldr	r3, [r1, #4]
   83056:	6043      	str	r3, [r0, #4]
   83058:	688b      	ldr	r3, [r1, #8]
   8305a:	6083      	str	r3, [r0, #8]
   8305c:	68cb      	ldr	r3, [r1, #12]
   8305e:	60c3      	str	r3, [r0, #12]
   83060:	690b      	ldr	r3, [r1, #16]
   83062:	6103      	str	r3, [r0, #16]
   83064:	694b      	ldr	r3, [r1, #20]
   83066:	6143      	str	r3, [r0, #20]
   83068:	698b      	ldr	r3, [r1, #24]
   8306a:	6183      	str	r3, [r0, #24]
   8306c:	69cb      	ldr	r3, [r1, #28]
   8306e:	61c3      	str	r3, [r0, #28]
   83070:	6a0b      	ldr	r3, [r1, #32]
   83072:	6203      	str	r3, [r0, #32]
   83074:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83076:	6243      	str	r3, [r0, #36]	; 0x24
   83078:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8307a:	6283      	str	r3, [r0, #40]	; 0x28
   8307c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8307e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83080:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83082:	6303      	str	r3, [r0, #48]	; 0x30
   83084:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83086:	6343      	str	r3, [r0, #52]	; 0x34
   83088:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8308a:	6383      	str	r3, [r0, #56]	; 0x38
   8308c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8308e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83090:	3040      	adds	r0, #64	; 0x40
   83092:	3140      	adds	r1, #64	; 0x40
   83094:	3a40      	subs	r2, #64	; 0x40
   83096:	d2db      	bcs.n	83050 <memcpy+0x10>
   83098:	3230      	adds	r2, #48	; 0x30
   8309a:	d30b      	bcc.n	830b4 <memcpy+0x74>
   8309c:	680b      	ldr	r3, [r1, #0]
   8309e:	6003      	str	r3, [r0, #0]
   830a0:	684b      	ldr	r3, [r1, #4]
   830a2:	6043      	str	r3, [r0, #4]
   830a4:	688b      	ldr	r3, [r1, #8]
   830a6:	6083      	str	r3, [r0, #8]
   830a8:	68cb      	ldr	r3, [r1, #12]
   830aa:	60c3      	str	r3, [r0, #12]
   830ac:	3010      	adds	r0, #16
   830ae:	3110      	adds	r1, #16
   830b0:	3a10      	subs	r2, #16
   830b2:	d2f3      	bcs.n	8309c <memcpy+0x5c>
   830b4:	320c      	adds	r2, #12
   830b6:	d305      	bcc.n	830c4 <memcpy+0x84>
   830b8:	f851 3b04 	ldr.w	r3, [r1], #4
   830bc:	f840 3b04 	str.w	r3, [r0], #4
   830c0:	3a04      	subs	r2, #4
   830c2:	d2f9      	bcs.n	830b8 <memcpy+0x78>
   830c4:	3204      	adds	r2, #4
   830c6:	d008      	beq.n	830da <memcpy+0x9a>
   830c8:	07d2      	lsls	r2, r2, #31
   830ca:	bf1c      	itt	ne
   830cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   830d0:	f800 3b01 	strbne.w	r3, [r0], #1
   830d4:	d301      	bcc.n	830da <memcpy+0x9a>
   830d6:	880b      	ldrh	r3, [r1, #0]
   830d8:	8003      	strh	r3, [r0, #0]
   830da:	4660      	mov	r0, ip
   830dc:	4770      	bx	lr
   830de:	bf00      	nop
   830e0:	2a08      	cmp	r2, #8
   830e2:	d313      	bcc.n	8310c <memcpy+0xcc>
   830e4:	078b      	lsls	r3, r1, #30
   830e6:	d0b1      	beq.n	8304c <memcpy+0xc>
   830e8:	f010 0303 	ands.w	r3, r0, #3
   830ec:	d0ae      	beq.n	8304c <memcpy+0xc>
   830ee:	f1c3 0304 	rsb	r3, r3, #4
   830f2:	1ad2      	subs	r2, r2, r3
   830f4:	07db      	lsls	r3, r3, #31
   830f6:	bf1c      	itt	ne
   830f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   830fc:	f800 3b01 	strbne.w	r3, [r0], #1
   83100:	d3a4      	bcc.n	8304c <memcpy+0xc>
   83102:	f831 3b02 	ldrh.w	r3, [r1], #2
   83106:	f820 3b02 	strh.w	r3, [r0], #2
   8310a:	e79f      	b.n	8304c <memcpy+0xc>
   8310c:	3a04      	subs	r2, #4
   8310e:	d3d9      	bcc.n	830c4 <memcpy+0x84>
   83110:	3a01      	subs	r2, #1
   83112:	f811 3b01 	ldrb.w	r3, [r1], #1
   83116:	f800 3b01 	strb.w	r3, [r0], #1
   8311a:	d2f9      	bcs.n	83110 <memcpy+0xd0>
   8311c:	780b      	ldrb	r3, [r1, #0]
   8311e:	7003      	strb	r3, [r0, #0]
   83120:	784b      	ldrb	r3, [r1, #1]
   83122:	7043      	strb	r3, [r0, #1]
   83124:	788b      	ldrb	r3, [r1, #2]
   83126:	7083      	strb	r3, [r0, #2]
   83128:	4660      	mov	r0, ip
   8312a:	4770      	bx	lr

0008312c <memmove>:
   8312c:	4288      	cmp	r0, r1
   8312e:	b4f0      	push	{r4, r5, r6, r7}
   83130:	d910      	bls.n	83154 <memmove+0x28>
   83132:	188c      	adds	r4, r1, r2
   83134:	42a0      	cmp	r0, r4
   83136:	d20d      	bcs.n	83154 <memmove+0x28>
   83138:	1885      	adds	r5, r0, r2
   8313a:	1e53      	subs	r3, r2, #1
   8313c:	b142      	cbz	r2, 83150 <memmove+0x24>
   8313e:	4621      	mov	r1, r4
   83140:	462a      	mov	r2, r5
   83142:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83146:	3b01      	subs	r3, #1
   83148:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8314c:	1c5c      	adds	r4, r3, #1
   8314e:	d1f8      	bne.n	83142 <memmove+0x16>
   83150:	bcf0      	pop	{r4, r5, r6, r7}
   83152:	4770      	bx	lr
   83154:	2a0f      	cmp	r2, #15
   83156:	d944      	bls.n	831e2 <memmove+0xb6>
   83158:	ea40 0301 	orr.w	r3, r0, r1
   8315c:	079b      	lsls	r3, r3, #30
   8315e:	d144      	bne.n	831ea <memmove+0xbe>
   83160:	f1a2 0710 	sub.w	r7, r2, #16
   83164:	093f      	lsrs	r7, r7, #4
   83166:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   8316a:	3610      	adds	r6, #16
   8316c:	460c      	mov	r4, r1
   8316e:	4603      	mov	r3, r0
   83170:	6825      	ldr	r5, [r4, #0]
   83172:	3310      	adds	r3, #16
   83174:	f843 5c10 	str.w	r5, [r3, #-16]
   83178:	6865      	ldr	r5, [r4, #4]
   8317a:	3410      	adds	r4, #16
   8317c:	f843 5c0c 	str.w	r5, [r3, #-12]
   83180:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83184:	f843 5c08 	str.w	r5, [r3, #-8]
   83188:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8318c:	f843 5c04 	str.w	r5, [r3, #-4]
   83190:	42b3      	cmp	r3, r6
   83192:	d1ed      	bne.n	83170 <memmove+0x44>
   83194:	1c7b      	adds	r3, r7, #1
   83196:	f002 0c0f 	and.w	ip, r2, #15
   8319a:	011b      	lsls	r3, r3, #4
   8319c:	f1bc 0f03 	cmp.w	ip, #3
   831a0:	4419      	add	r1, r3
   831a2:	4403      	add	r3, r0
   831a4:	d923      	bls.n	831ee <memmove+0xc2>
   831a6:	460e      	mov	r6, r1
   831a8:	461d      	mov	r5, r3
   831aa:	4664      	mov	r4, ip
   831ac:	f856 7b04 	ldr.w	r7, [r6], #4
   831b0:	3c04      	subs	r4, #4
   831b2:	2c03      	cmp	r4, #3
   831b4:	f845 7b04 	str.w	r7, [r5], #4
   831b8:	d8f8      	bhi.n	831ac <memmove+0x80>
   831ba:	f1ac 0404 	sub.w	r4, ip, #4
   831be:	f024 0403 	bic.w	r4, r4, #3
   831c2:	3404      	adds	r4, #4
   831c4:	f002 0203 	and.w	r2, r2, #3
   831c8:	4423      	add	r3, r4
   831ca:	4421      	add	r1, r4
   831cc:	2a00      	cmp	r2, #0
   831ce:	d0bf      	beq.n	83150 <memmove+0x24>
   831d0:	441a      	add	r2, r3
   831d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   831d6:	f803 4b01 	strb.w	r4, [r3], #1
   831da:	4293      	cmp	r3, r2
   831dc:	d1f9      	bne.n	831d2 <memmove+0xa6>
   831de:	bcf0      	pop	{r4, r5, r6, r7}
   831e0:	4770      	bx	lr
   831e2:	4603      	mov	r3, r0
   831e4:	2a00      	cmp	r2, #0
   831e6:	d1f3      	bne.n	831d0 <memmove+0xa4>
   831e8:	e7b2      	b.n	83150 <memmove+0x24>
   831ea:	4603      	mov	r3, r0
   831ec:	e7f0      	b.n	831d0 <memmove+0xa4>
   831ee:	4662      	mov	r2, ip
   831f0:	2a00      	cmp	r2, #0
   831f2:	d1ed      	bne.n	831d0 <memmove+0xa4>
   831f4:	e7ac      	b.n	83150 <memmove+0x24>
   831f6:	bf00      	nop

000831f8 <__malloc_lock>:
   831f8:	4770      	bx	lr
   831fa:	bf00      	nop

000831fc <__malloc_unlock>:
   831fc:	4770      	bx	lr
   831fe:	bf00      	nop

00083200 <_realloc_r>:
   83200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83204:	460c      	mov	r4, r1
   83206:	b083      	sub	sp, #12
   83208:	4690      	mov	r8, r2
   8320a:	4681      	mov	r9, r0
   8320c:	2900      	cmp	r1, #0
   8320e:	f000 80ba 	beq.w	83386 <_realloc_r+0x186>
   83212:	f7ff fff1 	bl	831f8 <__malloc_lock>
   83216:	f108 060b 	add.w	r6, r8, #11
   8321a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8321e:	2e16      	cmp	r6, #22
   83220:	f023 0503 	bic.w	r5, r3, #3
   83224:	f1a4 0708 	sub.w	r7, r4, #8
   83228:	d84b      	bhi.n	832c2 <_realloc_r+0xc2>
   8322a:	2110      	movs	r1, #16
   8322c:	460e      	mov	r6, r1
   8322e:	45b0      	cmp	r8, r6
   83230:	d84c      	bhi.n	832cc <_realloc_r+0xcc>
   83232:	428d      	cmp	r5, r1
   83234:	da51      	bge.n	832da <_realloc_r+0xda>
   83236:	f8df b384 	ldr.w	fp, [pc, #900]	; 835bc <_realloc_r+0x3bc>
   8323a:	1978      	adds	r0, r7, r5
   8323c:	f8db e008 	ldr.w	lr, [fp, #8]
   83240:	4586      	cmp	lr, r0
   83242:	f000 80a6 	beq.w	83392 <_realloc_r+0x192>
   83246:	6842      	ldr	r2, [r0, #4]
   83248:	f022 0c01 	bic.w	ip, r2, #1
   8324c:	4484      	add	ip, r0
   8324e:	f8dc c004 	ldr.w	ip, [ip, #4]
   83252:	f01c 0f01 	tst.w	ip, #1
   83256:	d054      	beq.n	83302 <_realloc_r+0x102>
   83258:	2200      	movs	r2, #0
   8325a:	4610      	mov	r0, r2
   8325c:	07db      	lsls	r3, r3, #31
   8325e:	d46f      	bmi.n	83340 <_realloc_r+0x140>
   83260:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83264:	ebc3 0a07 	rsb	sl, r3, r7
   83268:	f8da 3004 	ldr.w	r3, [sl, #4]
   8326c:	f023 0303 	bic.w	r3, r3, #3
   83270:	442b      	add	r3, r5
   83272:	2800      	cmp	r0, #0
   83274:	d062      	beq.n	8333c <_realloc_r+0x13c>
   83276:	4570      	cmp	r0, lr
   83278:	f000 80e9 	beq.w	8344e <_realloc_r+0x24e>
   8327c:	eb02 0e03 	add.w	lr, r2, r3
   83280:	458e      	cmp	lr, r1
   83282:	db5b      	blt.n	8333c <_realloc_r+0x13c>
   83284:	68c3      	ldr	r3, [r0, #12]
   83286:	6882      	ldr	r2, [r0, #8]
   83288:	46d0      	mov	r8, sl
   8328a:	60d3      	str	r3, [r2, #12]
   8328c:	609a      	str	r2, [r3, #8]
   8328e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83292:	f8da 300c 	ldr.w	r3, [sl, #12]
   83296:	1f2a      	subs	r2, r5, #4
   83298:	2a24      	cmp	r2, #36	; 0x24
   8329a:	60cb      	str	r3, [r1, #12]
   8329c:	6099      	str	r1, [r3, #8]
   8329e:	f200 8123 	bhi.w	834e8 <_realloc_r+0x2e8>
   832a2:	2a13      	cmp	r2, #19
   832a4:	f240 80b0 	bls.w	83408 <_realloc_r+0x208>
   832a8:	6823      	ldr	r3, [r4, #0]
   832aa:	2a1b      	cmp	r2, #27
   832ac:	f8ca 3008 	str.w	r3, [sl, #8]
   832b0:	6863      	ldr	r3, [r4, #4]
   832b2:	f8ca 300c 	str.w	r3, [sl, #12]
   832b6:	f200 812b 	bhi.w	83510 <_realloc_r+0x310>
   832ba:	3408      	adds	r4, #8
   832bc:	f10a 0310 	add.w	r3, sl, #16
   832c0:	e0a3      	b.n	8340a <_realloc_r+0x20a>
   832c2:	f026 0607 	bic.w	r6, r6, #7
   832c6:	2e00      	cmp	r6, #0
   832c8:	4631      	mov	r1, r6
   832ca:	dab0      	bge.n	8322e <_realloc_r+0x2e>
   832cc:	230c      	movs	r3, #12
   832ce:	2000      	movs	r0, #0
   832d0:	f8c9 3000 	str.w	r3, [r9]
   832d4:	b003      	add	sp, #12
   832d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832da:	46a0      	mov	r8, r4
   832dc:	1baa      	subs	r2, r5, r6
   832de:	2a0f      	cmp	r2, #15
   832e0:	f003 0301 	and.w	r3, r3, #1
   832e4:	d81a      	bhi.n	8331c <_realloc_r+0x11c>
   832e6:	432b      	orrs	r3, r5
   832e8:	607b      	str	r3, [r7, #4]
   832ea:	443d      	add	r5, r7
   832ec:	686b      	ldr	r3, [r5, #4]
   832ee:	f043 0301 	orr.w	r3, r3, #1
   832f2:	606b      	str	r3, [r5, #4]
   832f4:	4648      	mov	r0, r9
   832f6:	f7ff ff81 	bl	831fc <__malloc_unlock>
   832fa:	4640      	mov	r0, r8
   832fc:	b003      	add	sp, #12
   832fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83302:	f022 0203 	bic.w	r2, r2, #3
   83306:	eb02 0c05 	add.w	ip, r2, r5
   8330a:	458c      	cmp	ip, r1
   8330c:	dba6      	blt.n	8325c <_realloc_r+0x5c>
   8330e:	68c2      	ldr	r2, [r0, #12]
   83310:	6881      	ldr	r1, [r0, #8]
   83312:	46a0      	mov	r8, r4
   83314:	60ca      	str	r2, [r1, #12]
   83316:	4665      	mov	r5, ip
   83318:	6091      	str	r1, [r2, #8]
   8331a:	e7df      	b.n	832dc <_realloc_r+0xdc>
   8331c:	19b9      	adds	r1, r7, r6
   8331e:	4333      	orrs	r3, r6
   83320:	f042 0001 	orr.w	r0, r2, #1
   83324:	607b      	str	r3, [r7, #4]
   83326:	440a      	add	r2, r1
   83328:	6048      	str	r0, [r1, #4]
   8332a:	6853      	ldr	r3, [r2, #4]
   8332c:	3108      	adds	r1, #8
   8332e:	f043 0301 	orr.w	r3, r3, #1
   83332:	6053      	str	r3, [r2, #4]
   83334:	4648      	mov	r0, r9
   83336:	f7ff f89f 	bl	82478 <_free_r>
   8333a:	e7db      	b.n	832f4 <_realloc_r+0xf4>
   8333c:	428b      	cmp	r3, r1
   8333e:	da33      	bge.n	833a8 <_realloc_r+0x1a8>
   83340:	4641      	mov	r1, r8
   83342:	4648      	mov	r0, r9
   83344:	f7ff fb96 	bl	82a74 <_malloc_r>
   83348:	4680      	mov	r8, r0
   8334a:	2800      	cmp	r0, #0
   8334c:	d0d2      	beq.n	832f4 <_realloc_r+0xf4>
   8334e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83352:	f1a0 0108 	sub.w	r1, r0, #8
   83356:	f023 0201 	bic.w	r2, r3, #1
   8335a:	443a      	add	r2, r7
   8335c:	4291      	cmp	r1, r2
   8335e:	f000 80bc 	beq.w	834da <_realloc_r+0x2da>
   83362:	1f2a      	subs	r2, r5, #4
   83364:	2a24      	cmp	r2, #36	; 0x24
   83366:	d86e      	bhi.n	83446 <_realloc_r+0x246>
   83368:	2a13      	cmp	r2, #19
   8336a:	d842      	bhi.n	833f2 <_realloc_r+0x1f2>
   8336c:	4603      	mov	r3, r0
   8336e:	4622      	mov	r2, r4
   83370:	6811      	ldr	r1, [r2, #0]
   83372:	6019      	str	r1, [r3, #0]
   83374:	6851      	ldr	r1, [r2, #4]
   83376:	6059      	str	r1, [r3, #4]
   83378:	6892      	ldr	r2, [r2, #8]
   8337a:	609a      	str	r2, [r3, #8]
   8337c:	4621      	mov	r1, r4
   8337e:	4648      	mov	r0, r9
   83380:	f7ff f87a 	bl	82478 <_free_r>
   83384:	e7b6      	b.n	832f4 <_realloc_r+0xf4>
   83386:	4611      	mov	r1, r2
   83388:	b003      	add	sp, #12
   8338a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8338e:	f7ff bb71 	b.w	82a74 <_malloc_r>
   83392:	f8de 2004 	ldr.w	r2, [lr, #4]
   83396:	f106 0c10 	add.w	ip, r6, #16
   8339a:	f022 0203 	bic.w	r2, r2, #3
   8339e:	1950      	adds	r0, r2, r5
   833a0:	4560      	cmp	r0, ip
   833a2:	da3d      	bge.n	83420 <_realloc_r+0x220>
   833a4:	4670      	mov	r0, lr
   833a6:	e759      	b.n	8325c <_realloc_r+0x5c>
   833a8:	46d0      	mov	r8, sl
   833aa:	f858 0f08 	ldr.w	r0, [r8, #8]!
   833ae:	f8da 100c 	ldr.w	r1, [sl, #12]
   833b2:	1f2a      	subs	r2, r5, #4
   833b4:	2a24      	cmp	r2, #36	; 0x24
   833b6:	60c1      	str	r1, [r0, #12]
   833b8:	6088      	str	r0, [r1, #8]
   833ba:	f200 80a0 	bhi.w	834fe <_realloc_r+0x2fe>
   833be:	2a13      	cmp	r2, #19
   833c0:	f240 809b 	bls.w	834fa <_realloc_r+0x2fa>
   833c4:	6821      	ldr	r1, [r4, #0]
   833c6:	2a1b      	cmp	r2, #27
   833c8:	f8ca 1008 	str.w	r1, [sl, #8]
   833cc:	6861      	ldr	r1, [r4, #4]
   833ce:	f8ca 100c 	str.w	r1, [sl, #12]
   833d2:	f200 80b2 	bhi.w	8353a <_realloc_r+0x33a>
   833d6:	3408      	adds	r4, #8
   833d8:	f10a 0210 	add.w	r2, sl, #16
   833dc:	6821      	ldr	r1, [r4, #0]
   833de:	461d      	mov	r5, r3
   833e0:	6011      	str	r1, [r2, #0]
   833e2:	6861      	ldr	r1, [r4, #4]
   833e4:	4657      	mov	r7, sl
   833e6:	6051      	str	r1, [r2, #4]
   833e8:	68a3      	ldr	r3, [r4, #8]
   833ea:	6093      	str	r3, [r2, #8]
   833ec:	f8da 3004 	ldr.w	r3, [sl, #4]
   833f0:	e774      	b.n	832dc <_realloc_r+0xdc>
   833f2:	6823      	ldr	r3, [r4, #0]
   833f4:	2a1b      	cmp	r2, #27
   833f6:	6003      	str	r3, [r0, #0]
   833f8:	6863      	ldr	r3, [r4, #4]
   833fa:	6043      	str	r3, [r0, #4]
   833fc:	d862      	bhi.n	834c4 <_realloc_r+0x2c4>
   833fe:	f100 0308 	add.w	r3, r0, #8
   83402:	f104 0208 	add.w	r2, r4, #8
   83406:	e7b3      	b.n	83370 <_realloc_r+0x170>
   83408:	4643      	mov	r3, r8
   8340a:	6822      	ldr	r2, [r4, #0]
   8340c:	4675      	mov	r5, lr
   8340e:	601a      	str	r2, [r3, #0]
   83410:	6862      	ldr	r2, [r4, #4]
   83412:	4657      	mov	r7, sl
   83414:	605a      	str	r2, [r3, #4]
   83416:	68a2      	ldr	r2, [r4, #8]
   83418:	609a      	str	r2, [r3, #8]
   8341a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8341e:	e75d      	b.n	832dc <_realloc_r+0xdc>
   83420:	1b83      	subs	r3, r0, r6
   83422:	4437      	add	r7, r6
   83424:	f043 0301 	orr.w	r3, r3, #1
   83428:	f8cb 7008 	str.w	r7, [fp, #8]
   8342c:	607b      	str	r3, [r7, #4]
   8342e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83432:	4648      	mov	r0, r9
   83434:	f003 0301 	and.w	r3, r3, #1
   83438:	431e      	orrs	r6, r3
   8343a:	f844 6c04 	str.w	r6, [r4, #-4]
   8343e:	f7ff fedd 	bl	831fc <__malloc_unlock>
   83442:	4620      	mov	r0, r4
   83444:	e75a      	b.n	832fc <_realloc_r+0xfc>
   83446:	4621      	mov	r1, r4
   83448:	f7ff fe70 	bl	8312c <memmove>
   8344c:	e796      	b.n	8337c <_realloc_r+0x17c>
   8344e:	eb02 0c03 	add.w	ip, r2, r3
   83452:	f106 0210 	add.w	r2, r6, #16
   83456:	4594      	cmp	ip, r2
   83458:	f6ff af70 	blt.w	8333c <_realloc_r+0x13c>
   8345c:	4657      	mov	r7, sl
   8345e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83462:	f8da 300c 	ldr.w	r3, [sl, #12]
   83466:	1f2a      	subs	r2, r5, #4
   83468:	2a24      	cmp	r2, #36	; 0x24
   8346a:	60cb      	str	r3, [r1, #12]
   8346c:	6099      	str	r1, [r3, #8]
   8346e:	f200 8086 	bhi.w	8357e <_realloc_r+0x37e>
   83472:	2a13      	cmp	r2, #19
   83474:	d977      	bls.n	83566 <_realloc_r+0x366>
   83476:	6823      	ldr	r3, [r4, #0]
   83478:	2a1b      	cmp	r2, #27
   8347a:	f8ca 3008 	str.w	r3, [sl, #8]
   8347e:	6863      	ldr	r3, [r4, #4]
   83480:	f8ca 300c 	str.w	r3, [sl, #12]
   83484:	f200 8084 	bhi.w	83590 <_realloc_r+0x390>
   83488:	3408      	adds	r4, #8
   8348a:	f10a 0310 	add.w	r3, sl, #16
   8348e:	6822      	ldr	r2, [r4, #0]
   83490:	601a      	str	r2, [r3, #0]
   83492:	6862      	ldr	r2, [r4, #4]
   83494:	605a      	str	r2, [r3, #4]
   83496:	68a2      	ldr	r2, [r4, #8]
   83498:	609a      	str	r2, [r3, #8]
   8349a:	ebc6 020c 	rsb	r2, r6, ip
   8349e:	eb0a 0306 	add.w	r3, sl, r6
   834a2:	f042 0201 	orr.w	r2, r2, #1
   834a6:	f8cb 3008 	str.w	r3, [fp, #8]
   834aa:	605a      	str	r2, [r3, #4]
   834ac:	f8da 3004 	ldr.w	r3, [sl, #4]
   834b0:	4648      	mov	r0, r9
   834b2:	f003 0301 	and.w	r3, r3, #1
   834b6:	431e      	orrs	r6, r3
   834b8:	f8ca 6004 	str.w	r6, [sl, #4]
   834bc:	f7ff fe9e 	bl	831fc <__malloc_unlock>
   834c0:	4638      	mov	r0, r7
   834c2:	e71b      	b.n	832fc <_realloc_r+0xfc>
   834c4:	68a3      	ldr	r3, [r4, #8]
   834c6:	2a24      	cmp	r2, #36	; 0x24
   834c8:	6083      	str	r3, [r0, #8]
   834ca:	68e3      	ldr	r3, [r4, #12]
   834cc:	60c3      	str	r3, [r0, #12]
   834ce:	d02b      	beq.n	83528 <_realloc_r+0x328>
   834d0:	f100 0310 	add.w	r3, r0, #16
   834d4:	f104 0210 	add.w	r2, r4, #16
   834d8:	e74a      	b.n	83370 <_realloc_r+0x170>
   834da:	f850 2c04 	ldr.w	r2, [r0, #-4]
   834de:	46a0      	mov	r8, r4
   834e0:	f022 0203 	bic.w	r2, r2, #3
   834e4:	4415      	add	r5, r2
   834e6:	e6f9      	b.n	832dc <_realloc_r+0xdc>
   834e8:	4621      	mov	r1, r4
   834ea:	4640      	mov	r0, r8
   834ec:	4675      	mov	r5, lr
   834ee:	4657      	mov	r7, sl
   834f0:	f7ff fe1c 	bl	8312c <memmove>
   834f4:	f8da 3004 	ldr.w	r3, [sl, #4]
   834f8:	e6f0      	b.n	832dc <_realloc_r+0xdc>
   834fa:	4642      	mov	r2, r8
   834fc:	e76e      	b.n	833dc <_realloc_r+0x1dc>
   834fe:	4621      	mov	r1, r4
   83500:	4640      	mov	r0, r8
   83502:	461d      	mov	r5, r3
   83504:	4657      	mov	r7, sl
   83506:	f7ff fe11 	bl	8312c <memmove>
   8350a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8350e:	e6e5      	b.n	832dc <_realloc_r+0xdc>
   83510:	68a3      	ldr	r3, [r4, #8]
   83512:	2a24      	cmp	r2, #36	; 0x24
   83514:	f8ca 3010 	str.w	r3, [sl, #16]
   83518:	68e3      	ldr	r3, [r4, #12]
   8351a:	f8ca 3014 	str.w	r3, [sl, #20]
   8351e:	d018      	beq.n	83552 <_realloc_r+0x352>
   83520:	3410      	adds	r4, #16
   83522:	f10a 0318 	add.w	r3, sl, #24
   83526:	e770      	b.n	8340a <_realloc_r+0x20a>
   83528:	6922      	ldr	r2, [r4, #16]
   8352a:	f100 0318 	add.w	r3, r0, #24
   8352e:	6102      	str	r2, [r0, #16]
   83530:	6961      	ldr	r1, [r4, #20]
   83532:	f104 0218 	add.w	r2, r4, #24
   83536:	6141      	str	r1, [r0, #20]
   83538:	e71a      	b.n	83370 <_realloc_r+0x170>
   8353a:	68a1      	ldr	r1, [r4, #8]
   8353c:	2a24      	cmp	r2, #36	; 0x24
   8353e:	f8ca 1010 	str.w	r1, [sl, #16]
   83542:	68e1      	ldr	r1, [r4, #12]
   83544:	f8ca 1014 	str.w	r1, [sl, #20]
   83548:	d00f      	beq.n	8356a <_realloc_r+0x36a>
   8354a:	3410      	adds	r4, #16
   8354c:	f10a 0218 	add.w	r2, sl, #24
   83550:	e744      	b.n	833dc <_realloc_r+0x1dc>
   83552:	6922      	ldr	r2, [r4, #16]
   83554:	f10a 0320 	add.w	r3, sl, #32
   83558:	f8ca 2018 	str.w	r2, [sl, #24]
   8355c:	6962      	ldr	r2, [r4, #20]
   8355e:	3418      	adds	r4, #24
   83560:	f8ca 201c 	str.w	r2, [sl, #28]
   83564:	e751      	b.n	8340a <_realloc_r+0x20a>
   83566:	463b      	mov	r3, r7
   83568:	e791      	b.n	8348e <_realloc_r+0x28e>
   8356a:	6921      	ldr	r1, [r4, #16]
   8356c:	f10a 0220 	add.w	r2, sl, #32
   83570:	f8ca 1018 	str.w	r1, [sl, #24]
   83574:	6961      	ldr	r1, [r4, #20]
   83576:	3418      	adds	r4, #24
   83578:	f8ca 101c 	str.w	r1, [sl, #28]
   8357c:	e72e      	b.n	833dc <_realloc_r+0x1dc>
   8357e:	4621      	mov	r1, r4
   83580:	4638      	mov	r0, r7
   83582:	f8cd c004 	str.w	ip, [sp, #4]
   83586:	f7ff fdd1 	bl	8312c <memmove>
   8358a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8358e:	e784      	b.n	8349a <_realloc_r+0x29a>
   83590:	68a3      	ldr	r3, [r4, #8]
   83592:	2a24      	cmp	r2, #36	; 0x24
   83594:	f8ca 3010 	str.w	r3, [sl, #16]
   83598:	68e3      	ldr	r3, [r4, #12]
   8359a:	f8ca 3014 	str.w	r3, [sl, #20]
   8359e:	d003      	beq.n	835a8 <_realloc_r+0x3a8>
   835a0:	3410      	adds	r4, #16
   835a2:	f10a 0318 	add.w	r3, sl, #24
   835a6:	e772      	b.n	8348e <_realloc_r+0x28e>
   835a8:	6922      	ldr	r2, [r4, #16]
   835aa:	f10a 0320 	add.w	r3, sl, #32
   835ae:	f8ca 2018 	str.w	r2, [sl, #24]
   835b2:	6962      	ldr	r2, [r4, #20]
   835b4:	3418      	adds	r4, #24
   835b6:	f8ca 201c 	str.w	r2, [sl, #28]
   835ba:	e768      	b.n	8348e <_realloc_r+0x28e>
   835bc:	20070580 	.word	0x20070580

000835c0 <_sbrk_r>:
   835c0:	b538      	push	{r3, r4, r5, lr}
   835c2:	4c07      	ldr	r4, [pc, #28]	; (835e0 <_sbrk_r+0x20>)
   835c4:	2300      	movs	r3, #0
   835c6:	4605      	mov	r5, r0
   835c8:	4608      	mov	r0, r1
   835ca:	6023      	str	r3, [r4, #0]
   835cc:	f7fd f990 	bl	808f0 <_sbrk>
   835d0:	1c43      	adds	r3, r0, #1
   835d2:	d000      	beq.n	835d6 <_sbrk_r+0x16>
   835d4:	bd38      	pop	{r3, r4, r5, pc}
   835d6:	6823      	ldr	r3, [r4, #0]
   835d8:	2b00      	cmp	r3, #0
   835da:	d0fb      	beq.n	835d4 <_sbrk_r+0x14>
   835dc:	602b      	str	r3, [r5, #0]
   835de:	bd38      	pop	{r3, r4, r5, pc}
   835e0:	20070a70 	.word	0x20070a70

000835e4 <__sread>:
   835e4:	b510      	push	{r4, lr}
   835e6:	460c      	mov	r4, r1
   835e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835ec:	f000 f9c2 	bl	83974 <_read_r>
   835f0:	2800      	cmp	r0, #0
   835f2:	db03      	blt.n	835fc <__sread+0x18>
   835f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   835f6:	4403      	add	r3, r0
   835f8:	6523      	str	r3, [r4, #80]	; 0x50
   835fa:	bd10      	pop	{r4, pc}
   835fc:	89a3      	ldrh	r3, [r4, #12]
   835fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83602:	81a3      	strh	r3, [r4, #12]
   83604:	bd10      	pop	{r4, pc}
   83606:	bf00      	nop

00083608 <__swrite>:
   83608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8360c:	460c      	mov	r4, r1
   8360e:	8989      	ldrh	r1, [r1, #12]
   83610:	461d      	mov	r5, r3
   83612:	05cb      	lsls	r3, r1, #23
   83614:	4616      	mov	r6, r2
   83616:	4607      	mov	r7, r0
   83618:	d506      	bpl.n	83628 <__swrite+0x20>
   8361a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8361e:	2200      	movs	r2, #0
   83620:	2302      	movs	r3, #2
   83622:	f000 f993 	bl	8394c <_lseek_r>
   83626:	89a1      	ldrh	r1, [r4, #12]
   83628:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8362c:	81a1      	strh	r1, [r4, #12]
   8362e:	4638      	mov	r0, r7
   83630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83634:	4632      	mov	r2, r6
   83636:	462b      	mov	r3, r5
   83638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8363c:	f000 b89e 	b.w	8377c <_write_r>

00083640 <__sseek>:
   83640:	b510      	push	{r4, lr}
   83642:	460c      	mov	r4, r1
   83644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83648:	f000 f980 	bl	8394c <_lseek_r>
   8364c:	89a3      	ldrh	r3, [r4, #12]
   8364e:	1c42      	adds	r2, r0, #1
   83650:	bf0e      	itee	eq
   83652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8365a:	6520      	strne	r0, [r4, #80]	; 0x50
   8365c:	81a3      	strh	r3, [r4, #12]
   8365e:	bd10      	pop	{r4, pc}

00083660 <__sclose>:
   83660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83664:	f000 b8f2 	b.w	8384c <_close_r>

00083668 <__swbuf_r>:
   83668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8366a:	460d      	mov	r5, r1
   8366c:	4614      	mov	r4, r2
   8366e:	4607      	mov	r7, r0
   83670:	b110      	cbz	r0, 83678 <__swbuf_r+0x10>
   83672:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83674:	2b00      	cmp	r3, #0
   83676:	d048      	beq.n	8370a <__swbuf_r+0xa2>
   83678:	89a2      	ldrh	r2, [r4, #12]
   8367a:	69a0      	ldr	r0, [r4, #24]
   8367c:	b293      	uxth	r3, r2
   8367e:	60a0      	str	r0, [r4, #8]
   83680:	0718      	lsls	r0, r3, #28
   83682:	d538      	bpl.n	836f6 <__swbuf_r+0x8e>
   83684:	6926      	ldr	r6, [r4, #16]
   83686:	2e00      	cmp	r6, #0
   83688:	d035      	beq.n	836f6 <__swbuf_r+0x8e>
   8368a:	0499      	lsls	r1, r3, #18
   8368c:	b2ed      	uxtb	r5, r5
   8368e:	d515      	bpl.n	836bc <__swbuf_r+0x54>
   83690:	6823      	ldr	r3, [r4, #0]
   83692:	6962      	ldr	r2, [r4, #20]
   83694:	1b9e      	subs	r6, r3, r6
   83696:	4296      	cmp	r6, r2
   83698:	da1c      	bge.n	836d4 <__swbuf_r+0x6c>
   8369a:	3601      	adds	r6, #1
   8369c:	68a2      	ldr	r2, [r4, #8]
   8369e:	1c59      	adds	r1, r3, #1
   836a0:	3a01      	subs	r2, #1
   836a2:	60a2      	str	r2, [r4, #8]
   836a4:	6021      	str	r1, [r4, #0]
   836a6:	701d      	strb	r5, [r3, #0]
   836a8:	6963      	ldr	r3, [r4, #20]
   836aa:	42b3      	cmp	r3, r6
   836ac:	d01a      	beq.n	836e4 <__swbuf_r+0x7c>
   836ae:	89a3      	ldrh	r3, [r4, #12]
   836b0:	07db      	lsls	r3, r3, #31
   836b2:	d501      	bpl.n	836b8 <__swbuf_r+0x50>
   836b4:	2d0a      	cmp	r5, #10
   836b6:	d015      	beq.n	836e4 <__swbuf_r+0x7c>
   836b8:	4628      	mov	r0, r5
   836ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   836be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   836c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   836c6:	6663      	str	r3, [r4, #100]	; 0x64
   836c8:	6823      	ldr	r3, [r4, #0]
   836ca:	81a2      	strh	r2, [r4, #12]
   836cc:	6962      	ldr	r2, [r4, #20]
   836ce:	1b9e      	subs	r6, r3, r6
   836d0:	4296      	cmp	r6, r2
   836d2:	dbe2      	blt.n	8369a <__swbuf_r+0x32>
   836d4:	4638      	mov	r0, r7
   836d6:	4621      	mov	r1, r4
   836d8:	f7fe fd6e 	bl	821b8 <_fflush_r>
   836dc:	b940      	cbnz	r0, 836f0 <__swbuf_r+0x88>
   836de:	6823      	ldr	r3, [r4, #0]
   836e0:	2601      	movs	r6, #1
   836e2:	e7db      	b.n	8369c <__swbuf_r+0x34>
   836e4:	4638      	mov	r0, r7
   836e6:	4621      	mov	r1, r4
   836e8:	f7fe fd66 	bl	821b8 <_fflush_r>
   836ec:	2800      	cmp	r0, #0
   836ee:	d0e3      	beq.n	836b8 <__swbuf_r+0x50>
   836f0:	f04f 30ff 	mov.w	r0, #4294967295
   836f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836f6:	4638      	mov	r0, r7
   836f8:	4621      	mov	r1, r4
   836fa:	f7fe fc47 	bl	81f8c <__swsetup_r>
   836fe:	2800      	cmp	r0, #0
   83700:	d1f6      	bne.n	836f0 <__swbuf_r+0x88>
   83702:	89a2      	ldrh	r2, [r4, #12]
   83704:	6926      	ldr	r6, [r4, #16]
   83706:	b293      	uxth	r3, r2
   83708:	e7bf      	b.n	8368a <__swbuf_r+0x22>
   8370a:	f7fe fd71 	bl	821f0 <__sinit>
   8370e:	e7b3      	b.n	83678 <__swbuf_r+0x10>

00083710 <_wcrtomb_r>:
   83710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83714:	461e      	mov	r6, r3
   83716:	b086      	sub	sp, #24
   83718:	460c      	mov	r4, r1
   8371a:	4605      	mov	r5, r0
   8371c:	4617      	mov	r7, r2
   8371e:	4b0f      	ldr	r3, [pc, #60]	; (8375c <_wcrtomb_r+0x4c>)
   83720:	b191      	cbz	r1, 83748 <_wcrtomb_r+0x38>
   83722:	f8d3 8000 	ldr.w	r8, [r3]
   83726:	f7ff f923 	bl	82970 <__locale_charset>
   8372a:	9600      	str	r6, [sp, #0]
   8372c:	4603      	mov	r3, r0
   8372e:	4621      	mov	r1, r4
   83730:	463a      	mov	r2, r7
   83732:	4628      	mov	r0, r5
   83734:	47c0      	blx	r8
   83736:	1c43      	adds	r3, r0, #1
   83738:	d103      	bne.n	83742 <_wcrtomb_r+0x32>
   8373a:	2200      	movs	r2, #0
   8373c:	238a      	movs	r3, #138	; 0x8a
   8373e:	6032      	str	r2, [r6, #0]
   83740:	602b      	str	r3, [r5, #0]
   83742:	b006      	add	sp, #24
   83744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83748:	681f      	ldr	r7, [r3, #0]
   8374a:	f7ff f911 	bl	82970 <__locale_charset>
   8374e:	9600      	str	r6, [sp, #0]
   83750:	4603      	mov	r3, r0
   83752:	4622      	mov	r2, r4
   83754:	4628      	mov	r0, r5
   83756:	a903      	add	r1, sp, #12
   83758:	47b8      	blx	r7
   8375a:	e7ec      	b.n	83736 <_wcrtomb_r+0x26>
   8375c:	20070990 	.word	0x20070990

00083760 <__ascii_wctomb>:
   83760:	b121      	cbz	r1, 8376c <__ascii_wctomb+0xc>
   83762:	2aff      	cmp	r2, #255	; 0xff
   83764:	d804      	bhi.n	83770 <__ascii_wctomb+0x10>
   83766:	700a      	strb	r2, [r1, #0]
   83768:	2001      	movs	r0, #1
   8376a:	4770      	bx	lr
   8376c:	4608      	mov	r0, r1
   8376e:	4770      	bx	lr
   83770:	238a      	movs	r3, #138	; 0x8a
   83772:	6003      	str	r3, [r0, #0]
   83774:	f04f 30ff 	mov.w	r0, #4294967295
   83778:	4770      	bx	lr
   8377a:	bf00      	nop

0008377c <_write_r>:
   8377c:	b570      	push	{r4, r5, r6, lr}
   8377e:	4c08      	ldr	r4, [pc, #32]	; (837a0 <_write_r+0x24>)
   83780:	4606      	mov	r6, r0
   83782:	2500      	movs	r5, #0
   83784:	4608      	mov	r0, r1
   83786:	4611      	mov	r1, r2
   83788:	461a      	mov	r2, r3
   8378a:	6025      	str	r5, [r4, #0]
   8378c:	f7fc fd2e 	bl	801ec <_write>
   83790:	1c43      	adds	r3, r0, #1
   83792:	d000      	beq.n	83796 <_write_r+0x1a>
   83794:	bd70      	pop	{r4, r5, r6, pc}
   83796:	6823      	ldr	r3, [r4, #0]
   83798:	2b00      	cmp	r3, #0
   8379a:	d0fb      	beq.n	83794 <_write_r+0x18>
   8379c:	6033      	str	r3, [r6, #0]
   8379e:	bd70      	pop	{r4, r5, r6, pc}
   837a0:	20070a70 	.word	0x20070a70

000837a4 <__register_exitproc>:
   837a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   837a6:	4c27      	ldr	r4, [pc, #156]	; (83844 <__register_exitproc+0xa0>)
   837a8:	b085      	sub	sp, #20
   837aa:	6826      	ldr	r6, [r4, #0]
   837ac:	4607      	mov	r7, r0
   837ae:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   837b2:	2c00      	cmp	r4, #0
   837b4:	d040      	beq.n	83838 <__register_exitproc+0x94>
   837b6:	6865      	ldr	r5, [r4, #4]
   837b8:	2d1f      	cmp	r5, #31
   837ba:	dd1e      	ble.n	837fa <__register_exitproc+0x56>
   837bc:	4822      	ldr	r0, [pc, #136]	; (83848 <__register_exitproc+0xa4>)
   837be:	b918      	cbnz	r0, 837c8 <__register_exitproc+0x24>
   837c0:	f04f 30ff 	mov.w	r0, #4294967295
   837c4:	b005      	add	sp, #20
   837c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   837cc:	9103      	str	r1, [sp, #12]
   837ce:	9202      	str	r2, [sp, #8]
   837d0:	9301      	str	r3, [sp, #4]
   837d2:	f7ff f947 	bl	82a64 <malloc>
   837d6:	9903      	ldr	r1, [sp, #12]
   837d8:	4604      	mov	r4, r0
   837da:	9a02      	ldr	r2, [sp, #8]
   837dc:	9b01      	ldr	r3, [sp, #4]
   837de:	2800      	cmp	r0, #0
   837e0:	d0ee      	beq.n	837c0 <__register_exitproc+0x1c>
   837e2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   837e6:	2000      	movs	r0, #0
   837e8:	6025      	str	r5, [r4, #0]
   837ea:	6060      	str	r0, [r4, #4]
   837ec:	4605      	mov	r5, r0
   837ee:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   837f2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   837f6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   837fa:	b93f      	cbnz	r7, 8380c <__register_exitproc+0x68>
   837fc:	1c6b      	adds	r3, r5, #1
   837fe:	2000      	movs	r0, #0
   83800:	3502      	adds	r5, #2
   83802:	6063      	str	r3, [r4, #4]
   83804:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83808:	b005      	add	sp, #20
   8380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8380c:	2601      	movs	r6, #1
   8380e:	40ae      	lsls	r6, r5
   83810:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83814:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83818:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8381c:	2f02      	cmp	r7, #2
   8381e:	ea42 0206 	orr.w	r2, r2, r6
   83822:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83826:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8382a:	d1e7      	bne.n	837fc <__register_exitproc+0x58>
   8382c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83830:	431e      	orrs	r6, r3
   83832:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83836:	e7e1      	b.n	837fc <__register_exitproc+0x58>
   83838:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8383c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83840:	e7b9      	b.n	837b6 <__register_exitproc+0x12>
   83842:	bf00      	nop
   83844:	000843e8 	.word	0x000843e8
   83848:	00082a65 	.word	0x00082a65

0008384c <_close_r>:
   8384c:	b538      	push	{r3, r4, r5, lr}
   8384e:	4c07      	ldr	r4, [pc, #28]	; (8386c <_close_r+0x20>)
   83850:	2300      	movs	r3, #0
   83852:	4605      	mov	r5, r0
   83854:	4608      	mov	r0, r1
   83856:	6023      	str	r3, [r4, #0]
   83858:	f7fd f864 	bl	80924 <_close>
   8385c:	1c43      	adds	r3, r0, #1
   8385e:	d000      	beq.n	83862 <_close_r+0x16>
   83860:	bd38      	pop	{r3, r4, r5, pc}
   83862:	6823      	ldr	r3, [r4, #0]
   83864:	2b00      	cmp	r3, #0
   83866:	d0fb      	beq.n	83860 <_close_r+0x14>
   83868:	602b      	str	r3, [r5, #0]
   8386a:	bd38      	pop	{r3, r4, r5, pc}
   8386c:	20070a70 	.word	0x20070a70

00083870 <_fclose_r>:
   83870:	b570      	push	{r4, r5, r6, lr}
   83872:	460c      	mov	r4, r1
   83874:	4605      	mov	r5, r0
   83876:	b131      	cbz	r1, 83886 <_fclose_r+0x16>
   83878:	b110      	cbz	r0, 83880 <_fclose_r+0x10>
   8387a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8387c:	2b00      	cmp	r3, #0
   8387e:	d02f      	beq.n	838e0 <_fclose_r+0x70>
   83880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83884:	b90b      	cbnz	r3, 8388a <_fclose_r+0x1a>
   83886:	2000      	movs	r0, #0
   83888:	bd70      	pop	{r4, r5, r6, pc}
   8388a:	4628      	mov	r0, r5
   8388c:	4621      	mov	r1, r4
   8388e:	f7fe fc93 	bl	821b8 <_fflush_r>
   83892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83894:	4606      	mov	r6, r0
   83896:	b133      	cbz	r3, 838a6 <_fclose_r+0x36>
   83898:	4628      	mov	r0, r5
   8389a:	69e1      	ldr	r1, [r4, #28]
   8389c:	4798      	blx	r3
   8389e:	2800      	cmp	r0, #0
   838a0:	bfb8      	it	lt
   838a2:	f04f 36ff 	movlt.w	r6, #4294967295
   838a6:	89a3      	ldrh	r3, [r4, #12]
   838a8:	061b      	lsls	r3, r3, #24
   838aa:	d41c      	bmi.n	838e6 <_fclose_r+0x76>
   838ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   838ae:	b141      	cbz	r1, 838c2 <_fclose_r+0x52>
   838b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   838b4:	4299      	cmp	r1, r3
   838b6:	d002      	beq.n	838be <_fclose_r+0x4e>
   838b8:	4628      	mov	r0, r5
   838ba:	f7fe fddd 	bl	82478 <_free_r>
   838be:	2300      	movs	r3, #0
   838c0:	6323      	str	r3, [r4, #48]	; 0x30
   838c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   838c4:	b121      	cbz	r1, 838d0 <_fclose_r+0x60>
   838c6:	4628      	mov	r0, r5
   838c8:	f7fe fdd6 	bl	82478 <_free_r>
   838cc:	2300      	movs	r3, #0
   838ce:	6463      	str	r3, [r4, #68]	; 0x44
   838d0:	f7fe fd08 	bl	822e4 <__sfp_lock_acquire>
   838d4:	2300      	movs	r3, #0
   838d6:	81a3      	strh	r3, [r4, #12]
   838d8:	f7fe fd06 	bl	822e8 <__sfp_lock_release>
   838dc:	4630      	mov	r0, r6
   838de:	bd70      	pop	{r4, r5, r6, pc}
   838e0:	f7fe fc86 	bl	821f0 <__sinit>
   838e4:	e7cc      	b.n	83880 <_fclose_r+0x10>
   838e6:	4628      	mov	r0, r5
   838e8:	6921      	ldr	r1, [r4, #16]
   838ea:	f7fe fdc5 	bl	82478 <_free_r>
   838ee:	e7dd      	b.n	838ac <_fclose_r+0x3c>

000838f0 <fclose>:
   838f0:	4b02      	ldr	r3, [pc, #8]	; (838fc <fclose+0xc>)
   838f2:	4601      	mov	r1, r0
   838f4:	6818      	ldr	r0, [r3, #0]
   838f6:	f7ff bfbb 	b.w	83870 <_fclose_r>
   838fa:	bf00      	nop
   838fc:	20070558 	.word	0x20070558

00083900 <_fstat_r>:
   83900:	b538      	push	{r3, r4, r5, lr}
   83902:	4c08      	ldr	r4, [pc, #32]	; (83924 <_fstat_r+0x24>)
   83904:	2300      	movs	r3, #0
   83906:	4605      	mov	r5, r0
   83908:	4608      	mov	r0, r1
   8390a:	4611      	mov	r1, r2
   8390c:	6023      	str	r3, [r4, #0]
   8390e:	f7fd f80d 	bl	8092c <_fstat>
   83912:	1c43      	adds	r3, r0, #1
   83914:	d000      	beq.n	83918 <_fstat_r+0x18>
   83916:	bd38      	pop	{r3, r4, r5, pc}
   83918:	6823      	ldr	r3, [r4, #0]
   8391a:	2b00      	cmp	r3, #0
   8391c:	d0fb      	beq.n	83916 <_fstat_r+0x16>
   8391e:	602b      	str	r3, [r5, #0]
   83920:	bd38      	pop	{r3, r4, r5, pc}
   83922:	bf00      	nop
   83924:	20070a70 	.word	0x20070a70

00083928 <_isatty_r>:
   83928:	b538      	push	{r3, r4, r5, lr}
   8392a:	4c07      	ldr	r4, [pc, #28]	; (83948 <_isatty_r+0x20>)
   8392c:	2300      	movs	r3, #0
   8392e:	4605      	mov	r5, r0
   83930:	4608      	mov	r0, r1
   83932:	6023      	str	r3, [r4, #0]
   83934:	f7fd f800 	bl	80938 <_isatty>
   83938:	1c43      	adds	r3, r0, #1
   8393a:	d000      	beq.n	8393e <_isatty_r+0x16>
   8393c:	bd38      	pop	{r3, r4, r5, pc}
   8393e:	6823      	ldr	r3, [r4, #0]
   83940:	2b00      	cmp	r3, #0
   83942:	d0fb      	beq.n	8393c <_isatty_r+0x14>
   83944:	602b      	str	r3, [r5, #0]
   83946:	bd38      	pop	{r3, r4, r5, pc}
   83948:	20070a70 	.word	0x20070a70

0008394c <_lseek_r>:
   8394c:	b570      	push	{r4, r5, r6, lr}
   8394e:	4c08      	ldr	r4, [pc, #32]	; (83970 <_lseek_r+0x24>)
   83950:	4606      	mov	r6, r0
   83952:	2500      	movs	r5, #0
   83954:	4608      	mov	r0, r1
   83956:	4611      	mov	r1, r2
   83958:	461a      	mov	r2, r3
   8395a:	6025      	str	r5, [r4, #0]
   8395c:	f7fc ffee 	bl	8093c <_lseek>
   83960:	1c43      	adds	r3, r0, #1
   83962:	d000      	beq.n	83966 <_lseek_r+0x1a>
   83964:	bd70      	pop	{r4, r5, r6, pc}
   83966:	6823      	ldr	r3, [r4, #0]
   83968:	2b00      	cmp	r3, #0
   8396a:	d0fb      	beq.n	83964 <_lseek_r+0x18>
   8396c:	6033      	str	r3, [r6, #0]
   8396e:	bd70      	pop	{r4, r5, r6, pc}
   83970:	20070a70 	.word	0x20070a70

00083974 <_read_r>:
   83974:	b570      	push	{r4, r5, r6, lr}
   83976:	4c08      	ldr	r4, [pc, #32]	; (83998 <_read_r+0x24>)
   83978:	4606      	mov	r6, r0
   8397a:	2500      	movs	r5, #0
   8397c:	4608      	mov	r0, r1
   8397e:	4611      	mov	r1, r2
   83980:	461a      	mov	r2, r3
   83982:	6025      	str	r5, [r4, #0]
   83984:	f7fc fc12 	bl	801ac <_read>
   83988:	1c43      	adds	r3, r0, #1
   8398a:	d000      	beq.n	8398e <_read_r+0x1a>
   8398c:	bd70      	pop	{r4, r5, r6, pc}
   8398e:	6823      	ldr	r3, [r4, #0]
   83990:	2b00      	cmp	r3, #0
   83992:	d0fb      	beq.n	8398c <_read_r+0x18>
   83994:	6033      	str	r3, [r6, #0]
   83996:	bd70      	pop	{r4, r5, r6, pc}
   83998:	20070a70 	.word	0x20070a70

0008399c <__aeabi_uldivmod>:
   8399c:	b94b      	cbnz	r3, 839b2 <__aeabi_uldivmod+0x16>
   8399e:	b942      	cbnz	r2, 839b2 <__aeabi_uldivmod+0x16>
   839a0:	2900      	cmp	r1, #0
   839a2:	bf08      	it	eq
   839a4:	2800      	cmpeq	r0, #0
   839a6:	d002      	beq.n	839ae <__aeabi_uldivmod+0x12>
   839a8:	f04f 31ff 	mov.w	r1, #4294967295
   839ac:	4608      	mov	r0, r1
   839ae:	f000 b83b 	b.w	83a28 <__aeabi_idiv0>
   839b2:	b082      	sub	sp, #8
   839b4:	46ec      	mov	ip, sp
   839b6:	e92d 5000 	stmdb	sp!, {ip, lr}
   839ba:	f000 f81d 	bl	839f8 <__gnu_uldivmod_helper>
   839be:	f8dd e004 	ldr.w	lr, [sp, #4]
   839c2:	b002      	add	sp, #8
   839c4:	bc0c      	pop	{r2, r3}
   839c6:	4770      	bx	lr

000839c8 <__gnu_ldivmod_helper>:
   839c8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839cc:	9e08      	ldr	r6, [sp, #32]
   839ce:	4614      	mov	r4, r2
   839d0:	461d      	mov	r5, r3
   839d2:	4680      	mov	r8, r0
   839d4:	4689      	mov	r9, r1
   839d6:	f000 f829 	bl	83a2c <__divdi3>
   839da:	fb04 f301 	mul.w	r3, r4, r1
   839de:	fba4 ab00 	umull	sl, fp, r4, r0
   839e2:	fb00 3205 	mla	r2, r0, r5, r3
   839e6:	4493      	add	fp, r2
   839e8:	ebb8 080a 	subs.w	r8, r8, sl
   839ec:	eb69 090b 	sbc.w	r9, r9, fp
   839f0:	e9c6 8900 	strd	r8, r9, [r6]
   839f4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000839f8 <__gnu_uldivmod_helper>:
   839f8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   839fc:	9e08      	ldr	r6, [sp, #32]
   839fe:	4614      	mov	r4, r2
   83a00:	461d      	mov	r5, r3
   83a02:	4680      	mov	r8, r0
   83a04:	4689      	mov	r9, r1
   83a06:	f000 f961 	bl	83ccc <__udivdi3>
   83a0a:	fb00 f505 	mul.w	r5, r0, r5
   83a0e:	fba0 ab04 	umull	sl, fp, r0, r4
   83a12:	fb04 5401 	mla	r4, r4, r1, r5
   83a16:	44a3      	add	fp, r4
   83a18:	ebb8 080a 	subs.w	r8, r8, sl
   83a1c:	eb69 090b 	sbc.w	r9, r9, fp
   83a20:	e9c6 8900 	strd	r8, r9, [r6]
   83a24:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083a28 <__aeabi_idiv0>:
   83a28:	4770      	bx	lr
   83a2a:	bf00      	nop

00083a2c <__divdi3>:
   83a2c:	2900      	cmp	r1, #0
   83a2e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a32:	f2c0 80a1 	blt.w	83b78 <__divdi3+0x14c>
   83a36:	2400      	movs	r4, #0
   83a38:	2b00      	cmp	r3, #0
   83a3a:	f2c0 8098 	blt.w	83b6e <__divdi3+0x142>
   83a3e:	4615      	mov	r5, r2
   83a40:	4606      	mov	r6, r0
   83a42:	460f      	mov	r7, r1
   83a44:	2b00      	cmp	r3, #0
   83a46:	d13f      	bne.n	83ac8 <__divdi3+0x9c>
   83a48:	428a      	cmp	r2, r1
   83a4a:	d958      	bls.n	83afe <__divdi3+0xd2>
   83a4c:	fab2 f382 	clz	r3, r2
   83a50:	b14b      	cbz	r3, 83a66 <__divdi3+0x3a>
   83a52:	f1c3 0220 	rsb	r2, r3, #32
   83a56:	fa01 f703 	lsl.w	r7, r1, r3
   83a5a:	fa20 f202 	lsr.w	r2, r0, r2
   83a5e:	409d      	lsls	r5, r3
   83a60:	fa00 f603 	lsl.w	r6, r0, r3
   83a64:	4317      	orrs	r7, r2
   83a66:	0c29      	lsrs	r1, r5, #16
   83a68:	fbb7 f2f1 	udiv	r2, r7, r1
   83a6c:	fb01 7712 	mls	r7, r1, r2, r7
   83a70:	b2a8      	uxth	r0, r5
   83a72:	fb00 f302 	mul.w	r3, r0, r2
   83a76:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   83a7a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   83a7e:	42bb      	cmp	r3, r7
   83a80:	d909      	bls.n	83a96 <__divdi3+0x6a>
   83a82:	197f      	adds	r7, r7, r5
   83a84:	f102 3cff 	add.w	ip, r2, #4294967295
   83a88:	f080 8105 	bcs.w	83c96 <__divdi3+0x26a>
   83a8c:	42bb      	cmp	r3, r7
   83a8e:	f240 8102 	bls.w	83c96 <__divdi3+0x26a>
   83a92:	3a02      	subs	r2, #2
   83a94:	442f      	add	r7, r5
   83a96:	1aff      	subs	r7, r7, r3
   83a98:	fbb7 f3f1 	udiv	r3, r7, r1
   83a9c:	fb01 7113 	mls	r1, r1, r3, r7
   83aa0:	fb00 f003 	mul.w	r0, r0, r3
   83aa4:	b2b6      	uxth	r6, r6
   83aa6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   83aaa:	4288      	cmp	r0, r1
   83aac:	d908      	bls.n	83ac0 <__divdi3+0x94>
   83aae:	1949      	adds	r1, r1, r5
   83ab0:	f103 37ff 	add.w	r7, r3, #4294967295
   83ab4:	f080 80f1 	bcs.w	83c9a <__divdi3+0x26e>
   83ab8:	4288      	cmp	r0, r1
   83aba:	f240 80ee 	bls.w	83c9a <__divdi3+0x26e>
   83abe:	3b02      	subs	r3, #2
   83ac0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83ac4:	2300      	movs	r3, #0
   83ac6:	e003      	b.n	83ad0 <__divdi3+0xa4>
   83ac8:	428b      	cmp	r3, r1
   83aca:	d90a      	bls.n	83ae2 <__divdi3+0xb6>
   83acc:	2300      	movs	r3, #0
   83ace:	461a      	mov	r2, r3
   83ad0:	4610      	mov	r0, r2
   83ad2:	4619      	mov	r1, r3
   83ad4:	b114      	cbz	r4, 83adc <__divdi3+0xb0>
   83ad6:	4240      	negs	r0, r0
   83ad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83adc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ae0:	4770      	bx	lr
   83ae2:	fab3 f883 	clz	r8, r3
   83ae6:	f1b8 0f00 	cmp.w	r8, #0
   83aea:	f040 8088 	bne.w	83bfe <__divdi3+0x1d2>
   83aee:	428b      	cmp	r3, r1
   83af0:	d302      	bcc.n	83af8 <__divdi3+0xcc>
   83af2:	4282      	cmp	r2, r0
   83af4:	f200 80e2 	bhi.w	83cbc <__divdi3+0x290>
   83af8:	2300      	movs	r3, #0
   83afa:	2201      	movs	r2, #1
   83afc:	e7e8      	b.n	83ad0 <__divdi3+0xa4>
   83afe:	b912      	cbnz	r2, 83b06 <__divdi3+0xda>
   83b00:	2301      	movs	r3, #1
   83b02:	fbb3 f5f2 	udiv	r5, r3, r2
   83b06:	fab5 f285 	clz	r2, r5
   83b0a:	2a00      	cmp	r2, #0
   83b0c:	d13a      	bne.n	83b84 <__divdi3+0x158>
   83b0e:	1b7f      	subs	r7, r7, r5
   83b10:	0c28      	lsrs	r0, r5, #16
   83b12:	fa1f fc85 	uxth.w	ip, r5
   83b16:	2301      	movs	r3, #1
   83b18:	fbb7 f1f0 	udiv	r1, r7, r0
   83b1c:	fb00 7711 	mls	r7, r0, r1, r7
   83b20:	fb0c f201 	mul.w	r2, ip, r1
   83b24:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83b28:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   83b2c:	42ba      	cmp	r2, r7
   83b2e:	d907      	bls.n	83b40 <__divdi3+0x114>
   83b30:	197f      	adds	r7, r7, r5
   83b32:	f101 38ff 	add.w	r8, r1, #4294967295
   83b36:	d202      	bcs.n	83b3e <__divdi3+0x112>
   83b38:	42ba      	cmp	r2, r7
   83b3a:	f200 80c4 	bhi.w	83cc6 <__divdi3+0x29a>
   83b3e:	4641      	mov	r1, r8
   83b40:	1abf      	subs	r7, r7, r2
   83b42:	fbb7 f2f0 	udiv	r2, r7, r0
   83b46:	fb00 7012 	mls	r0, r0, r2, r7
   83b4a:	fb0c fc02 	mul.w	ip, ip, r2
   83b4e:	b2b6      	uxth	r6, r6
   83b50:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   83b54:	4584      	cmp	ip, r0
   83b56:	d907      	bls.n	83b68 <__divdi3+0x13c>
   83b58:	1940      	adds	r0, r0, r5
   83b5a:	f102 37ff 	add.w	r7, r2, #4294967295
   83b5e:	d202      	bcs.n	83b66 <__divdi3+0x13a>
   83b60:	4584      	cmp	ip, r0
   83b62:	f200 80ae 	bhi.w	83cc2 <__divdi3+0x296>
   83b66:	463a      	mov	r2, r7
   83b68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   83b6c:	e7b0      	b.n	83ad0 <__divdi3+0xa4>
   83b6e:	43e4      	mvns	r4, r4
   83b70:	4252      	negs	r2, r2
   83b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83b76:	e762      	b.n	83a3e <__divdi3+0x12>
   83b78:	4240      	negs	r0, r0
   83b7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83b7e:	f04f 34ff 	mov.w	r4, #4294967295
   83b82:	e759      	b.n	83a38 <__divdi3+0xc>
   83b84:	4095      	lsls	r5, r2
   83b86:	f1c2 0920 	rsb	r9, r2, #32
   83b8a:	fa27 f109 	lsr.w	r1, r7, r9
   83b8e:	fa26 f909 	lsr.w	r9, r6, r9
   83b92:	4097      	lsls	r7, r2
   83b94:	0c28      	lsrs	r0, r5, #16
   83b96:	fbb1 f8f0 	udiv	r8, r1, r0
   83b9a:	fb00 1118 	mls	r1, r0, r8, r1
   83b9e:	fa1f fc85 	uxth.w	ip, r5
   83ba2:	fb0c f308 	mul.w	r3, ip, r8
   83ba6:	ea49 0907 	orr.w	r9, r9, r7
   83baa:	ea4f 4719 	mov.w	r7, r9, lsr #16
   83bae:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83bb2:	428b      	cmp	r3, r1
   83bb4:	fa06 f602 	lsl.w	r6, r6, r2
   83bb8:	d908      	bls.n	83bcc <__divdi3+0x1a0>
   83bba:	1949      	adds	r1, r1, r5
   83bbc:	f108 32ff 	add.w	r2, r8, #4294967295
   83bc0:	d27a      	bcs.n	83cb8 <__divdi3+0x28c>
   83bc2:	428b      	cmp	r3, r1
   83bc4:	d978      	bls.n	83cb8 <__divdi3+0x28c>
   83bc6:	f1a8 0802 	sub.w	r8, r8, #2
   83bca:	4429      	add	r1, r5
   83bcc:	1ac9      	subs	r1, r1, r3
   83bce:	fbb1 f3f0 	udiv	r3, r1, r0
   83bd2:	fb00 1713 	mls	r7, r0, r3, r1
   83bd6:	fb0c f203 	mul.w	r2, ip, r3
   83bda:	fa1f f989 	uxth.w	r9, r9
   83bde:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83be2:	42ba      	cmp	r2, r7
   83be4:	d907      	bls.n	83bf6 <__divdi3+0x1ca>
   83be6:	197f      	adds	r7, r7, r5
   83be8:	f103 31ff 	add.w	r1, r3, #4294967295
   83bec:	d260      	bcs.n	83cb0 <__divdi3+0x284>
   83bee:	42ba      	cmp	r2, r7
   83bf0:	d95e      	bls.n	83cb0 <__divdi3+0x284>
   83bf2:	3b02      	subs	r3, #2
   83bf4:	442f      	add	r7, r5
   83bf6:	1abf      	subs	r7, r7, r2
   83bf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83bfc:	e78c      	b.n	83b18 <__divdi3+0xec>
   83bfe:	f1c8 0220 	rsb	r2, r8, #32
   83c02:	fa25 f102 	lsr.w	r1, r5, r2
   83c06:	fa03 fc08 	lsl.w	ip, r3, r8
   83c0a:	fa27 f302 	lsr.w	r3, r7, r2
   83c0e:	fa20 f202 	lsr.w	r2, r0, r2
   83c12:	fa07 f708 	lsl.w	r7, r7, r8
   83c16:	ea41 0c0c 	orr.w	ip, r1, ip
   83c1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83c1e:	fbb3 f1f9 	udiv	r1, r3, r9
   83c22:	fb09 3311 	mls	r3, r9, r1, r3
   83c26:	fa1f fa8c 	uxth.w	sl, ip
   83c2a:	fb0a fb01 	mul.w	fp, sl, r1
   83c2e:	4317      	orrs	r7, r2
   83c30:	0c3a      	lsrs	r2, r7, #16
   83c32:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83c36:	459b      	cmp	fp, r3
   83c38:	fa05 f008 	lsl.w	r0, r5, r8
   83c3c:	d908      	bls.n	83c50 <__divdi3+0x224>
   83c3e:	eb13 030c 	adds.w	r3, r3, ip
   83c42:	f101 32ff 	add.w	r2, r1, #4294967295
   83c46:	d235      	bcs.n	83cb4 <__divdi3+0x288>
   83c48:	459b      	cmp	fp, r3
   83c4a:	d933      	bls.n	83cb4 <__divdi3+0x288>
   83c4c:	3902      	subs	r1, #2
   83c4e:	4463      	add	r3, ip
   83c50:	ebcb 0303 	rsb	r3, fp, r3
   83c54:	fbb3 f2f9 	udiv	r2, r3, r9
   83c58:	fb09 3312 	mls	r3, r9, r2, r3
   83c5c:	fb0a fa02 	mul.w	sl, sl, r2
   83c60:	b2bf      	uxth	r7, r7
   83c62:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83c66:	45ba      	cmp	sl, r7
   83c68:	d908      	bls.n	83c7c <__divdi3+0x250>
   83c6a:	eb17 070c 	adds.w	r7, r7, ip
   83c6e:	f102 33ff 	add.w	r3, r2, #4294967295
   83c72:	d21b      	bcs.n	83cac <__divdi3+0x280>
   83c74:	45ba      	cmp	sl, r7
   83c76:	d919      	bls.n	83cac <__divdi3+0x280>
   83c78:	3a02      	subs	r2, #2
   83c7a:	4467      	add	r7, ip
   83c7c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83c80:	fba5 0100 	umull	r0, r1, r5, r0
   83c84:	ebca 0707 	rsb	r7, sl, r7
   83c88:	428f      	cmp	r7, r1
   83c8a:	f04f 0300 	mov.w	r3, #0
   83c8e:	d30a      	bcc.n	83ca6 <__divdi3+0x27a>
   83c90:	d005      	beq.n	83c9e <__divdi3+0x272>
   83c92:	462a      	mov	r2, r5
   83c94:	e71c      	b.n	83ad0 <__divdi3+0xa4>
   83c96:	4662      	mov	r2, ip
   83c98:	e6fd      	b.n	83a96 <__divdi3+0x6a>
   83c9a:	463b      	mov	r3, r7
   83c9c:	e710      	b.n	83ac0 <__divdi3+0x94>
   83c9e:	fa06 f608 	lsl.w	r6, r6, r8
   83ca2:	4286      	cmp	r6, r0
   83ca4:	d2f5      	bcs.n	83c92 <__divdi3+0x266>
   83ca6:	1e6a      	subs	r2, r5, #1
   83ca8:	2300      	movs	r3, #0
   83caa:	e711      	b.n	83ad0 <__divdi3+0xa4>
   83cac:	461a      	mov	r2, r3
   83cae:	e7e5      	b.n	83c7c <__divdi3+0x250>
   83cb0:	460b      	mov	r3, r1
   83cb2:	e7a0      	b.n	83bf6 <__divdi3+0x1ca>
   83cb4:	4611      	mov	r1, r2
   83cb6:	e7cb      	b.n	83c50 <__divdi3+0x224>
   83cb8:	4690      	mov	r8, r2
   83cba:	e787      	b.n	83bcc <__divdi3+0x1a0>
   83cbc:	4643      	mov	r3, r8
   83cbe:	4642      	mov	r2, r8
   83cc0:	e706      	b.n	83ad0 <__divdi3+0xa4>
   83cc2:	3a02      	subs	r2, #2
   83cc4:	e750      	b.n	83b68 <__divdi3+0x13c>
   83cc6:	3902      	subs	r1, #2
   83cc8:	442f      	add	r7, r5
   83cca:	e739      	b.n	83b40 <__divdi3+0x114>

00083ccc <__udivdi3>:
   83ccc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83cd0:	4614      	mov	r4, r2
   83cd2:	4605      	mov	r5, r0
   83cd4:	460e      	mov	r6, r1
   83cd6:	2b00      	cmp	r3, #0
   83cd8:	d143      	bne.n	83d62 <__udivdi3+0x96>
   83cda:	428a      	cmp	r2, r1
   83cdc:	d953      	bls.n	83d86 <__udivdi3+0xba>
   83cde:	fab2 f782 	clz	r7, r2
   83ce2:	b157      	cbz	r7, 83cfa <__udivdi3+0x2e>
   83ce4:	f1c7 0620 	rsb	r6, r7, #32
   83ce8:	fa20 f606 	lsr.w	r6, r0, r6
   83cec:	fa01 f307 	lsl.w	r3, r1, r7
   83cf0:	fa02 f407 	lsl.w	r4, r2, r7
   83cf4:	fa00 f507 	lsl.w	r5, r0, r7
   83cf8:	431e      	orrs	r6, r3
   83cfa:	0c21      	lsrs	r1, r4, #16
   83cfc:	fbb6 f2f1 	udiv	r2, r6, r1
   83d00:	fb01 6612 	mls	r6, r1, r2, r6
   83d04:	b2a0      	uxth	r0, r4
   83d06:	fb00 f302 	mul.w	r3, r0, r2
   83d0a:	0c2f      	lsrs	r7, r5, #16
   83d0c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83d10:	42b3      	cmp	r3, r6
   83d12:	d909      	bls.n	83d28 <__udivdi3+0x5c>
   83d14:	1936      	adds	r6, r6, r4
   83d16:	f102 37ff 	add.w	r7, r2, #4294967295
   83d1a:	f080 80fd 	bcs.w	83f18 <__udivdi3+0x24c>
   83d1e:	42b3      	cmp	r3, r6
   83d20:	f240 80fa 	bls.w	83f18 <__udivdi3+0x24c>
   83d24:	3a02      	subs	r2, #2
   83d26:	4426      	add	r6, r4
   83d28:	1af6      	subs	r6, r6, r3
   83d2a:	fbb6 f3f1 	udiv	r3, r6, r1
   83d2e:	fb01 6113 	mls	r1, r1, r3, r6
   83d32:	fb00 f003 	mul.w	r0, r0, r3
   83d36:	b2ad      	uxth	r5, r5
   83d38:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83d3c:	4288      	cmp	r0, r1
   83d3e:	d908      	bls.n	83d52 <__udivdi3+0x86>
   83d40:	1909      	adds	r1, r1, r4
   83d42:	f103 36ff 	add.w	r6, r3, #4294967295
   83d46:	f080 80e9 	bcs.w	83f1c <__udivdi3+0x250>
   83d4a:	4288      	cmp	r0, r1
   83d4c:	f240 80e6 	bls.w	83f1c <__udivdi3+0x250>
   83d50:	3b02      	subs	r3, #2
   83d52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83d56:	2300      	movs	r3, #0
   83d58:	4610      	mov	r0, r2
   83d5a:	4619      	mov	r1, r3
   83d5c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d60:	4770      	bx	lr
   83d62:	428b      	cmp	r3, r1
   83d64:	d84c      	bhi.n	83e00 <__udivdi3+0x134>
   83d66:	fab3 f683 	clz	r6, r3
   83d6a:	2e00      	cmp	r6, #0
   83d6c:	d14f      	bne.n	83e0e <__udivdi3+0x142>
   83d6e:	428b      	cmp	r3, r1
   83d70:	d302      	bcc.n	83d78 <__udivdi3+0xac>
   83d72:	4282      	cmp	r2, r0
   83d74:	f200 80dd 	bhi.w	83f32 <__udivdi3+0x266>
   83d78:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d7c:	2300      	movs	r3, #0
   83d7e:	2201      	movs	r2, #1
   83d80:	4610      	mov	r0, r2
   83d82:	4619      	mov	r1, r3
   83d84:	4770      	bx	lr
   83d86:	b912      	cbnz	r2, 83d8e <__udivdi3+0xc2>
   83d88:	2401      	movs	r4, #1
   83d8a:	fbb4 f4f2 	udiv	r4, r4, r2
   83d8e:	fab4 f284 	clz	r2, r4
   83d92:	2a00      	cmp	r2, #0
   83d94:	f040 8082 	bne.w	83e9c <__udivdi3+0x1d0>
   83d98:	1b09      	subs	r1, r1, r4
   83d9a:	0c26      	lsrs	r6, r4, #16
   83d9c:	b2a7      	uxth	r7, r4
   83d9e:	2301      	movs	r3, #1
   83da0:	fbb1 f0f6 	udiv	r0, r1, r6
   83da4:	fb06 1110 	mls	r1, r6, r0, r1
   83da8:	fb07 f200 	mul.w	r2, r7, r0
   83dac:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83db0:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83db4:	428a      	cmp	r2, r1
   83db6:	d907      	bls.n	83dc8 <__udivdi3+0xfc>
   83db8:	1909      	adds	r1, r1, r4
   83dba:	f100 3cff 	add.w	ip, r0, #4294967295
   83dbe:	d202      	bcs.n	83dc6 <__udivdi3+0xfa>
   83dc0:	428a      	cmp	r2, r1
   83dc2:	f200 80c8 	bhi.w	83f56 <__udivdi3+0x28a>
   83dc6:	4660      	mov	r0, ip
   83dc8:	1a89      	subs	r1, r1, r2
   83dca:	fbb1 f2f6 	udiv	r2, r1, r6
   83dce:	fb06 1112 	mls	r1, r6, r2, r1
   83dd2:	fb07 f702 	mul.w	r7, r7, r2
   83dd6:	b2ad      	uxth	r5, r5
   83dd8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83ddc:	42af      	cmp	r7, r5
   83dde:	d908      	bls.n	83df2 <__udivdi3+0x126>
   83de0:	192c      	adds	r4, r5, r4
   83de2:	f102 31ff 	add.w	r1, r2, #4294967295
   83de6:	f080 809b 	bcs.w	83f20 <__udivdi3+0x254>
   83dea:	42a7      	cmp	r7, r4
   83dec:	f240 8098 	bls.w	83f20 <__udivdi3+0x254>
   83df0:	3a02      	subs	r2, #2
   83df2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83df6:	4610      	mov	r0, r2
   83df8:	4619      	mov	r1, r3
   83dfa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83dfe:	4770      	bx	lr
   83e00:	2300      	movs	r3, #0
   83e02:	461a      	mov	r2, r3
   83e04:	4610      	mov	r0, r2
   83e06:	4619      	mov	r1, r3
   83e08:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83e0c:	4770      	bx	lr
   83e0e:	f1c6 0520 	rsb	r5, r6, #32
   83e12:	fa22 f705 	lsr.w	r7, r2, r5
   83e16:	fa03 f406 	lsl.w	r4, r3, r6
   83e1a:	fa21 f305 	lsr.w	r3, r1, r5
   83e1e:	fa01 fb06 	lsl.w	fp, r1, r6
   83e22:	fa20 f505 	lsr.w	r5, r0, r5
   83e26:	433c      	orrs	r4, r7
   83e28:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83e2c:	fbb3 fcf8 	udiv	ip, r3, r8
   83e30:	fb08 331c 	mls	r3, r8, ip, r3
   83e34:	fa1f f984 	uxth.w	r9, r4
   83e38:	fb09 fa0c 	mul.w	sl, r9, ip
   83e3c:	ea45 0b0b 	orr.w	fp, r5, fp
   83e40:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83e44:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83e48:	459a      	cmp	sl, r3
   83e4a:	fa02 f206 	lsl.w	r2, r2, r6
   83e4e:	d904      	bls.n	83e5a <__udivdi3+0x18e>
   83e50:	191b      	adds	r3, r3, r4
   83e52:	f10c 35ff 	add.w	r5, ip, #4294967295
   83e56:	d36f      	bcc.n	83f38 <__udivdi3+0x26c>
   83e58:	46ac      	mov	ip, r5
   83e5a:	ebca 0303 	rsb	r3, sl, r3
   83e5e:	fbb3 f5f8 	udiv	r5, r3, r8
   83e62:	fb08 3315 	mls	r3, r8, r5, r3
   83e66:	fb09 f905 	mul.w	r9, r9, r5
   83e6a:	fa1f fb8b 	uxth.w	fp, fp
   83e6e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83e72:	45b9      	cmp	r9, r7
   83e74:	d904      	bls.n	83e80 <__udivdi3+0x1b4>
   83e76:	193f      	adds	r7, r7, r4
   83e78:	f105 33ff 	add.w	r3, r5, #4294967295
   83e7c:	d362      	bcc.n	83f44 <__udivdi3+0x278>
   83e7e:	461d      	mov	r5, r3
   83e80:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83e84:	fbac 2302 	umull	r2, r3, ip, r2
   83e88:	ebc9 0707 	rsb	r7, r9, r7
   83e8c:	429f      	cmp	r7, r3
   83e8e:	f04f 0500 	mov.w	r5, #0
   83e92:	d34a      	bcc.n	83f2a <__udivdi3+0x25e>
   83e94:	d046      	beq.n	83f24 <__udivdi3+0x258>
   83e96:	4662      	mov	r2, ip
   83e98:	462b      	mov	r3, r5
   83e9a:	e75d      	b.n	83d58 <__udivdi3+0x8c>
   83e9c:	4094      	lsls	r4, r2
   83e9e:	f1c2 0920 	rsb	r9, r2, #32
   83ea2:	fa21 fc09 	lsr.w	ip, r1, r9
   83ea6:	4091      	lsls	r1, r2
   83ea8:	fa20 f909 	lsr.w	r9, r0, r9
   83eac:	0c26      	lsrs	r6, r4, #16
   83eae:	fbbc f8f6 	udiv	r8, ip, r6
   83eb2:	fb06 cc18 	mls	ip, r6, r8, ip
   83eb6:	b2a7      	uxth	r7, r4
   83eb8:	fb07 f308 	mul.w	r3, r7, r8
   83ebc:	ea49 0901 	orr.w	r9, r9, r1
   83ec0:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83ec4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83ec8:	4563      	cmp	r3, ip
   83eca:	fa00 f502 	lsl.w	r5, r0, r2
   83ece:	d909      	bls.n	83ee4 <__udivdi3+0x218>
   83ed0:	eb1c 0c04 	adds.w	ip, ip, r4
   83ed4:	f108 32ff 	add.w	r2, r8, #4294967295
   83ed8:	d23b      	bcs.n	83f52 <__udivdi3+0x286>
   83eda:	4563      	cmp	r3, ip
   83edc:	d939      	bls.n	83f52 <__udivdi3+0x286>
   83ede:	f1a8 0802 	sub.w	r8, r8, #2
   83ee2:	44a4      	add	ip, r4
   83ee4:	ebc3 0c0c 	rsb	ip, r3, ip
   83ee8:	fbbc f3f6 	udiv	r3, ip, r6
   83eec:	fb06 c113 	mls	r1, r6, r3, ip
   83ef0:	fb07 f203 	mul.w	r2, r7, r3
   83ef4:	fa1f f989 	uxth.w	r9, r9
   83ef8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83efc:	428a      	cmp	r2, r1
   83efe:	d907      	bls.n	83f10 <__udivdi3+0x244>
   83f00:	1909      	adds	r1, r1, r4
   83f02:	f103 30ff 	add.w	r0, r3, #4294967295
   83f06:	d222      	bcs.n	83f4e <__udivdi3+0x282>
   83f08:	428a      	cmp	r2, r1
   83f0a:	d920      	bls.n	83f4e <__udivdi3+0x282>
   83f0c:	3b02      	subs	r3, #2
   83f0e:	4421      	add	r1, r4
   83f10:	1a89      	subs	r1, r1, r2
   83f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83f16:	e743      	b.n	83da0 <__udivdi3+0xd4>
   83f18:	463a      	mov	r2, r7
   83f1a:	e705      	b.n	83d28 <__udivdi3+0x5c>
   83f1c:	4633      	mov	r3, r6
   83f1e:	e718      	b.n	83d52 <__udivdi3+0x86>
   83f20:	460a      	mov	r2, r1
   83f22:	e766      	b.n	83df2 <__udivdi3+0x126>
   83f24:	40b0      	lsls	r0, r6
   83f26:	4290      	cmp	r0, r2
   83f28:	d2b5      	bcs.n	83e96 <__udivdi3+0x1ca>
   83f2a:	f10c 32ff 	add.w	r2, ip, #4294967295
   83f2e:	2300      	movs	r3, #0
   83f30:	e712      	b.n	83d58 <__udivdi3+0x8c>
   83f32:	4633      	mov	r3, r6
   83f34:	4632      	mov	r2, r6
   83f36:	e70f      	b.n	83d58 <__udivdi3+0x8c>
   83f38:	459a      	cmp	sl, r3
   83f3a:	d98d      	bls.n	83e58 <__udivdi3+0x18c>
   83f3c:	f1ac 0c02 	sub.w	ip, ip, #2
   83f40:	4423      	add	r3, r4
   83f42:	e78a      	b.n	83e5a <__udivdi3+0x18e>
   83f44:	45b9      	cmp	r9, r7
   83f46:	d99a      	bls.n	83e7e <__udivdi3+0x1b2>
   83f48:	3d02      	subs	r5, #2
   83f4a:	4427      	add	r7, r4
   83f4c:	e798      	b.n	83e80 <__udivdi3+0x1b4>
   83f4e:	4603      	mov	r3, r0
   83f50:	e7de      	b.n	83f10 <__udivdi3+0x244>
   83f52:	4690      	mov	r8, r2
   83f54:	e7c6      	b.n	83ee4 <__udivdi3+0x218>
   83f56:	3802      	subs	r0, #2
   83f58:	4421      	add	r1, r4
   83f5a:	e735      	b.n	83dc8 <__udivdi3+0xfc>

00083f5c <sineLUT>:
   83f5c:	0800 0000 0832 0000 0864 0000 0896 0000     ....2...d.......
   83f6c:	08c8 0000 08fa 0000 092c 0000 095e 0000     ........,...^...
   83f7c:	098f 0000 09c0 0000 09f1 0000 0a22 0000     ............"...
   83f8c:	0a52 0000 0a82 0000 0ab1 0000 0ae0 0000     R...............
   83f9c:	0b0f 0000 0b3d 0000 0b6b 0000 0b98 0000     ....=...k.......
   83fac:	0bc5 0000 0bf1 0000 0c1c 0000 0c47 0000     ............G...
   83fbc:	0c71 0000 0c9a 0000 0cc3 0000 0ceb 0000     q...............
   83fcc:	0d12 0000 0d39 0000 0d5f 0000 0d83 0000     ....9..._.......
   83fdc:	0da7 0000 0dca 0000 0ded 0000 0e0e 0000     ................
   83fec:	0e2e 0000 0e4e 0000 0e6c 0000 0e8a 0000     ....N...l.......
   83ffc:	0ea6 0000 0ec1 0000 0edc 0000 0ef5 0000     ................
   8400c:	0f0d 0000 0f24 0000 0f3a 0000 0f4f 0000     ....$...:...O...
   8401c:	0f63 0000 0f76 0000 0f87 0000 0f98 0000     c...v...........
   8402c:	0fa7 0000 0fb5 0000 0fc2 0000 0fcd 0000     ................
   8403c:	0fd8 0000 0fe1 0000 0fe9 0000 0ff0 0000     ................
   8404c:	0ff5 0000 0ff9 0000 0ffd 0000 0ffe 0000     ................
   8405c:	0fff 0000 0ffe 0000 0ffd 0000 0ff9 0000     ................
   8406c:	0ff5 0000 0ff0 0000 0fe9 0000 0fe1 0000     ................
   8407c:	0fd8 0000 0fcd 0000 0fc2 0000 0fb5 0000     ................
   8408c:	0fa7 0000 0f98 0000 0f87 0000 0f76 0000     ............v...
   8409c:	0f63 0000 0f4f 0000 0f3a 0000 0f24 0000     c...O...:...$...
   840ac:	0f0d 0000 0ef5 0000 0edc 0000 0ec1 0000     ................
   840bc:	0ea6 0000 0e8a 0000 0e6c 0000 0e4e 0000     ........l...N...
   840cc:	0e2e 0000 0e0e 0000 0ded 0000 0dca 0000     ................
   840dc:	0da7 0000 0d83 0000 0d5f 0000 0d39 0000     ........_...9...
   840ec:	0d12 0000 0ceb 0000 0cc3 0000 0c9a 0000     ................
   840fc:	0c71 0000 0c47 0000 0c1c 0000 0bf1 0000     q...G...........
   8410c:	0bc5 0000 0b98 0000 0b6b 0000 0b3d 0000     ........k...=...
   8411c:	0b0f 0000 0ae0 0000 0ab1 0000 0a82 0000     ................
   8412c:	0a52 0000 0a22 0000 09f1 0000 09c0 0000     R..."...........
   8413c:	098f 0000 095e 0000 092c 0000 08fa 0000     ....^...,.......
   8414c:	08c8 0000 0896 0000 0864 0000 0832 0000     ........d...2...
   8415c:	0800 0000 07cd 0000 079b 0000 0769 0000     ............i...
   8416c:	0737 0000 0705 0000 06d3 0000 06a1 0000     7...............
   8417c:	0670 0000 063f 0000 060e 0000 05dd 0000     p...?...........
   8418c:	05ad 0000 057d 0000 054e 0000 051f 0000     ....}...N.......
   8419c:	04f0 0000 04c2 0000 0494 0000 0467 0000     ............g...
   841ac:	043a 0000 040e 0000 03e3 0000 03b8 0000     :...............
   841bc:	038e 0000 0365 0000 033c 0000 0314 0000     ....e...<.......
   841cc:	02ed 0000 02c6 0000 02a0 0000 027c 0000     ............|...
   841dc:	0258 0000 0235 0000 0212 0000 01f1 0000     X...5...........
   841ec:	01d1 0000 01b1 0000 0193 0000 0175 0000     ............u...
   841fc:	0159 0000 013e 0000 0123 0000 010a 0000     Y...>...#.......
   8420c:	00f2 0000 00db 0000 00c5 0000 00b0 0000     ................
   8421c:	009c 0000 0089 0000 0078 0000 0067 0000     ........x...g...
   8422c:	0058 0000 004a 0000 003d 0000 0032 0000     X...J...=...2...
   8423c:	0027 0000 001e 0000 0016 0000 000f 0000     '...............
   8424c:	000a 0000 0006 0000 0002 0000 0001 0000     ................
   8425c:	0000 0000 0001 0000 0002 0000 0006 0000     ................
   8426c:	000a 0000 000f 0000 0016 0000 001e 0000     ................
   8427c:	0027 0000 0032 0000 003d 0000 004a 0000     '...2...=...J...
   8428c:	0058 0000 0067 0000 0078 0000 0089 0000     X...g...x.......
   8429c:	009c 0000 00b0 0000 00c5 0000 00db 0000     ................
   842ac:	00f2 0000 010a 0000 0123 0000 013e 0000     ........#...>...
   842bc:	0159 0000 0175 0000 0193 0000 01b1 0000     Y...u...........
   842cc:	01d1 0000 01f1 0000 0212 0000 0235 0000     ............5...
   842dc:	0258 0000 027c 0000 02a0 0000 02c6 0000     X...|...........
   842ec:	02ed 0000 0314 0000 033c 0000 0365 0000     ........<...e...
   842fc:	038e 0000 03b8 0000 03e3 0000 040e 0000     ................
   8430c:	043a 0000 0467 0000 0494 0000 04c2 0000     :...g...........
   8431c:	04f0 0000 051f 0000 054e 0000 057d 0000     ........N...}...
   8432c:	05ad 0000 05dd 0000 060e 0000 063f 0000     ............?...
   8433c:	0670 0000 06a1 0000 06d3 0000 0705 0000     p...............
   8434c:	0737 0000 0769 0000 079b 0000 07cd 0000     7...i...........
   8435c:	5355 5241 3354 6f20 0a6b 000d 4954 414f     USART3 ok...TIOA
   8436c:	2030 6b6f 0d0a 0000 4954 414f 2036 6b6f     0 ok....TIOA6 ok
   8437c:	0d0a 0000 4954 414f 2037 6b6f 0d0a 0000     ....TIOA7 ok....
   8438c:	4954 414f 2038 6b6f 0d0a 0000 5452 2043     TIOA8 ok....RTC 
   8439c:	6b6f 0d0a 0000 0000 4144 2043 6b6f 0d0a     ok......DAC ok..
   843ac:	0000 0000 4441 2043 6b6f 0d0a 0000 0000     ....ADC ok......
   843bc:	6570 6972 6566 6972 6f63 2073 6b6f 0d0a     perifericos ok..
   843cc:	0000 0000 7375 5420 6d69 7365 6174 706d     ....us Timestamp
   843dc:	203a 6c25 0a64 000d 0043 0000               : %ld...C...

000843e8 <_global_impure_ptr>:
   843e8:	0130 2007 3130 3332 3534 3736 3938 4241     0.. 0123456789AB
   843f8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   84408:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   84418:	296c 0000                                   l)..

0008441c <zeroes.6721>:
   8441c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008442c <blanks.6720>:
   8442c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008443c <_init>:
   8443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8443e:	bf00      	nop
   84440:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84442:	bc08      	pop	{r3}
   84444:	469e      	mov	lr, r3
   84446:	4770      	bx	lr

00084448 <__init_array_start>:
   84448:	00082051 	.word	0x00082051

0008444c <__frame_dummy_init_array_entry>:
   8444c:	00080119                                ....

00084450 <_fini>:
   84450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84452:	bf00      	nop
   84454:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84456:	bc08      	pop	{r3}
   84458:	469e      	mov	lr, r3
   8445a:	4770      	bx	lr

0008445c <__fini_array_start>:
   8445c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	000843e4 00000000 00000000 00000000     .C..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	00083761                                a7..
